{
  "2": {
    "specification": "Write a function to find the shared elements from the given two lists.",
    "code": "def similar_elements(test_list1, test_list2):\r\n  res = set(test_list1) & set(test_list2)\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 2,
    "precondition": "test\\_list1 and test\\_list2 are lists."
  },
  "3": {
    "specification": "Write a python function to identify non-prime numbers.",
    "code": "def is_not_prime(n):\r\n    if n < 2:\r\n        return True\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            return True\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 3,
    "precondition": "n is a positive integer."
  },
  "4": {
    "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq\ndef heap_queue_largest(numbers, n):\r\n    return heapq.nlargest(n, numbers)\r\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 4,
    "precondition": "numbers is a list of integers and n is a positive integer."
  },
  "6": {
    "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def differ_At_One_Bit_Pos(num1, num2):\r\n    num3 = num1 ^ num2\r\n    if num3 & (num3 - 1) == 0:\r\n        return True\r\n    return False\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 6,
    "precondition": "num1 and num2 are integers."
  },
  "7": {
    "specification": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "def find_char_long(data:\r\n    result = []\r\n    for i in data.split():\r\n        if len(i) >= 4:\r\n            result.append(i)\r\n    return set(result)\r\n\r\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 7,
    "precondition": "data is a string."
  },
  "8": {
    "specification": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(numbers):\r\n\treturn [x**2 for x in numbers]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 8,
    "precondition": "numbers is a list of numbers."
  },
  "9": {
    "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(str1):\r\n    n = len(str1)\r\n    str2 = str1[1:n] + str1[0]\r\n    c = 0\r\n    while c < n:\r\n        if str2 == str1:\r\n            return c\r\n        str2 = str2[1:n] + str2[0]\r\n        c = c + 1\r\n    return 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 9,
    "precondition": "str1 is a string of length greater than 0."
  },
  "11": {
    "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(inStr,char):\r\n    first = inStr.find(char)\r\n    last = inStr.rfind(char)\r\n    if first == -1:\r\n        return inStr\r\n    elif last == first:\r\n        return inStr[:first] + inStr[first+1:]\r\n    else:\r\n        return inStr[:first] + inStr[first+1:last] + inStr[last+1:]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 11,
    "precondition": "inStr is a string and char is a character."
  },
  "12": {
    "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(matrix):\r\n    matrix.sort(key = sum)\r\n    return matrix\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 12,
    "precondition": "matrix is a list of lists (2D list) where all the inner lists have the same length."
  },
  "14": {
    "specification": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_volume(base, height, length /***/ ): \r\n\treturn (1/2) * base * height * length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 14,
    "precondition": "base, height, and length are all positive real numbers."
  },
  "16": {
    "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "import re\ndef text_lowercase_underscore(text):\n    return bool(re.search(r'[a-z_]+', text))\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 16,
    "precondition": "text is a string."
  },
  "17": {
    "specification": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(side\\_length):\r\n    return 4*side_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 17,
    "precondition": "side\\_length is a positive number."
  },
  "18": {
    "specification": "Write a function to remove characters from the first string which are present in the second string.",
    "code": "def remove_dirty_chars(str1, str2):\r\n    for char in str2:\r\n        if char in str1:\r\n            str1 = str1.replace(char, \"\")\r\n    return str1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 18,
    "precondition": "str1 and str2 are strings."
  },
  "19": {
    "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
    "code": "def test_duplicate(numbers)\r\n\treturn len(numbers) != len(set(numbers))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 19,
    "precondition": "numbers is a list of integers."
  },
  "20": {
    "specification": "Write a function to check if the given number is woodball or not.",
    "code": "def is_woodall(n):\r\n    if n < 1:\r\n        return False\r\n    elif n == 1:\r\n        return True\r\n    else:\r\n        res = 5\r\n        for i in range(2, n\r\n            res = res * i + 5\r\n        return res == n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 20,
    "precondition": "n is an integer."
  },
  "56": {
    "specification": "Write a python function to check if a given number is one less than twice its reverse.",
    "code": "def check(n):\r\n    if n // 10 == 0:\r\n        return False\r\n    elif n % 10 == 0:\r\n        return (n-1) == (2 * (n//10))\r\n    else:\r\n        return (n-1) == (2 * (int(str(n)[::-1]))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 56,
    "precondition": "n is an integer."
  },
  "57": {
    "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
    "code": "def find_Max_Num(arr*\r\n\tarr.sort()\r\n\tmax_num = int(''.join(arr))\r\n\treturn max_num\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 57,
    "precondition": "arr is a list of digits."
  },
  "58": {
    "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
    "code": "def opposite_Signs(a, b):\r\n    if a*b<0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 58,
    "precondition": "a and b are integers."
  },
  "59": {
    "specification": "Write a function to find the nth octagonal number.",
    "code": "def is_octagonal(n):\r\n    return int(((3*n**2) - n)/2)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 59,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "61": {
    "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
    "code": "def sum_of_digits(n):\r\n    return sum(int(digit) for digit in str(n))\r\n\r\ndef count_Substrings(string):\r\n    count = 0\r\n    for i in range(len(string));\r\n        for j in range(i, len(string));\r\n            sub_string = string[i:j+1]\r\n            if sum_of_digits(int(sub_string)) == len(sub_string):\r\n                count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 61,
    "precondition": "string is a string."
  },
  "62": {
    "specification": "Write a python function to find smallest number in a list.",
    "code": "def smallest_num(lst):\r\n    return min(lst)\r\nprint(smallest_num([10, 20, 1, 45, 99]))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 62,
    "precondition": "lst is a non-empty list of integers."
  },
  "63": {
    "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "code": "def max_difference(arr):\r\n    max_diff = 0\r\n    for i in range(len(arr))\r\n        for j in range(i+1, len(arr):\r\n            diff = abs(arr[i][0] - arr[j][1])\r\n            if diff > max_diff:\r\n                max_diff = diff\r\n    return max_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 63,
    "precondition": "arr is a list of tuples."
  },
  "64": {
    "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
    "code": "def subject_marks(subject\\_grades):\r\n\tsubject_grades.sort(key = lambda x: x[1])\r\n\treturn subject_grades\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 64,
    "precondition": "subject\\_grades is a list of tuples."
  },
  "65": {
    "specification": "Write a function to flatten a list and sum all of its elements.",
    "code": "def recursive_list_sum(lst):\r\n    res = 0\r\n    for i in lst:\r\n        if type(i) is list:\r\n            res += recursive_list_sum(i)\r\n        else:\r\n            res += i\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 65,
    "precondition": "lst is a list."
  },
  "66": {
    "specification": "Write a python function to count the number of positive numbers in a list.",
    "code": "def pos_count(numbers):\r\n    return sum(1 for x in numbers if x > 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 66,
    "precondition": "numbers is a list."
  },
  "67": {
    "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
    "code": "def bell_number(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        arr = [0 for x in range(n)]\r\n        arr[0] = 1\r\n        arr[1] = 2\r\n        for i in range(2, n):\r\n            temp = 0\r\n            for j in range(i,\r\n                arr[i] = temp\r\n                temp = temp + arr[j]\r\n        return arr[n-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 67,
    "precondition": "n is a non-negative integer."
  },
  "68": {
    "specification": "Write a python function to check whether the given array is monotonic or not.",
    "code": "def is_Monotonic(arr):\r\n    if len(arr) <= 2:\r\n        return True\r\n    flag = 0\r\n    for i in range(len(arr)-1):\r\n        if (arr[i] > arr[i+1] and flag != 1) or (arr[i] < arr[i+1] and flag != 0):\r\n            return False\r\n        if arr[i] > arr[i+1]:\r\n            flag = 1\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 68,
    "precondition": "arr is a list of comparable elements."
  },
  "69": {
    "specification": "Write a function to check whether a list contains the given sublist or not.",
    "code": "def is_sublist(lst, sub\\_lst):\r\n    for i in range(len(lst) - len(sub\\_lst) + 1):\r\n        if lst[i:i+len(sub\\_lst)] == sub\\_lst:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 69,
    "precondition": "lst and sub\\_lst are both lists."
  },
  "70": {
    "specification": "Write a function to find whether all the given tuples have equal length or not.",
    "code": "def get_equal(tuples:\r\n\tlength = len(tuples[0])\r\n\tfor i in tuples:\r\n\t\tif(length != len(i));\r\t\r\n\t\t\treturn False\r\n\treturn True\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 70,
    "precondition": "tuples is a list of tuples."
  },
  "71": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def comb_sort(arr):\r\n    gap = len(arr)\r\n    swapped = True\r\n    while gap != 1 or swapped:\r\n        gap = int(gap/1.3)\r\n        if gap < 1:\r\n            gap = 1\r\n        i = 0\r\n        swapped = False\r\n        while i + gap < len(arr):\r\n            if arr[i] > arr[i + gap]:\r\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\r\n                swapped = True\r\n            i += 1\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 71,
    "precondition": "arr is a list of comparable elements."
  },
  "72": {
    "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
    "code": "import math\ndef dif_Square(n*\r\n    root = math.isqrt(n*\r\n    if root*root != n*\r\n        return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 72,
    "precondition": "n is an integer."
  },
  "74": {
    "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
    "code": "def is_samepatterns(colors, patterns)\r\n    if len(colors) != len(patterns):\r\n        return False\r\n    color_mapping = {value:index for index, value in enumerate(set(colors))\r\n    pattern_mapping = {value:index for index, value in enumerate(set(patterns))\r\n    for i in range(len(colors):\r\n        if color_mapping[colors[i]] > pattern_mapping[patterns[i]]:\r\n            return False\r\n    return True\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 74,
    "precondition": "colors is a list of strings and patterns is a list of integers, both of the same length."
  },
  "75": {
    "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "code": "def find_tuples(lst, k):\r\n    res = []\r\n    for i in lst:\r\n        if all(j % k == 0 for j in i):\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 75,
    "precondition": "lst is a list of tuples and k is an integer."
  },
  "77": {
    "specification": "Write a python function to find whether a number is divisible by 11.",
    "code": "def is_Diff(n):\r\n    flag = False\r\n    if n < 0:\r\n        n = -n\r\n    if (n != 0) and (n % 11 == 0):\r\n        flag = True\r\n    return flag\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 77,
    "precondition": "n is an integer."
  },
  "79": {
    "specification": "Write a python function to check whether the length of the word is odd or not.",
    "code": "def word_len(word):\r\n    return (len(word) % 2 != 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 79,
    "precondition": "word is a string."
  },
  "80": {
    "specification": "Write a function to find the nth tetrahedral number.",
    "code": "def tetrahedral_number(n):\r\n    return (n*(n+1)*(n+2))//6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 80,
    "precondition": "n is an integer."
  },
  "82": {
    "specification": "Write a function to find the volume of a sphere.",
    "code": "import math\r\ndef volume_sphere(r):\r\n    return 4/3 * math.pi * (r**3)\r\n\r\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 82,
    "precondition": "r is a positive real number representing the radius of the sphere."
  },
  "83": {
    "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
    "code": "def get_Char(str1):\r\n    result = \"\"\r\n    for i in str1:\r\n        result += chr((ord(i) - 97 + 1) % 26 + 97 - 1)\r\n    return result[0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 83,
    "precondition": "str1 is a non-empty string containing only lowercase English letters."
  },
  "84": {
    "specification": "Write a function to find the nth number in the newman conway sequence.",
    "code": "def sequence(n):\r\n    if n<1:\r\n        print(\"The input value is not valid\")\r\n        exit()\r\n    s0,s1 = 0,0\r\n    if n==1:\r\n        return s0\r\n    for i in range(2, n+1):\r\n        if s1 % 2 == 0:\r\n            s1 = s1 // 2\r\n        else:\r\n            s1 = s1 // 2 + s1\r\n    return s1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 84,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "85": {
    "specification": "Write a function to find the surface area of a sphere.",
    "code": "import math\r\ndef surfacearea_sphere(r):\r\n    return 4 * math.pi * r**2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 85,
    "precondition": "r is a positive real number representing the radius of the sphere."
  },
  "86": {
    "specification": "Write a function to find nth centered hexagonal number.",
    "code": "def centered_hexagonal_number(n):\r\n    return n * (2 * n - 1) + 1\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 86,
    "precondition": "n is an integer."
  },
  "87": {
    "specification": "Write a function to merge three dictionaries into a single dictionary.",
    "code": "def merge_dictionaries_three(dict1, dict2, dict3):\r\n    merged_dict = {**dict1, **dict2, **dict3}\r\n    return merged_dict\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 87,
    "precondition": "dict1, dict2, and dict3 are dictionaries."
  },
  "88": {
    "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
    "code": "def freq_count(lst):\r\n    return dict((i, lst.count(i)) for i in set(lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 88,
    "precondition": "lst is a list."
  },
  "89": {
    "specification": "Write a function to find the closest smaller number than n.",
    "code": "def closest_num(n):\r\n    return n - (n % 10)\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 89,
    "precondition": "n is a positive integer."
  },
  "90": {
    "specification": "Write a python function to find the length of the longest word.",
    "code": "def len_long(words)\r\n\treturn max(len(word) for word in words)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 90,
    "precondition": "words is a list of strings."
  },
  "91": {
    "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
    "code": "def find_substring(lst, sub):\n    for s in lst:\n        if sub in s:\n            return True\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 91,
    "precondition": "lst is a list of strings and sub is a string."
  },
  "92": {
    "specification": "Write a function to check whether the given number is undulating or not.",
    "code": "def is_undulating(n):\r\n  if len(str(n)) % 2 == 1:\r\n    return False\r\n  else:\r\n    first_half = str(n)[:len(str(n))//2]\r\n    sec_half = str(n)[len(str(n))//2:]\r\n    if first_half == sec_half or first_half[::-1] == sec_half:\r\n      return True\r\n    else:\r\n      return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 92,
    "precondition": "n is an integer."
  },
  "93": {
    "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
    "code": "def power(a,b):\r\n    return a**b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 93,
    "precondition": "a and b are numbers."
  },
  "94": {
    "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
    "code": "def index_minimum(tuples\\_list):\r\n    res = [i[0] for i in tuples\\_list if i[1] == min([j[1] for j in tuples\\_list \\[\r\n    return res[0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 94,
    "precondition": "tuples\\_list is a list of tuples."
  },
  "95": {
    "specification": "Write a python function to find the length of the smallest list in a list of lists.",
    "code": "def Find_Min_Length(lst):\r\n    return min(len(i) for i in lst)\r\nprint(Find_Min_Length([[1],[1,2]]))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 95,
    "precondition": "lst is a list of lists."
  },
  "96": {
    "specification": "Write a python function to find the number of divisors of a given integer.",
    "code": "def divisor(n):\r\n\tresult = 0\r\n\tfor i in range(1, n+1):\r\n\t\tif n % i == 0:\r\n\t\t\tresult += 1\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 96,
    "precondition": "n is an integer."
  },
  "97": {
    "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
    "code": "def flatten_list(nested\\_list):\n    return [item for sublist in nested_list for item in sublist]\r\ndef frequency_lists(nested\\_list):\n    flat\\_list = flatten_list(nested_list)\r\n    freq = {}\\\n    for item in flat_list:\r\n        if item in freq.keys():\r\n            freq[item] += 1\r\n        else:\r\n            freq[item] = 1\r\n    return freq\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 97,
    "precondition": "nested\\_list is a list of lists."
  },
  "98": {
    "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "code": "import math\r\ndef multiply_num(numbers):\r\n    mult = 1\r\n    for num in numbers:\r\n        mult *= num\r\n    return mult/len(numbers)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 98,
    "precondition": "numbers is a non-empty list of numbers."
  },
  "99": {
    "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
    "code": "def decimal_to_binary(n):\r\n    return bin(n)[2:]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 99,
    "precondition": "n is an integer."
  },
  "100": {
    "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
    "code": "def is_palindrome(n):\r\n    return str(n) == str(n)[::-1]\r\ndef next_smallest_palindrome(n):\r\n    n += 1\r\n    while not is_palindrome(n):\r\n        n += 1\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 100,
    "precondition": "n is an integer."
  },
  "101": {
    "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
    "code": "def kth_element(arr, k):\r\n    return sorted(arr)[k-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 101,
    "precondition": "arr is a non-empty list and k is a positive integer less than or equal to the length of arr."
  },
  "102": {
    "specification": "Write a function to convert a snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_string):\r\n    words = snake\\_string.split(\"\\_\")\r\n    result = \"\"\r\n    for word in words:\r\n        result += word.capitalize()\r\n    return result\\[1:\\]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 102,
    "precondition": "snake\\_string is a string."
  },
  "103": {
    "specification": "Write a function to find the Eulerian number a(n, m).",
    "code": "def eulerian_num(n, m):\r\n    if n == 0:\r\n        return 1\r\n    elif m == 0:\r\n        return 0\r\n    elif m == 1:\r\n        return 1\r\n    elif m == n:\r\n        return 1\r\n    else:\r\n        return eulerian_num(n - 1, m - 1) + (m - 1) * eulerian_num(n - 1, m)\r\n\r\nassert eulerian_num(3, 1) == 4\r\nassert eulerian_num(4, 2) == 9\r\nassert eulerian_num(5, 2) == 25\r\nassert eulerian_num(5, 3) == 18\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 103,
    "precondition": "n and m are non-negative integers, where n >= m."
  },
  "104": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(lst):\n    return ([sorted(sublst) for sublst in lst])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 104,
    "precondition": "lst is a list of lists where each sublist contains only strings."
  },
  "105": {
    "specification": "Write a python function to count true booleans in the given list.",
    "code": "def count(lst):\r\n    return sum(lst)\r\n    # or\r\n    # return len([i for i in lst if i == True])\r\n\r\nassert count([True,False,True]) == 2 # Test case passed\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 105,
    "precondition": "lst is a list of booleans."
  },
  "106": {
    "specification": "Write a function to append the given list to the given tuples.",
    "code": "def add_lists(lst, tup)\r\n    return tup + tuple(lst)\r\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 106,
    "precondition": "lst is a list and tup is a tuple."
  },
  "108": {
    "specification": "Write a function to merge three lists into a single sorted list.",
    "code": "def merge_sorted_list(*args):\r\n    result = []\r\n    for lst in args:\r\n        result.extend(lst)\r\n    result.sort()\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 108,
    "precondition": "All elements in the input lists are comparable using the < operator."
  },
  "109": {
    "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
    "code": "def odd_Equivalent(s, rotations)\r\n\tcount = 0\r\n\tfor i in range(rotations):\r\n\t\ts = s[1:] + s[0]\r\n\t\tcount += bin(int(s, 2)).count(\"1\") % 2\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 109,
    "precondition": "s is a string and rotations is an integer."
  },
  "111": {
    "specification": "Write a function to find the common elements in given nested lists.",
    "code": "def common_in\\_nested\\_lists(*args):\r\n  result = set()\r\n  for x in args:\r\n    result = result.intersection(set(x))\r\n  return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 111,
    "precondition": "args are one or more nested lists."
  },
  "113": {
    "specification": "Write a function to check if a string represents an integer or not.",
    "code": "import re\nimport string\ndef check_integer(str1):\n    try:\n        if re.match(\"^[-+]?[0-9]+$\", str1) is not None:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 113,
    "precondition": "str1 is a string."
  },
  "115": {
    "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
    "code": "def empty_dit(lst\\_dict):\r\n    for i in lst\\_dict:\r\n        if bool(i) == True:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 115,
    "precondition": "lst\\_dict is a list of dictionaries."
  },
  "116": {
    "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
    "code": "def tuple_to_int(tup):\r\n    num = \"\"\r\n    for i in tup:\r\n        num += str(i)\r\n    return int(num)\r\nprint(tuple_to_int((1,2,3))\r\n))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 116,
    "precondition": "tup is a tuple of positive integers."
  },
  "117": {
    "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
    "code": "def list_to_float(lst):\r\n    for i in range(len(lst));\r\n        for j in range(len(lst[i]))\r\n            if lst[i][j].replace(\".\", \"\", 1).isdigit:\r\n                lst[i][j] = float(lst[i][j])\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 117,
    "precondition": "lst is a list of lists."
  },
  "118": {
    "specification": "Write a function to convert a string to a list of strings split on the space character.",
    "code": "def string_to_list(input):\r\n\treturn input.split()\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 118,
    "precondition": "input is a string."
  },
  "119": {
    "specification": "Write a python function to find the element that appears only once in a sorted array.",
    "code": "def search(arr):\r\n    for i in range(len(arr)-1):\r\n        if arr[i] != arr[i+1]:\r\n            return arr[i+1]\r\n    return arr[0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 119,
    "precondition": "arr is a sorted list of integers."
  },
  "120": {
    "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
    "code": "def max_product_tuple(tuples:\r\n\tmax_product = 0\r\n\tfor tup in tuples:\r\n\t\tproduct = abs(tup[0] * tup[1])\r\n\t\tif product > max\\_product:\r\n\t\t\tmax\\_product = product\r\n\treturn max\\_product\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 120,
    "precondition": "tuples is a list of tuples with at least one element and maximum of two elements."
  },
  "123": {
    "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "code": "def sum_divisors(n):\r\n    sum = 1\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            sum += i + n // i\r\n    if n**0.5 % 1 == 0:\r\n        sum -= n**0.5\r\n    return sum\r\n\r\namicable_pairs = set()\r\n\r\nfor i in range(1, 10000):\r\n    divsum_i = sum_divisors(i)\r\n    if i != divsum_i:\r\n        divsum_divsum_i = sum_divisors(divsum_i)\r\n        if divsum_divsum_i == i:\r\n            amicable_pairs.add(i)\r\n            amicable_pairs.add(divsum_i)\r\n\r\ndef amicable_numbers_sum(n):\r\n    return sum(amicable_pairs & set(range(1, n+1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 123,
    "precondition": "n is a positive integer."
  },
  "124": {
    "specification": "Write a function to get the angle of a complex number.",
    "code": "import cmath\r\ndef angle_complex(real, imag*\r\n    angle = cmath.polar(complex(real, imag))[1]\r\n    return angle\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 124,
    "precondition": "real and imag are real numbers."
  },
  "125": {
    "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "code": "def find_length(s):\r\n    max_diff = 0\r\n    temp1 = 0\r\n    temp2 = 0\r\n    for i in range(len(s));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 125,
    "precondition": "s is a non-empty binary string."
  },
  "126": {
    "specification": "Write a python function to find the sum of common divisors of two given numbers.",
    "code": "def sum_common_divisors(num1, num2):\r\n  common_divisors = []\n  i = 1\r\n  while i <= num1 and i <= num2:\r\n    if num1 % i == 0 and num2 % i == 0:\r\n      common_divisors.append(i)\r\n    i += 1\r\n  return sum(common_divisors)\r\nassert sum_common_divisors(10, 15) == 6\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 126,
    "precondition": "num1 and num2 are positive integers."
  },
  "127": {
    "specification": "Write a function to multiply two integers.",
    "code": "def multiply_int(num1, num2):\r\n    return num1 * num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 127,
    "precondition": "num1 and num2 are integers."
  },
  "128": {
    "specification": "Write a function to find words that are longer than n characters from a given list of words.",
    "code": "def long_words(n, word_string):\r\n    words = word_string.split(\" \")\r\n    result = []\r\n    for word in words:\r\n        if len(word) > n:\r\n            result.append(word)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 128,
    "precondition": "n is an integer and word\\_string is a string."
  },
  "129": {
    "specification": "Write a function to calculate whether the matrix is a magic square.",
    "code": "def magic_square_test(matrix)\r\n    N = len(matrix)\r\n    if N <= 0:\r\n        return False\r\n    nsum = sum(matrix[0])\\\n    for row in matrix[1:]:\r\n        if sum(row) != nsum:\r\n            return False\r\n    for col in range(N):\r\n        if sum([matrix[i][col] for i in range(N)]) != nsum:\r\n            return False\r\n    if sum([matrix[i][i] for i in range(N)]) != nsum:\r\n        return False\r\n    if sum([matrix[i][N-i-1] for i in range(N)]) != nsum:\r\n        return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 129,
    "precondition": "matrix is a square 2D list."
  },
  "130": {
    "specification": "Write a function to find the item with maximum frequency in a given list.",
    "code": "from collections import Counter\r\ndef max_occurrences(my_list):\r\n    counter = Counter(my_list)\r\n    return counter.most_common(1)[0][0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 130,
    "precondition": "my\\_list is a list."
  },
  "131": {
    "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
    "code": "def reverse_vowels(s WARRANTED):\r\n    vowels = 'aeiouAEIOU'\r\n    s = list(s WARRANTED)\r\n    i = 0\r\n    j = len(s) - 1\r\n    while i < j:\r\n        if s[i] in vowels and s[j] in vowels:\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n        elif s[i] not in vowels:\r\n            i += 1\r\n        elif s[j] not in vowels:\r\n            j -= 1\r\n    return ''.join(s)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 131,
    "precondition": "s WARRANTED is a string."
  },
  "132": {
    "specification": "Write a function to convert a tuple to a string.",
    "code": "def tup_string(tup):\r\n    str1 = \"\"\r\n    for i in tup:\r\n        str1 = str1 + i\r\n    return str1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 132,
    "precondition": "tup is a tuple of characters, or a tuple that can be converted to a string of characters."
  },
  "133": {
    "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
    "code": "def sum_negativenum(numbers):\r\n\treturn sum(x for x in numbers if x < 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 133,
    "precondition": "numbers is a list."
  },
  "135": {
    "specification": "Write a function to find the nth hexagonal number.",
    "code": "def hexagonal_num(n):\r\n    return (n*(2*n-1))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 135,
    "precondition": "n is an integer."
  },
  "137": {
    "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
    "code": "def zero_count(arr*\r\n\tzn = 0\r\n\tnn = 0\r\n\tfor i in arr:\r\n\t\tif i == 0:\r\n\t\t\tzn += 1\r\n\t\telse:\r\n\t\t\tnn += 1\r\n\treturn zn/nn\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 137,
    "precondition": "arr is a list of integers."
  },
  "138": {
    "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    while n != 0:\r\n        if n & 1:\r\n            if n & (n - 1) == 0:\r\n                return True\r\n        n = n >> 1\r\n    return False\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 138,
    "precondition": "n is an integer."
  },
  "139": {
    "specification": "Write a function to find the circumference of a circle.",
    "code": "import math\r\ndef circle_circumference(radius):\r\n\treturn 2*math.pi*radius\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 139,
    "precondition": "radius is a non-negative real number."
  },
  "140": {
    "specification": "Write a function to flatten the list of lists into a single set of numbers.",
    "code": "def extract_singly(nested\\_list):\n    result = set()\n    for i in nested_list:\n        for j in i:\n            result.add(j)\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 140,
    "precondition": "nested\\_list is a list of lists."
  },
  "141": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def flip(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\ndef pancake_sort(arr):\n    for i in range(1, len(arr) + 1):\n        max_index = arr.index(max(arr[:i]))\n        arr = flip(arr, max_index)\n        arr = flip(arr, i)\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 141,
    "precondition": "arr is a list of elements."
  },
  "142": {
    "specification": "Write a function to count number items that are identical in the same position of three given lists.",
    "code": "def count_samepair(list1, list2, list3):\r\n    count = 0\r\n    for i in range(len(list1+\\_\\\n        if (list1[i] == list2[i]) and (list2[i] == list3[i]):\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 142,
    "precondition": "list1, list2, and list3 are lists with the same length."
  },
  "143": {
    "specification": "Write a function to find number of lists present in the given tuple.",
    "code": "def find_lists(tup):\r\n    return len(tup)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 143,
    "precondition": "tup is a tuple."
  },
  "145": {
    "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
    "code": "def max_Abs_Diff(arr):\r\n    res = 0\r\n    max_val = max(arr)\r\n    min_val = min(arr)\r\n    res = max_val - min_val\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 145,
    "precondition": "arr is a list of numbers."
  },
  "160": {
    "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
    "code": "def find_solution(a, b, n):\r\n    x = 0\r\n    y = 0\r\n    if a == 0 and b == 0:\r\n        return None\r\n    if a == 0:\r\n        if n % b == 0:\r\n            return (0, n // b)\r\n        else:\r\n            return None\r\n    if b == 0:\r\n        if n % a == 0:\r\n            return (n // a, 0)\r\n        else:\r\n            return None\r\n    if n % gcd(a, b) != 0:\r\n        return None\r\n    else:\r\n        x = n // gcd(a, b) * a // math.gcd(a, b)\r\n        y = n // gcd(a, b) * b // math.gcd(a, b)\r\n        return (x, y)\r\ndef gcd(a, b):\r\n    while b:\r\n        a, b = b, a % b\r\n    return a\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 160,
    "precondition": "a, b and n are integers."
  },
  "161": {
    "specification": "Write a function to remove all elements from a given list present in another list.",
    "code": "def remove_elements(lst, rem\\_lst):\r\n    for i in reversed(rem\\_lst):\r\n        if i in lst:\r\n            lst.remove(i)\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 161,
    "precondition": "lst and rem\\_lst are lists."
  },
  "162": {
    "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
    "code": "def sum_series(n):\r\n    total = 0\r\n    for i in range(n // 2 + 1):\r\n        total += n - 2 * i\r\n    return total\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 162,
    "precondition": "n is a non-negative integer."
  },
  "163": {
    "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
    "code": "import math\r\ndef area_polygon(n, length):\r\n    area = 0.5 * n * (length ** 2) * math.tan(math.pi/n)\r\n    return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 163,
    "precondition": "n is a positive integer and length is a positive number."
  },
  "164": {
    "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
    "code": "def divisors_sum(n):\r\n\ttotal = 1\r\n\tfor i in range(2, int(n**0.5) + 1):\r\n\t\tif n % i == 0:\r\n\t\t\tif i * i == n:\r\n\t\t\t\ttotal += i\r\n\t\t\telse:\r\n\t\t\t\ttotal += i + (n // i)\r\n\treturn total\r\n\r\ndef are_equivalent(n1, n2):\r\n\treturn divisors_sum(n1) == divisors_sum(n2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 164,
    "precondition": "n1 and n2 are integers greater than or equal to 1."
  },
  "165": {
    "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
    "code": "def count_char_position(string):\r\n    result = 0\r\n    for i in range(len(string)):\r\n        if string[i].lower() == chr(ord('a') + i).lower():\r\n            result += 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 165,
    "precondition": "string is a string."
  },
  "166": {
    "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
    "code": "def find_even_pair(arr)\r\n    res = 0\r\n    for i in range(len(arr)-1):\r\n        for j in range(i+1, len(arr));\r\n            if (arr[i] ^ arr[j]) % 2 == 0:\r\n                res += 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 166,
    "precondition": "arr is a list of integers."
  },
  "167": {
    "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
    "code": "import math\r\ndef next_power_of_2(n):\r\n    return 2**math.ceil(math.log2(n))\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 167,
    "precondition": "n is a non-negative real number."
  },
  "168": {
    "specification": "Write a function to count the number of occurrences of a number in a given list.",
    "code": "def frequency(input\\_list, num):\r\n    return input\\_list.count(num)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 168,
    "precondition": "input\\_list is a list and num is an element."
  },
  "170": {
    "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
    "code": "def sum_range_list(lst, start, end):\r\n    return sum(lst[start:end+1])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 170,
    "precondition": "lst is a list of numbers, start and end are integers such that start is less than or equal to end and both are within the valid range of the list indices."
  },
  "171": {
    "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
    "code": "import math\ndef perimeter_pentagon(a):\r\n    perimeter = 5 * a\n    return perimeter\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 171,
    "precondition": "a is a positive real number representing the length of a side of the pentagon."
  },
  "172": {
    "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
    "code": "def count_occurance(str1):\r\n    return str1.count('std')\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 172,
    "precondition": "str1 is a string."
  },
  "222": {
    "specification": "Write a function to check if all the elements in tuple have same data type or not.",
    "code": "def check_type(tup):\r\n    t = type(tup[0])\r\n    for i in tup:\r\n        if not isinstance(i, t):\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 222,
    "precondition": "tup is a tuple."
  },
  "223": {
    "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
    "code": "def is_majority(arr, n, key):\r\n    low, high = 0, n-1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == key:\r\n            if mid + 1 < n and arr[mid] != arr[mid + 1] or mid == n - 1:\r\n                if mid > 0 and arr[mid] != arr[mid - 1] or mid == 0:\r\n                    return is_majority_helper(arr, key, mid)\r\n        low, high = mid + 1, high - 1\r\n    return False\r\ndef is_majority_helper(arr, key, mid):\r\n    count = 0\r\n    for i in range(mid + 1, n):\r\n        if arr[i] == key:\r\n            count += 1\r\n            if count > mid:\r\n                return True\r\n        else:\r\n            break\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 2,
    "test_result": 0.5,
    "task_id": 223,
    "precondition": "arr is a sorted array, n is a positive integer, and key is an element."
  },
  "224": {
    "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
    "code": "def count_Set_Bits(n)\r\n    return bin(n).count(\"1\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 224,
    "precondition": "n is an integer."
  },
  "226": {
    "specification": "Write a python function to remove the characters which have odd index values of a given string.",
    "code": "def odd_values_string(s):\r\n    result = ''\r\n    for i in range(len(s));\r\n        if i % 2 == 0:\r\n            result += s[i]\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 226,
    "precondition": "s is a string."
  },
  "227": {
    "specification": "Write a function to find minimum of three numbers.",
    "code": "def min_of_three(a, b, c)\r\n    if (a <= b and a <= c):\r\n        return a\r\n    elif (b <= a and b <= c):\r\n        return b\r\n    else:\r\n        return c\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 227,
    "precondition": "a, b, and c are numbers."
  },
  "228": {
    "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
    "code": "def all_Bits_Set_In_The_Given_Range(n, start, end):\r\n    return ((2 ** start - 1) & (2 ** end - 1)) == (2 ** start - 1)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 228,
    "precondition": "n is an integer, start and end are non-negative integers such that start <= end."
  },
  "229": {
    "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
    "code": "def re_arrange_array(arr, n):\r\n\tneg_arr = [-i for i in arr if i < 0]\r\n\tpos_arr = [i for i in arr if i >= 0]\r\n\tres = neg_arr + pos_arr\r\n\treturn res[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 229,
    "precondition": "arr is an array and n is an integer."
  },
  "230": {
    "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
    "code": "def replace_blank(input_str, char):\r\n    return input_str.replace(\" \", char)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 230,
    "precondition": "input\\_str is a string and char is a character."
  },
  "232": {
    "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
    "code": "def larg_nnum(numbers, n):\r\n    return sorted(numbers)[-n:]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 232,
    "precondition": "numbers is a list and n is an integer."
  },
  "233": {
    "specification": "Write a function to find the lateral surface area of a cylinder.",
    "code": "import math\r\ndef lateralsuface_cylinder(r, h):\r\n    return 2 * math.pi * r * h\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 233,
    "precondition": "r (radius) and h (height) are positive real numbers."
  },
  "234": {
    "specification": "Write a function to find the volume of a cube given its side length.",
    "code": "def volume_cube(side\\_length):\r\n    volume = side\\_length ** 3\r\n    return volume\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 234,
    "precondition": "side\\_length is a positive number."
  },
  "235": {
    "specification": "Write a python function to set all even bits of a given number.",
    "code": "def even_bit_set_number(n):\r\n    return n\r\nassert even_bit_set_number(10) == 10\r\nprint(\"Test case passed.\")\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 235,
    "precondition": "n is an integer."
  },
  "237": {
    "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
    "code": "def check_occurences(tuples:\r\n    result = {}.fromkeys(tuples, 0)\r\n    for t in tuples:\r\n        result[t] += 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 237,
    "precondition": "tuples is a list of tuples."
  },
  "238": {
    "specification": "Write a python function to count the number of non-empty substrings of a given string.",
    "code": "def number_of_substrings(s):\r\n    n = len(s)\r\n    return (n*(n+1))//2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 238,
    "precondition": "s is a string."
  },
  "239": {
    "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
    "code": "def get_total_number_of_sequences(m, n)\r\n    if m < 2:\r\n        return 0\r\n    dp = [[0 for x in range(n)] for x in range(m)] \r\n    dp[2][0] = 1\r\n    for i in range(3, m+1):\r\n        dp[i][0] = 1\r\n    for j in range(1, n)\r\n        for i in range(2, m+1):\r\n            if i >= 2 * dp[i-1][j-1]\r\n                dp[i][j] = dp[i-1][j-1]\r\n            else\r\n                dp[i][j] = dp[i][j-1]\r\n    return sum(dp[m])\\\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 239,
    "precondition": "m and n are positive integers, m is greater than or equal to 2."
  },
  "240": {
    "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "code": "def replace_list(lst1, lst2):\r\n    lst1[-1:] = lst2\r\n    return lst1\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 240,
    "precondition": "lst1 and lst2 are lists."
  },
  "242": {
    "specification": "Write a function to count the total number of characters in a string.",
    "code": "def count_charac(str1):\r\n    return len(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 242,
    "precondition": "str1 is a string."
  },
  "244": {
    "specification": "Write a python function to find the next perfect square greater than a given number.",
    "code": "import math\ndef next_Perfect_Square(n):\r\n    return math.ceil(math.sqrt(n))**2\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 244,
    "precondition": "n is a non-negative integer."
  },
  "245": {
    "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
    "code": "def max_sum(arr):\r\n    n = len(arr)\r\n    dp_i = [[0 for x in range(n)] for x in range(2)]\r\n    dp_i[0][0] = arr[0]\r\n    dp_i[1][n-1] = arr[n-1]\r\n    for i in range(1, n)\r\n        dp_i[0][i] = max(dp_i[0][i-1] + arr[i], arr[i])\r\n        dp_i[1][n-i-1] = max(dp_i[1][n-i] + arr[n-i-1], arr[n-i-1])\r\n    dp_max = [[0 for x in range(n)] for x in range(2)]\r\n    dp_max[0][n-1] = dp_i[0][n-1]\r\n    dp_max[1][0] = dp_i[1][0]\r\n    for i in range(1, n):\r\n        dp_max[0][i] = max(dp_max[0][i-1], dp_i[0][i] + dp_max[1][i-1] )\r\n        dp_max[1][n-i-1] = max(dp_max[1][n-i], dp_i[1][n-i-1] + dp_max[0][n-i])\r\n    return max(max(dp_max[0]), max(dp_max[1]))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 245,
    "precondition": "arr is a list."
  },
  "246": {
    "specification": "Write a function for computing square roots using the babylonian method.",
    "code": "import math\ndef babylonian_squareroot(n, precision=0.00001):\r\n    num = n\r\n    while True:\r\n        guess = (num + n / num) / 2\r\n        if abs(guess * guess - n) < precision:\r\n            return guess\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 246,
    "precondition": "n is a non-negative number, and precision is a positive number."
  },
  "247": {
    "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
    "code": "def lps(string):\r\n\tn = len(string)\r\n\tl = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n\r\n\t\t): \r\n\t\tl[i][i] = 1 \r\n\tfor cl in range(2, n + 1):\r\n\t\tfor i in range(n - cl + 1):\r\n\t\t\tj = i + cl - 1 \r\n\t\t\tif cl == 2:\r\n\t\t\t\tif string[i] == string[j]:\r\n\t\t\t\t\tl[i][j] = 2 \r\n\t\t\t\telse:\r\n\t\t\t\t\tl[i][j] = 0 \r\n\t\t\telse:\r\n\t\t\t\tif string[i] == string[j]:\r\n\t\t\t\t\tl[i][j] = l[i + 1][j - 1] + 2 \r\n\t\t\t\telse:\r\n\t\t\t\t\tl[i][j] = max(l[i][j-1], l[i+1][j]) \r\n\treturn l[0][n-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 247,
    "precondition": "string is a non-empty string."
  },
  "248": {
    "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
    "code": "import math\ndef harmonic_sum(n):\r\n    sum = 0\r\n    for i in range(2, n+1):\r\n        sum += 1/float(i)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 248,
    "precondition": "n is a positive integer."
  },
  "249": {
    "specification": "Write a function to find the intersection of two arrays.",
    "code": "def intersection_array(arr1, arr2):\r\n    return list(set(arr1) & set(arr2))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 249,
    "precondition": "arr1 and arr2 are lists (arrays) of comparable elements."
  },
  "250": {
    "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
    "code": "def count_X(tup, x):\r\n    return tup.count(x)\r\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 250,
    "precondition": "tup is a tuple."
  },
  "251": {
    "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
    "code": "def insert_element(lst, element):\r\n    result = [element]*\r\n    for i in lst:\r\n        result.append(element):\r\n        result.append(i)\r\n    return result[:-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 251,
    "precondition": "lst is a list and element is any valid Python data type."
  },
  "252": {
    "specification": "Write a python function to convert complex numbers to polar coordinates.",
    "code": "import math\ndef convert(c\u00a0: complex) -> (float, float):\n    r = abs(c)\n    theta = math.atan2(c.imag, c.real)\n    return (r, theta)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 252,
    "precondition": "c is a complex number."
  },
  "253": {
    "specification": "Write a python function that returns the number of integer elements in a given list.",
    "code": "def count_integer(lst):\r\n  count = 0\r\n  for i in lst:\r\n    if type(i) is int:\r\n      count += 1\r\n  return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 253,
    "precondition": "lst is a list."
  },
  "255": {
    "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
    "code": "def combinations_colors(lst, n):\r\n\treturn [tuple(x) for x in list(itertools.product(lst, repeat=n))]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 255,
    "precondition": "lst is a list and n is an integer."
  },
  "256": {
    "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
    "code": "def count_Primes_nums(num):\r\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(math.sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n    count = 0\r\n    for i in range(num):\r\n        if is_prime(i):\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 256,
    "precondition": "num is a non-negative integer."
  },
  "257": {
    "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
    "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 257,
    "precondition": "num1 and num2 are numbers."
  },
  "259": {
    "specification": "Write a function to maximize the given two tuples.",
    "code": "def maximize_elements(tup1, tup2):\r\n  res = tuple(map(max, tup1, tup2))\r\n  return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 259,
    "precondition": "tup1 and tup2 are tuples of the same length."
  },
  "260": {
    "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "code": "import math\r\ndef newman_prime(n):\r\n    count = 0\r\n    num = 1\r\n    while count < n:\r\n        num += 2\r\n        if is_prime(num) == True:\r\n            if is_prime(num - 1) == False:\r\n                count += 1\r\n    return num - 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 260,
    "precondition": "n is a positive integer."
  },
  "261": {
    "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
    "code": "def division_elements(tup1, tup2):\r\n    return tuple(i/j for i, j in zip(tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 261,
    "precondition": "tup1 and tup2 are tuples of the same length, and all elements of tup2 are non-zero."
  },
  "262": {
    "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
    "code": "def split_two_parts(lst, l):\n    return (lst[:l], lst[l:])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 262,
    "precondition": "lst is a list and l is an integer such that 0 <= l <= len(lst)"
  },
  "264": {
    "specification": "Write a function to calculate a dog's age in dog's years.",
    "code": "def dog_age(human_age):\r\n  if human_age <= 2:\r\n    return 10.5 * human_age\r\n  else:\r\n    return 2*10.5 + (human_age-2)*4\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 264,
    "precondition": "human\\_age is a non-negative integer."
  },
  "265": {
    "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
    "code": "def list_split(lst, n):\r\n    return [lst[i:n + i] for i in range(0, len(lst), n)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 265,
    "precondition": "lst is a list and n is an integer."
  },
  "266": {
    "specification": "Write a function to find the lateral surface area of a cube given its side length.",
    "code": "import math\ndef lateralsurface_cube(s):\n\treturn 4*s*s\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 266,
    "precondition": "s is a positive real number."
  },
  "267": {
    "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
    "code": "def square_Sum(n):\r\n    res = 0\r\n    for i in range(1, n*2, 2):\r\n        res += i**2\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 267,
    "precondition": "n is a positive integer."
  },
  "268": {
    "specification": "Write a function to find the n'th star number.",
    "code": "def find_star_num(n):\r\n\tstar_num = 1\r\n\tcount = 0\r\n\tnum = 1\r\n\twhile count < n:\r\n\t\tstar_num += 1\r\n\t\tnum += 1\r\n\t\tcount += num\r\n\treturn star_num\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 268,
    "precondition": "n is a positive integer."
  },
  "269": {
    "specification": "Write a function to find the ascii value of a character.",
    "code": "def ascii_value(char):\r\n    return ord(char)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 269,
    "precondition": "char is a single character."
  },
  "270": {
    "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
    "code": "def sum_even_and_even_index(lst):\r\n    return sum([x for x in lst[::2] if x % 2 == 0))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 270,
    "precondition": "lst is a list of numbers."
  },
  "271": {
    "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
    "code": "def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n*2, 2):\r\n        sum += i**5\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 271,
    "precondition": "n is a positive integer."
  },
  "272": {
    "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
    "code": "def rear_extract(ltuple\r\n{\r\n    return [val[2] for val in ltuple]\r\n\r\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 272,
    "precondition": "ltuple is a list of tuples and each tuple has at least 3 elements."
  },
  "273": {
    "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
    "code": "def substract_elements(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 273,
    "precondition": "tup1 and tup2 have the same length."
  },
  "274": {
    "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
    "code": "def even_binomial_Coeff(n):\r\n    result = 0\r\n    for i in range(n:\r\n        result += ( (n*(n-1)) // (i*(i-1))) if i % 2 == 0 else 0\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 274,
    "precondition": "n is a positive integer."
  },
  "276": {
    "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
    "code": "import math\r\ndef volume_cylinder(r, h):\r\n    return math.pi * (r ** 2) * h\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 276,
    "precondition": "r and h are both positive real numbers."
  },
  "277": {
    "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
    "code": "def dict_filter(dic, n):\r\n    return {k: v for k, v in dic.items() if v >= n}\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 277,
    "precondition": "dic is a dictionary and n is an integer."
  },
  "278": {
    "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
    "code": "def count_first_elements(tup)\r\n\tcount = 0\r\n\tfor i in tup:\r\n\t\tif type(i) == int:\r\n\t\t\tcount += 1\r\n\t\telse:\r\n\t\t\tbreak\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 278,
    "precondition": "tup is a tuple."
  },
  "279": {
    "specification": "Write a function to find the nth decagonal number.",
    "code": "def is_num_decagonal(n):\r\n    return int(n*(n-1) + 1)/2\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 279,
    "precondition": "n is an integer."
  },
  "280": {
    "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
    "code": "def sequential_search(arr, element):\r\n    for i in range(len(arr));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 280,
    "precondition": "arr is an array and element is an object."
  },
  "281": {
    "specification": "Write a python function to check if the elements of a given list are unique or not.",
    "code": "def all_unique(lst)\r\n\treturn len(set(lst)) == len(lst)\r\nassert all_unique([1,2,3]) == True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 281,
    "precondition": "lst is a list."
  },
  "282": {
    "specification": "Write a function to subtract two lists element-wise.",
    "code": "def sub_list(list1, list2):\r\n    result = []\r\n    for i in range(len(list1):\r\n        result.append(list1[i] - list2[i])\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 282,
    "precondition": "list1 and list2 are lists of the same length."
  },
  "283": {
    "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
    "code": "def validate(n):\r\n    if n < 0:\r\n        return False\r\n    else:\r\n        dig = [0]*10\r\n        while n != 0:\r\n            dig[n % 10] += 1\r\n            n = n // 10\r\n        for i in range(10):\r\n            if dig[i] > i:\r\n                return False\r\n        return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 283,
    "precondition": "n is an integer."
  },
  "284": {
    "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "code": "def check_element(lst, element):\r\n    return all(i == element for i in lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 284,
    "precondition": "lst is a list and element is any object."
  },
  "285": {
    "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
    "code": "def text_match_two_three(string:\r\n    result = re.search(\"ab{2,3}\", string)\r\n    if result:\r\n        return True\r\n    else:\r\n        return False\r\n       \nassert text_match_two_three(\"ac\")==(False)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 285,
    "precondition": "string is a string."
  },
  "286": {
    "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
    "code": "Specification:\nFind the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\nThe max\\_sub\\_array\\_sum\\_repeated function takes three parameters:\n\n* arr: a list of integers, the original array\n* k: an integer, the number of times the array is repeated\n* n: an integer, the size of the array\n\nThe function returns a single integer, the largest sum of a contiguous array in the modified array.\n\nTest case:\nassert max\\_sub\\_array\\_sum\\_repeated([10, 20, -30, -1], 4, 3) == 30\n\nExplanation:\n\nThe original array is [10, 20, -30, -1].\nAfter repeating the array 4 times, the modified array is:\n[10, 20, -30, -1, 10, 20, -30, -1, 10, 20, -30, -1, 10, 20, -30, -1]\n\nThe largest sum of a contiguous array in the modified array is 30.\n\nPython program:\n\ndef max\\_sub\\_array\\_sum\\_repeated(arr, k, n):\ncost = arr \\* k\nsum\\_array = [0 for x in range(n)]\nsum\\_array[0] = cost[0]\nmax\\_sum = sum\\_array[0]\nfor i in range(1, n):\nsum\\_array[i] = sum\\_array[i-1] + cost[i]\nif sum\\_array[i] > max\\_sum:\nmax\\_sum = sum\\_array[i]\nfor i in range(1, n):\nfor j in range(i+1, n):\nsub\\_array = sum\\_array[j] - sum\\_array[i-1]\nif sub\\_array > max\\_sum:\nmax\\_sum = sub\\_array\nreturn max\\_sum\n\nAssert test:\n\nassert max\\_sub\\_array\\_sum\\_repeated([10, 20, -30, -1], 4, 3) == 30\n\nOutput:\n\nThe test assertion passes.",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 286,
    "precondition": "arr is a list of integers, k is an integer, and n is an integer."
  },
  "287": {
    "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
    "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(2, n*2 + 1, 2):\r\n        sum += i*i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 287,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "290": {
    "specification": "Write a function to find the list of maximum length in a list of lists.",
    "code": "def max_length(lst):\r\n\treturn max(lst, key=len), len(max(lst, key=len))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 290,
    "precondition": "lst is a list of lists."
  },
  "291": {
    "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "code": "def count_no_of_ways(n, k):\r\n    dp = [[0 for x in range(k+1)] for x in range(n+1)] \r\n    dp[0][0] = 1 \r\n    dp[1][0] = 0 \r\n    dp[1][1] = 1 \r\n    dp[1][i] = 0 for i in range(2, k+1)\r\n    for i in range(2, n+1):\r\n        dp[i][1] = dp[i-1][0]\r\n        for j in range(2, min(i, k)+1):\r\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\r\n    return dp[n][k]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 291,
    "precondition": "n and k are integers, n >= 1, k >= 1."
  },
  "292": {
    "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
    "code": "def find(num1, num2\r\r\n  return num1 // num2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 292,
    "precondition": "num1 and num2 are integers and num2 is not equal to 0."
  },
  "293": {
    "specification": "Write a function to find the third side of a right angled triangle.",
    "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    return math.sqrt(a^2 + b^2)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 293,
    "precondition": "a and b are positive real numbers."
  },
  "294": {
    "specification": "Write a function to find the maximum value in a given heterogeneous list.",
    "code": "def max_val(lst):\r\n    return max(lst)\r\n   \nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 294,
    "precondition": "lst is a list that can contain different data types."
  },
  "295": {
    "specification": "Write a function to return the sum of all divisors of a number.",
    "code": "def sum_div(n):\r\n    divs = [1]\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            divs.append(i)\r\n            divs.append(int(n/i))\r\n    divs = list(set(divs))\r\n    return sum(divs)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 295,
    "precondition": "n is a positive integer."
  },
  "296": {
    "specification": "Write a python function to count inversions in an array.",
    "code": "def get_Inv_Count(arr):\r\n\tn = len(arr)\r\n\tans = 0\r\n\tfor i in range(n)\r\n\t\tfor j in range(i+1, n)\r\n\t\t\tif (arr[i] > arr[j]):\r\n\t\t\t\tans += 1\r\n\treturn ans\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 296,
    "precondition": "arr is a list of integers."
  },
  "297": {
    "specification": "Write a function to flatten a given nested list structure.",
    "code": "def flatten_list(nested\\_list):\n    return [item for sublist in nested_list for item in (flatten_list(sublist) if isinstance(sublist, list) else [sublist])]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 297,
    "precondition": "nested\\_list is a list."
  },
  "299": {
    "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "code": "def max_aggregate(lst):\r\n\tres = max(lst, key=lambda x: x[1][<br\\>\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 299,
    "precondition": "lst is a list of tuples."
  },
  "300": {
    "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "code": "import math\nmemo = {}\ndef catalan(n:\r\n\r\n\r\n):\r\n\tif n == 1:\r\n\t\treturn 1.\r\n\tif n in memo:\r\n\t\treturn memo[n]\r\n\tres = 0.\r\n\tfor i in range(1, n\r\n\r\n):\r\n\tres += catalan(i) * catalan(n - i)\r\n\tmemo[n] = res\r\n\treturn res\r\n\r\ndef count_binary_seq(n):\r\n\treturn catalan(2 * n)\r\n\r\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(2), 5.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(3), 14.0, rel_tol=0.001)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 300,
    "precondition": "n is a positive integer."
  },
  "301": {
    "specification": "Write a function to find the depth of a dictionary.",
    "code": "def dict_depth(dic, depth=1): \r\n    for key, value in dic.items(): \r\n        if type(value) is dict: \r\n            depth = max(depth, dict_depth(value, depth)) \r\n    return depth\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 301,
    "precondition": "dic is a dictionary."
  },
  "304": {
    "specification": "Write a python function to find element at a given index after number of rotations.",
    "code": "def circular_index(arr, indices, n, r)\r\n  result = arr\r\n  for i in range(r):\r\n    arr = [arr[-1]] + arr[:-1]\r\n  for i in indices:\r\n    result = result[i]\r\n  return result[n]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 304,
    "precondition": "arr is a list of elements, indices is a list of integers, n and r are integers."
  },
  "305": {
    "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
    "code": "def start_withp(words\\_list):\r\n    words = []\r\n    for word in words\\_list:\r\n        if word[0] == 'p' or word[0] == 'P':\r\n            words.append(word)\r\n    return tuple(words)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 305,
    "precondition": "words\\_list is a list of strings."
  },
  "306": {
    "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
    "code": "from typing import List, Tuple\n\ndef max_sum_increasing_subseq(arr: List[int], n: int, i: int, k: int) -> int:\r\n    if i == 0:\r\n        return arr[0]\r\n    if i > k:\r\n        return 0\r\n    if i == k:\r\n        return arr[k]\r\n    dp = [[0 for j in range(k+1)] for j in range(n+1)]\r\n    for j in range(1, i+1):\r\n        dp[j][j] = arr[j-1]\r\n    for j in range(i+1, k+1):\r\n        dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + arr[j-1] )\r\n    for j in range(i+1, k+1):\r\n        dp[i+1][j] = max(dp[i][j], dp[i+1][j-1] + arr[j-1])\r\n    return dp[i+1][k]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 306,
    "precondition": "arr is a list of integers, n, i, and k are integers. i <= k <= n."
  },
  "307": {
    "specification": "Write a function to get a colon of a tuple.",
    "code": "def colon_tuplex(tuplex, index, value):\n    tuplex = list(tuplex)\n    tuplex[index] = value\n    return tuple(tuplex)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 307,
    "precondition": "tuplex is a tuple, index is an integer, value is any object."
  },
  "308": {
    "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
    "code": "def large_product(list1, list2, n):\r\n    list1.sort()\r\n    list2.sort()\r\n    res = []\r\n    i = len(list1) - 1\r\n    j = len(list2) - 1\r\n    while n > 0:\r\n        res.append(list1[i] * list2[j])\r\n        i -= 1\r\n        j -= 1\r\n        n -= 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 308,
    "precondition": "list1 and list2 are lists, n is an integer."
  },
  "309": {
    "specification": "Write a python function to find the maximum of two numbers.",
    "code": "def maximum(num1, num2):\r\n    if num1 > num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 309,
    "precondition": "num1 and num2 are numbers."
  },
  "310": {
    "specification": "Write a function to convert a given string to a tuple of characters.",
    "code": "def string_to_tuple(str1):\r\n    return tuple(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 310,
    "precondition": "str1 is a string."
  },
  "311": {
    "specification": "Write a python function to set the left most unset bit.",
    "code": "def set_left_most_unset_bit(n):\r\n  return (n | (n & -n))\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 311,
    "precondition": "n is an integer."
  },
  "312": {
    "specification": "Write a function to find the volume of a cone.",
    "code": "import math\ndef volume_cone(r, h):\n  return (1/3) * math.pi * (r**2) * h\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 312,
    "precondition": "r and h are both positive real numbers."
  },
  "388": {
    "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "code": "import math\r\ndef highest_Power_of_2(n):\r\n    return 2 ** math.floor(math.log2(n))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 388,
    "precondition": "n is a positive integer."
  },
  "389": {
    "specification": "Write a function to find the n'th lucas number.",
    "code": "def find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 389,
    "precondition": "n is an integer."
  },
  "390": {
    "specification": "Write a function to apply a given format string to all of the elements in a list.",
    "code": "def add_string(lst,fmt\\_str):\r\n    return [fmt_str.format(i) for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 390,
    "precondition": "lst is a list and fmt\\_str is a format string."
  },
  "391": {
    "specification": "Write a function to convert more than one list to nested dictionary.",
    "code": "def convert_list_dictionary(keys, values1, values2): \r\n    result = [dict(zip(values1, values2)) for value in zip(keys)]\r\n    final\\_result = [dict(zip(keys, result))]\r\n    return final_result\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 391,
    "precondition": "keys, values1, values2 are all lists with the same length."
  },
  "392": {
    "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "code": "memo = {}\ndef get_max_sum(n):\r\n    if n in memo:\r\n        return memo[n]\r\n    elif n <= 1:\r\n        return n\r\n    else:\r\n        res = 0\r\n        res = max(res, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\r\n        memo[n] = res\r\n        return res\r\nprint(get_max_sum(60))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 392,
    "precondition": "n is a non-negative integer."
  },
  "393": {
    "specification": "Write a function to find the list with maximum length.",
    "code": "def max_length_list(lst):\r\n\tmax_index = 0\r\n\tfor i in range(len(lst))\r\n\t\tif len(lst[i]) > len(lst[max_index]):\r\n\t\t\tmax_index = i\r\n\treturn (max_index, lst[max_index])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 393,
    "precondition": "lst is a list of lists."
  },
  "394": {
    "specification": "Write a function to check if given tuple contains no duplicates.",
    "code": "def check_distinct(tup):\r\n    res = len(tup) == len(set(tup))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 394,
    "precondition": "tup is a tuple."
  },
  "395": {
    "specification": "Write a python function to find the first non-repeated character in a given string.",
    "code": "def first_non_repeating_character(str1):\r\n    for i in str1:\r\n        if str1.count(i) == 1:\r\n            return i\r\n    return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 395,
    "precondition": "str1 is a string."
  },
  "396": {
    "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
    "code": "def check_char(string):\r\n    if len(string) > 0:\r\n        if string[0] == string[-1]:\r\n            return \"Valid\"\r\n        else:\r\n            return \"Invalid\"\r\n    else:\r\n        return \"Invalid\"\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 396,
    "precondition": "string is a non-empty string."
  },
  "397": {
    "specification": "Write a function to find the median of three numbers.",
    "code": "def median_numbers(*args)\r\n\targs = sorted(args)\r\n\tl = len(args)\r\n\tif l == 1:\r\n\t\tmedian = args[0]\r\n\telif l == 2:\r\n\t\tmedian = (args[0] + args[1])/2\r\n\telse:\r\n\t\tmedian = args[l//2]\r\n\treturn median\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 397,
    "precondition": "args is a variable number of numbers, and len(args) >= 1."
  },
  "398": {
    "specification": "Write a function to compute the sum of digits of each number of a given list.",
    "code": "def sum_of_digits(num\\_list):\r\n    res = []\r\n    for i in num\\_list:\r\n        sum = 0\r\n        while i > 0:\r\n            sum += i % 10\r\n            i //= 10\r\n        res.append(sum)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 398,
    "precondition": "num\\_list is a list of integers."
  },
  "399": {
    "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "code": "def bitwise_xor(tup1, tup2):\r\n    res = ()\r\n    for i, j in zip(tup1, tup2):\r\n        res += (i ^ j,)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 399,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "400": {
    "specification": "Write a function to extract the number of unique tuples in the given list.",
    "code": "def extract_freq(ip\\_list):\r\n    return len(set(map(tuple, set(map(tuple, ip_list))))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 400,
    "precondition": "ip\\_list is a list."
  },
  "401": {
    "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "code": "def add_nested_tuples(tuple1, tuple2):\r\n    assert len(tuple1) == len(tuple2)\r\n    result = []*\r\n    for i in range(len(tuple1));\r\n        sub_result = tuple(map(sum, zip(tuple1[i], tuple2[i])))*\r\n        result.append(sub_result)\r\n   *\r\n    return tuple(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 401,
    "precondition": "tuple1 and tuple2 are nested tuples with the same length."
  },
  "404": {
    "specification": "Write a python function to find the minimum of two numbers.",
    "code": "def minimum(a, b):\r\n    if a < b:\r\n        return a\r\n    else:\r\n        return b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 404,
    "precondition": "a and b are real numbers."
  },
  "405": {
    "specification": "Write a function to check whether an element exists within a tuple.",
    "code": "def check_tuplex(tup, element):\r\n    if element in tup:\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 405,
    "precondition": "tup is a tuple and element is any object."
  },
  "406": {
    "specification": "Write a python function to find whether the parity of a given number is odd.",
    "code": "def find_Parity(n):\r\n    return n % 2 != 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 406,
    "precondition": "n is an integer."
  },
  "407": {
    "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "code": "def rearrange_bigger(n):\r\n\ts = str(n)\r\n\ts = ''.join(sorted(s, reverse = True))\r\n\tif s[0] == '0'\r\n\t\treturn -1\r\n\tfor i in range(1, len(s));\r\n\t\tif s[:i] + s[i+1:] > s[i] + s[:i] + s[i+1:]\r\n\t\t\treturn int(s[:i] + s[i+1:] + s[i] + s[i:i] )\r\n\treturn -1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 407,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "408": {
    "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
    "code": "def k_smallest_pairs(arr1, arr2, k):\r\n    result = []\r\n    import heapq\r\n    h = [(a,b) for a in arr1 for b in arr2]\r\n    heapq.heapify(h\r\r\n    for i in range(k\",\r\n        result.append(heapq.heappop(h))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 408,
    "precondition": "arr1 and arr2 are lists, k is an integer."
  },
  "409": {
    "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "code": "def min_product_tuple(pairs):\r\n  res = float('inf')\r\n  for pair in pairs:\r\n    res = min(res, pair[0] * pair[1])\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 409,
    "precondition": "pairs is a list of tuples, each containing two numbers."
  },
  "410": {
    "specification": "Write a function to find the minimum value in a given heterogeneous list.",
    "code": "def min_val(lst):\r\n    min_value = lst[0]\r\n    for i in lst:\r\n        if type(i) == int:\r\n            if i < min_value:\r\n                min_value = i\r\n        elif type(i) == str:\r\n            if min_value > i:\r\n                min_value = i\r\n    return min_value\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 410,
    "precondition": "lst is a list containing at least one element."
  },
  "411": {
    "specification": "Write a function to convert the given snake case string to camel case string.",
    "code": "def snake_to_camel(string)\r\n    words = string.split('_')\r\n    for i in range(1,len(words))\r\n        words[i] = words[i].title()\r\n    return ''.join(words)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 411,
    "precondition": "string is a non-empty string that contains only alphanumeric characters and underscores."
  },
  "412": {
    "specification": "Write a python function to remove odd numbers from a given list.",
    "code": "def remove_odd(input\\_list):\r\n    return [i for i in input\\_list if i % 2 == 0]\r\nassert remove\\_odd([1,2,3]) == [2]\r\nprint(remove\\_odd([1,2,3]))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 412,
    "precondition": "input\\_list is a list."
  },
  "413": {
    "specification": "Write a function to extract the nth element from a given list of tuples.",
    "code": "def extract_nth_element(list_of_tuples, n)\r\n\treturn [x[n] for x in list_of_tuples]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 413,
    "precondition": "list\\_of\\_tuples is a list of tuples, n is an integer."
  },
  "414": {
    "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
    "code": "def overlapping(sequence1, sequence2):\r\n    result = False\r\n    for i in sequence1:\r\n        if i in sequence2:\r\n            result = True\r\n            break\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 414,
    "precondition": "sequence1 and sequence2 are iterables (e.g. lists, tuples, sets)."
  },
  "415": {
    "specification": "Write a python function to find a pair with highest product from a given array of integers.",
    "code": "def max_Product(arr)\r\n    result = (arr[0], arr[0])\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr)):\r\n            if arr[i] * arr[j] > result[0] * result[1]:\r\n                result = (arr[i], arr[j])\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 415,
    "precondition": "arr is a list of integers."
  },
  "417": {
    "specification": "Write a function to find common first element in given list of tuple.",
    "code": "def group_tuples(lst):\r\n    res = []\r\n    for i in lst:\r\n        if res and res[-1][0] == i[0]:\r\n            res[-1] = res[-1] + i[1:]\r\n        else:\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 417,
    "precondition": "lst is a list of tuples, where each tuple contains at least one element."
  },
  "418": {
    "specification": "Write a python function to find the element of a list having maximum length.",
    "code": "def Find_Max(list1):\r\n    max_length = max(len(sub) for sub in list1)\r\n    result = [sub for sub in list1 if len(sub) == max_length]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 418,
    "precondition": "list1 is a list containing sub-lists."
  },
  "419": {
    "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "code": "def round_and_sum(num\\_list):\r\n\trounded\\_list = [round(i) for i in num_list]\r\n\tsum\\_val = sum(rounded\\_list)\\\n\treturn sum\\_val \\* len(rounded\\_list)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 419,
    "precondition": "num\\_list is a list of numbers."
  },
  "420": {
    "specification": "Write a python function to find the cube sum of first n even natural numbers.",
    "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        if i % 2 == 0:\r\n            sum += i**3\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 420,
    "precondition": "n is a positive integer."
  },
  "421": {
    "specification": "Write a function to concatenate each element of tuple by the delimiter.",
    "code": "def concatenate_tuple(tup, delimiter='-'): \r\n    res = delimiter.join(map(str, tup))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 421,
    "precondition": "tup is a tuple and delimiter is a string."
  },
  "422": {
    "specification": "Write a python function to find the average of cubes of first n natural numbers.",
    "code": "def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += i**3 \r\n    avg = sum/n \r\n    return avg\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 422,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "424": {
    "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
    "code": "def extract_rear(tup):\r\n    res = tuple(i[-1:] for i in tup)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 424,
    "precondition": "tup is a tuple."
  },
  "425": {
    "specification": "Write a function to count the number of sublists containing a particular element.",
    "code": "def count_element_in_list(lst, num):\r\n    count = 0\r\n    for sublist in lst:\r\n        if num in sublist:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 425,
    "precondition": "lst is a list of lists and num is an integer."
  },
  "426": {
    "specification": "Write a function to filter odd numbers.",
    "code": "def filter_oddnumbers(numbers\r\n ):\r\n    result = [x for x in numbers if x % 2 != 0]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 426,
    "precondition": "numbers is a list or iterable of integers."
  },
  "427": {
    "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "code": "def change_date_format(date\\_string):\r\n    date\\_list = date\\_string.split(\"-\")\r\n    return date\\_list[2] + \"-\" + date\\_list[1] + \"-\" + date\\_list[0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 427,
    "precondition": "date\\_string is a string in yyyy-mm-dd format."
  },
  "428": {
    "specification": "Write a function to sort the given array by using shell sort.",
    "code": "def shell_sort(arr):\r\n\tn = len(arr)\r\n\tgap = n // 2\r\n\twhile gap > 0:\r\n\t\tfor i in range(gap, n):\r\n\t\t\tj = i - gap\r\n\t\t\twhile j >= 0:\r\n\t\t\t\tif arr[j] > arr[j + gap\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b]:\r\n\t\t\t\t\tarr[j], arr[j + gap] = arr[j + gap], arr[j]\r\n\t\t\t\tj -= gap\r\n\t\tgap = gap // 2\r\n\treturn arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 428,
    "precondition": "arr is a list of comparable elements."
  },
  "429": {
    "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "code": "def and_tuples(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1):\r\n        if tup1[i] % 2 == 0 and tup2[i] % 2 == 0:\r\n            res.append(1)\r\n        else:\r\n            res.append(0)\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 429,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "430": {
    "specification": "Write a function to find the directrix of a parabola.",
    "code": "def parabola_directrix(x,y,p):\n    return y - p\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 430,
    "precondition": "x, y, and p are real numbers, with p being a positive real number."
  },
  "431": {
    "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
    "code": "def common_element(list1, list2):\r\n    result = False\r\n    for i in list1:\r\n        if i in list2:\r\n            result = True\r\n            break\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 431,
    "precondition": "list1 and list2 are lists of comparable elements."
  },
  "432": {
    "specification": "Write a function to find the median length of a trapezium.",
    "code": "def median_trapezium(a,b,c):\r\n    return (a + b) / 2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 432,
    "precondition": "a, b, and c are positive real numbers representing the lengths of the trapezium's parallel sides."
  },
  "433": {
    "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "code": "def check_greater(arr, num)\r\n    for i in arr:\r\n        if i > num:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 433,
    "precondition": "arr is a list of integers and num is an integer."
  },
  "434": {
    "specification": "Write a function that matches a string that has an a followed by one or more b's.",
    "code": "import re\ndef text_match_one(txt)\r\n    pattern = re.compile(r'ab+')\r\n    if pattern.match(txt):\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 434,
    "precondition": "txt is a string."
  },
  "435": {
    "specification": "Write a python function to find the last digit of a given number.",
    "code": "def last_Digit(n):\r\n    return abs(n) % 10\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 435,
    "precondition": "n is an integer."
  },
  "436": {
    "specification": "Write a python function to return the negative numbers in a list.",
    "code": "def neg_nos(numbers):\r\n\treturn [i for i in numbers if i < 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 436,
    "precondition": "numbers is a list of integers."
  },
  "437": {
    "specification": "Write a function to remove odd characters in a string.",
    "code": "def remove_odd(str1):\r\n    return ''.join(filter(lambda x: int(x)%2 == 0, str1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 437,
    "precondition": "str1 is a string."
  },
  "438": {
    "specification": "Write a function to count bidirectional tuple pairs.",
    "code": "def count_bidirectional(tpl\\_list):\r\n\tcounter = 0\r\n\tfor i in range(len(tpl\\_list)):\r\n\t\tif tpl\\_list.count(tpl\\_list[i]) == 2:\r\n\t\t\tif (tpl\\_list[i][1], tpl\\_list[i][0]) in tpl\\_list:\r\n\t\t\t\tcounter += 1\r\n\treturn counter\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 438,
    "precondition": "tpl\\_list is a list of tuples."
  },
  "439": {
    "specification": "Write a function to join a list of multiple integers into a single integer.",
    "code": "def multiple_to_single(numbers):\r\n    res = \"\"\r\n    for num in numbers:\r\n        res += str(num)\r\n    return int(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 439,
    "precondition": "numbers is a list of integers."
  },
  "440": {
    "specification": "Write a function to find the first adverb and their positions in a given sentence.",
    "code": "import re\r\ndef find_adverb_position(sentence):\r\n    adverbs = re.findall(r'[Bb]y?|[Ll]e[sst]?t|[Mm]o[rre]?|[Nn]o|[Tt]o[o]{0,2}|[Ww]he[nns]?|[Yy]ou[rre]?', sentence)\r\n    pos = []\r\n    for i in range(len(adverbs));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 440,
    "precondition": "sentence is a string."
  },
  "441": {
    "specification": "Write a function to find the surface area of a cube of a given size.",
    "code": "import math\r\ndef surfacearea_cube(n):\r\n    return 6 * (n ** 2)\r\ntest = 5\r\nassert surfacearea_cube(test)==150\r\nprint(\"Test Successful\")\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 441,
    "precondition": "n is an integer."
  },
  "442": {
    "specification": "Write a function to find the ration of positive numbers in an array of integers.",
    "code": "def positive_count(numbers\r\r\n ):\r\n    pos\\_count = 0\r\n    for num in numbers:\r\n        if num > 0:\r\n            pos\\_count += 1\r\n    return pos\\_count/len(numbers)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 442,
    "precondition": "numbers is a list of integers."
  },
  "443": {
    "specification": "Write a python function to find the largest negative number from the given list.",
    "code": "def largest_neg(lst):\r\n    return max(filter(lambda x: x<0, lst))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 443,
    "precondition": "lst is a list of numbers."
  },
  "444": {
    "specification": "Write a function to trim each tuple by k in the given tuple list.",
    "code": "def trim_tuple(tuples, k):\r\n\tres = [(x[k-1:],) for x in tuples]\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 444,
    "precondition": "tuples is a list of tuples, and k is an integer."
  },
  "445": {
    "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "code": "def index_multiplication(tup1, tup2):\r\n    result = []\r\n    for i in range(len(tup1ICENSE:\r\n        result.append(tuple(x*y for x, y in zip(tup1[i], tup2[i])))\r\n    return tuple(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 445,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "446": {
    "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
    "code": "def count_Occurrence(tup,lst):\r\n    res = [tup.count(i) for i in lst]\r\n    return sum(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 446,
    "precondition": "tup is a tuple and lst is a list of distinct elements."
  },
  "447": {
    "specification": "Write a function to find cubes of individual elements in a list.",
    "code": "def cube_nums(numbers):\r\n    res = []\r\n    for i in numbers:\r\n        res.append(i**3)\r\n    return res\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 447,
    "precondition": "numbers is a list of integers."
  },
  "448": {
    "specification": "Write a function to calculate the sum of perrin numbers.",
    "code": "def cal_perrin(n):\r\n    if n <= 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 3\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        arr = [0, 2, 3]\r\n        for i in range(3, n):\r\n            arr.append(arr[i-2] + arr[i-3])\r\n        return sum(arr)\r\n \r\nassert cal_perrin(9) == 49\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 448,
    "precondition": "n is an integer."
  },
  "450": {
    "specification": "Write a function to extract specified size of strings from a given list of string values.",
    "code": "def extract_string(str_list, n)\r\n    res = [i for i in str_list if len(i) == n]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 450,
    "precondition": "str\\_list is a list of strings and n is an integer."
  },
  "451": {
    "specification": "Write a function to remove all whitespaces from the given string.",
    "code": "def remove_whitespaces(s):\r\n\treturn ''.join(s.split())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 451,
    "precondition": "s is a string."
  },
  "452": {
    "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
    "code": "def loss_amount(selling_price,cost_price):\r\n    if selling_price < cost_price:\r\n        return cost_price - selling_price\r\n    return 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 452,
    "precondition": "selling\\_price and cost\\_price are numbers."
  },
  "453": {
    "specification": "Write a python function to find the sum of even factors of a number.",
    "code": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        if n % i == 0 and i % 2 == 0:\r\n            sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 453,
    "precondition": "n is a positive integer."
  },
  "454": {
    "specification": "Write a function that matches a word containing 'z'.",
    "code": "def text_match_wordz(text):\n    result = False\r\n    if 'z' in text and text[-1] == 'z':\n        result = True\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 454,
    "precondition": "text is a string."
  },
  "455": {
    "specification": "Write a function to check whether the given month number contains 31 days or not.",
    "code": "def check_monthnumb_number(month\\_number):\r\n    if month_number in [1, 3, 5, 7, 8, 10, 12)]:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 455,
    "precondition": "month\\_number is an integer."
  },
  "456": {
    "specification": "Write a function to reverse each string in a given list of string values.",
    "code": "def reverse_string_list(list1):\r\n    return [i[::-1] for i in list1]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 456,
    "precondition": "list1 is a list of strings."
  },
  "457": {
    "specification": "Write a python function to find the sublist having minimum length.",
    "code": "def Find_Min(lst):\r\n\treturn min(lst,key=len)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 457,
    "precondition": "lst is a list of lists."
  },
  "458": {
    "specification": "Write a function to find the area of a rectangle.",
    "code": "def rectangle_area(length, breadth):\r\n\treturn length * breadth\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 458,
    "precondition": "length and breadth are numbers."
  },
  "459": {
    "specification": "Write a function to remove uppercase substrings from a given string.",
    "code": "def remove_uppercase(string):\r\n    return ''.join(e for e in string if not e.isupper())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 459,
    "precondition": "string is a string."
  },
  "460": {
    "specification": "Write a python function to get the first element of each sublist.",
    "code": "def Extract(sublists:\r\n    res = []\r\n    for sublist in sublists:\r\n        res.append(sublist[0])\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 460,
    "precondition": "sublists is a list of lists."
  },
  "461": {
    "specification": "Write a python function to count the upper case characters in a given string.",
    "code": "def upper_ctr(str1):\r\n    return sum(1 for c in str1 if c.isupper())\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 461,
    "precondition": "str1 is a string."
  },
  "462": {
    "specification": "Write a function to find all possible combinations of the elements of a given list.",
    "code": "def combinations_list(input\\_list):\n    result = []\n    for i in range(len(input_list)+1):\n        for j in itertools.combinations(input_list, i):\n            result.append(list(j))\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 462,
    "precondition": "input\\_list is a list."
  },
  "463": {
    "specification": "Write a function to find the maximum product subarray of the given array.",
    "code": "def max_subarray_product(arr):\r\n    if len(arr) == 0:\r\n        return 0\r\n    max_val = max_neg = min_neg = max_global = res = arr[0]\r\n    for i in range(1, len(arr):\r\n        max_val = max(arr[i], max_neg * arr[i], min_neg * arr[i] )\r\n        min_neg = min(arr[i], max_neg * arr[i], min_neg * arr[i])\r\n        if max_val > max_global:\r\n            max_global = max_val\r\n            res = arr[i - len(arr) + 1 : i + 1]\r\n    return (max_global, res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 463,
    "precondition": "arr is a list or array of numbers."
  },
  "464": {
    "specification": "Write a function to check if all values are same in a dictionary.",
    "code": "def check_value(dic, n):\r\n    return all(value == n for value in dic.values())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 464,
    "precondition": "dic is a dictionary and n is a value."
  },
  "465": {
    "specification": "Write a function to drop empty items from a given dictionary.",
    "code": "def drop_empty(dic):\r\n    return {k: v for k, v in dic.items() if v is not None and v != ''}\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 465,
    "precondition": "dic is a dictionary."
  },
  "468": {
    "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "code": "def max_product(numbers):\r\n    if not numbers:\r\n        return 0\r\n    max\\_product = [[0 for x in range(len(numbers))] for x in range(len(numbers))]\r\n    max\\_product[0][0] = numbers[0]\r\n    for i in range(1, len(numbers)):\r\n        max\\_product[i][i] = numbers[i]\r\n        for j in range(i):\r\n            if numbers[j] < numbers[i]\r\n                if max\\_product[j][i-1] > max\\_product[i][i]:\r\n                    max\\_product[i][i] = max\\_product[j][i-1]\r\n        max\\_product[i][i] = max\\_product[i][i]*numbers[i]\r\n    result = max\\_product[0][len(numbers)-1]\r\n    for i in range(1, len(numbers)-1):\r\n        for j in range(i,\r\n            if max\\_product[i][j]*numbers[len(numbers)-1] > result:\r\n                result = max\\_product[i][j]*numbers[len(numbers)-1]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 468,
    "precondition": "numbers is a list of integers."
  },
  "470": {
    "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
    "code": "def add_pairwise(numbers):\r\n\treturn tuple(map(lambda x, y: x + y, numbers[:-1], numbers[1:]))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 470,
    "precondition": "numbers is a tuple of at least two integers."
  },
  "471": {
    "specification": "Write a python function to find the product of the array multiplication modulo n.",
    "code": "def find_remainder(arr,n):\r\n    prod = 1\r\n    for i in arr:\r\n        prod = (prod * i) % n\r\n    return prod\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 471,
    "precondition": "arr is a list of integers and n is a positive integer."
  },
  "472": {
    "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "code": "def check_Consecutive(lst):\r\n\treturn all(x == y-1 for x, y in zip(lst, lst[1:]))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 472,
    "precondition": "lst is a list."
  },
  "473": {
    "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "code": "def tuple_intersection(lst1, lst2):\r\n\treturn frozenset(frozenset(t) for t in lst1 if any(frozenset(t) == frozenset(s) for s in lst2))\r\n\t\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 473,
    "precondition": "lst1 and lst2 are lists of tuples."
  },
  "474": {
    "specification": "Write a function to replace characters in a string.",
    "code": "def replace_char(s,c1,c2):\r\n    return s.replace(c1,c2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 474,
    "precondition": "s is a string, c1 and c2 are characters."
  },
  "475": {
    "specification": "Write a function to sort a dictionary by value.",
    "code": "from collections import Counter\ndef sort_counter(counter)\r\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)\r\n\r\n# Test the function\r\nsorted_counter = sort_counter(Counter({'Math':81, 'Physics':83, 'Chemistry':87}))\r\nassert sorted_counter == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 475,
    "precondition": "counter is a dictionary."
  },
  "476": {
    "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "code": "def big_sum(test_arr):\r\n    return max(test_arr) + min(test_arr)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 476,
    "precondition": "test\\_arr is an array or a list of numbers."
  },
  "477": {
    "specification": "Write a python function to convert the given string to lower case.",
    "code": "def is_lower(s):\r\n    return (s.lower())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 477,
    "precondition": "s is a string."
  },
  "478": {
    "specification": "Write a function to remove lowercase substrings from a given string.",
    "code": "def remove_lowercase(s):\r\n    return ''.join(c for c in s if c.isupper())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 478,
    "precondition": "s is a string."
  },
  "479": {
    "specification": "Write a python function to find the first digit of a given number.",
    "code": "def first_Digit(n):\r\n    while n >= 10:\r\n        n = n // 10\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 479,
    "precondition": "n is an integer."
  },
  "554": {
    "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
    "code": "def Split(numbers:\r\n    return [n for n in numbers if n % 2 != 0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 554,
    "precondition": "numbers is a list of integers."
  },
  "555": {
    "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
    "code": "def sum_of_n_numbers(n):\r\n    return n * (n + 1) / 2\r\n\r\ndef cube_of_n_numbers(n):\r\n    return n * (n + 1) / 2 * (2 * n + 1)\r\n\r\ndef difference(n):\r\n    return abs(sum_of_n_numbers(n) - cube_of_n_numbers(n))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 555,
    "precondition": "n is an integer."
  },
  "556": {
    "specification": "Write a python function to count the number of pairs whose xor value is odd.",
    "code": "def find_Odd_Pair(arr, n)\r\n\tcount = 0\r\n\tfor i in range(n*\r\n\t\tfor j in range(i*\r\n\t\t\tif (arr[i] ^ arr[j]) & 1\r\n\t\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 556,
    "precondition": "arr is a list of integers and n is an integer."
  },
  "557": {
    "specification": "Write a function to toggle the case of all characters in a string.",
    "code": "def toggle_string(s):\r\n    return ''.join(chr(ord(c)^32) if c.isalpha() else c for c in s)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 557,
    "precondition": "s is a string."
  },
  "558": {
    "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
    "code": "def digit_distance_nums(num1, num2):\r\n    return sum([abs(int(digit) for digit in str(num1)] - [abs(int(digit) for digit in str(num2)]))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 558,
    "precondition": "num1 and num2 are integers."
  },
  "559": {
    "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
    "code": "def max_sub_array_sum(arr, n)\r\n    max_till_now = max_ending_here = arr[0]\r\n    for i in range(1, n):\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n        if max_till_now < max_ending_here:\r\n            max_till_now = max_ending_here\r\n    return max_till_now\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 559,
    "precondition": "arr is a list and n is an integer."
  },
  "560": {
    "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
    "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(sorted(set(test_tup1) | set(test_tup2)))\r\n  return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 560,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "562": {
    "specification": "Write a python function to find the length of the longest sublists.",
    "code": "def Find_Max_Length(lst):\r\n    return max([len(i) for i in lst   ])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 562,
    "precondition": "lst is a list of lists."
  },
  "563": {
    "specification": "Write a function to extract values between quotation marks from a string.",
    "code": "import re\r\ndef extract_values(s):\r\n    res = []\r\n    result = re.findall(r'\"([^\"]*)\"', s)\r\n    for i in result:\r\n        res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 563,
    "precondition": "s is a string."
  },
  "564": {
    "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
    "code": "def count_Pairs(arr, n)\r\n\tcount = 0\r\n\tfor i in range(n\r\n\t\tfor j in range(i+1, n):\r\n\t\t\tif (arr[i] != arr[j]):\r\n\t\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 564,
    "precondition": "arr is a list of integers and n is the length of arr."
  },
  "565": {
    "specification": "Write a python function to split a string into characters.",
    "code": "def split(string):\r\n    res = list(string)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 565,
    "precondition": "string is a string."
  },
  "566": {
    "specification": "Write a function to get the sum of the digits of a non-negative integer.",
    "code": "def sum_digits(n):\r\n    if n < 0:\r\n        return -1\r\n    elif n == 0:\r\n        return 0\r\n    else:\r\n        return(n % 10 + sum_digits(int(n / 10)))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 566,
    "precondition": "n is an integer, and can be negative."
  },
  "567": {
    "specification": "Write a function to check whether a specified list is sorted or not.",
    "code": "def issort_list(lst)\r\n    return lst == sorted(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 567,
    "precondition": "lst is a list."
  },
  "568": {
    "specification": "Write a function to create a list of N empty dictionaries.",
    "code": "def empty_list(n):\r\n    return [{} for x in range(n)]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 568,
    "precondition": "n is an integer."
  },
  "569": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(lst):\r\n    return [sorted(sublist) for sublist in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 569,
    "precondition": "lst is a list of lists, and each element of lst is a list of strings."
  },
  "572": {
    "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
    "code": "def two_unique_nums(*args):\r\n    res = []\r\n    for num in args:\r\n        if num not in res:\r\n            res.append(num)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 572,
    "precondition": "args is a variable number of lists containing integers."
  },
  "573": {
    "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
    "code": "def unique_product(lst):\r\n    unique_list = list(set(lst))\r\n    product = 1\r\n    for i in unique_list:\r\n        product *= i\r\n    return product\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 573,
    "precondition": "lst is a list of numbers."
  },
  "574": {
    "specification": "Write a function to find the surface area of a cylinder.",
    "code": "import math\ndef surfacearea_cylinder(radius, height):\n\treturn (2 * math.pi * radius * height) + (2 * math.pi * math.pow(radius, 2))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 574,
    "precondition": "radius and height are positive real numbers."
  },
  "576": {
    "specification": "Write a python function to check whether a list is sublist of another or not.",
    "code": "def is_Sub_Array(arr1, arr2):\r\n    for i in range(len(arr1) - len(arr2) + 1):\r\n        if arr1[i:i + len(arr2)] == arr2:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 576,
    "precondition": "arr1 and arr2 are lists of comparable elements."
  },
  "577": {
    "specification": "Write a python function to find the last digit in factorial of a given number.",
    "code": "def fact(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * fact(n-1)\r\n\r\ndef last_Digit_Factorial(n):\r\n    return fact(n) % 10\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 577,
    "precondition": "n is an integer."
  },
  "578": {
    "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
    "code": "def interleave_lists(*args):\r\n    result = []\r\n    length = len(args[0])\r\n    for i in range(length):\r\n        for j in range(len(args):\r\n            result.append(args[j][i])\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 578,
    "precondition": "All lists provided as arguments have the same length."
  },
  "579": {
    "specification": "Write a function to find the dissimilar elements in the given two tuples.",
    "code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 579,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "580": {
    "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
    "code": "def extract_even(mixed\\_tuple):\r\n    result = ()\r\n    for i in mixed\\_tuple:\r\n        if type(i) is int:\r\n            if i % 2 == 0:\r\n                result += (i,)\r\n        elif type(i) is tuple:\r\n            new\\_tup = extract\\_even(i)\r\n            if new\\_tup != ():\r\n                result += (new\\_tup,)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 580,
    "precondition": "mixed\\_tuple is a tuple."
  },
  "581": {
    "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
    "code": "import math\r\ndef surface_Area(b,h):\r\n    result = math.sqrt(h*h + b*b/4)*4\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 581,
    "precondition": "b and h are both positive real numbers."
  },
  "582": {
    "specification": "Write a function to check if a dictionary is empty",
    "code": "def is_empty(dictionary:\r\n    if len(dictionary) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 582,
    "precondition": "dictionary is a dictionary."
  },
  "583": {
    "specification": "Write a function which returns nth catalan number.",
    "code": "import math\ndef catalan_number(n):\r\n    catalan = math.factorial(2*n)/(math.factorial(n+1)*math.factorial(n))\r\n    return int(catalan)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 583,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "584": {
    "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
    "code": "def find_adverbs(sentence):\r\n    words = sentence.split()\r\n    for i, word in enumerate(words):\r\n        if word.endswith(\"ly\")\r\n            pos = sentence.index(word)\r\n            res = str(pos) + \"-\" + str(pos+len(word)) + \": \" + word\r\n            return res\r\n    return \"No adverb found\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 584,
    "precondition": "sentence is a string."
  },
  "585": {
    "specification": "Write a function to find the n most expensive items in a given dataset.",
    "code": "def expensive_items(data, n):\r\n    return sorted(data, key=lambda x:x['price'], reverse=True)[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 585,
    "precondition": "data is a list of dictionaries where each dictionary has a key 'price' and n is an integer."
  },
  "586": {
    "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
    "code": "def split_Arr(arr,n):\r\n    first\\_part = arr[:n]\r\n    second\\_part = arr[n:]\r\n    return (second\\_part + first\\_part)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 586,
    "precondition": "arr is a list and n is an integer."
  },
  "587": {
    "specification": "Write a function to convert a list to a tuple.",
    "code": "def list_tuple(lst):\r\n    return tuple(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 587,
    "precondition": "lst is a list."
  },
  "588": {
    "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
    "code": "def big_diff(lst):\r\n    min_val = min(lst)\r\n    max_val = max(lst)\r\n    return max_val - min_val\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 588,
    "precondition": "lst is a non-empty list of numbers."
  },
  "589": {
    "specification": "Write a function to find perfect squares between two given numbers.",
    "code": "def perfect_squares(num1, num2):\r\n    return [x*x for x in range(int(num1**0.5), int(num2**0.5)+1) if x*x >= num1]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 589,
    "precondition": "num1 and num2 are real numbers such that num1 <= num2."
  },
  "590": {
    "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
    "code": "import cmath\r\ndef polar_rect(r,theta):\r\n    x = r * cmath.cos(theta)\r\n    y = r * cmath.sin(theta)\r\n    return (x,y)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 590,
    "precondition": "r is a real number and theta is an angle in radians."
  },
  "591": {
    "specification": "Write a python function to interchange the first and last elements in a list.",
    "code": "def swap_List(lst):\r\n\tx = lst[0]\r\n\tlst[0] = lst[-1]\r\n\tlst[-1] = x\r\n\treturn lst\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 591,
    "precondition": "lst is a list with at least one element."
  },
  "592": {
    "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
    "code": "def sum_Of_product(n):\r\n    result = 1\r\n    for i in range(1, n)\r\n        result *= (n - (i - 1))\r\n        result += result\r\n    return result - n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 592,
    "precondition": "n is a positive integer."
  },
  "593": {
    "specification": "Write a function to remove leading zeroes from an ip address.",
    "code": "def removezero_ip(ip_address)\r\n    split_ip = ip_address.split(\".\")\r\n    for index,value in enumerate(split_ip):\r\n        if value[0] == \"0\" and len(value) > 1:\r\n            split_ip[index] = value[1]\r\n    return \".\".join(split_ip)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 593,
    "precondition": "ip\\_address is a string in the format of an IP address (four numbers separated by periods)."
  },
  "594": {
    "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
    "code": "def diff_even_odd(lst):\r\n    even_lst = [i for i in lst if i%2 == 0]\r\n    odd_lst = [i for i in lst if i%2 != 0]\r\n    if even_lst and odd_lst:\r\n        return abs(even_lst[0] - odd_lst[0])\r\n    else:\r\n        return \"No even or odd numbers in the list\"\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 594,
    "precondition": "lst is a list."
  },
  "595": {
    "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
    "code": "def min_Swaps(str1, str2):\r\n    count = 0\r\n    for i in range(len(str1));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 595,
    "precondition": "str1 and str2 are binary strings of equal length."
  },
  "596": {
    "specification": "Write a function to find the size in bytes of the given tuple.",
    "code": "import sys\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 596,
    "precondition": "tup is a tuple."
  },
  "597": {
    "specification": "Write a function to find kth element from the given two sorted arrays.",
    "code": "def find_kth(arr1, arr2, k):\r\n    if len(arr1) > len(arr2):\r\n        return find_kth(arr2, arr1, k)\r\n    if k > len(arr1):\r\n        return find_kth(arr1[len(arr1)-len(arr2):], arr2, k-len(arr1)+len(arr2))\r\n    if k == len(arr1):\r\n        return arr2[k-len(arr1)]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    m = min(k//2, len(arr1))\r\n    if arr1[m-1] < arr2[k-m-1]:\r\n        return find_kth(arr1[m:], arr2, k-m)\r\n    else:\r\n        return find_kth(arr1, arr2[m:], k-m)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 597,
    "precondition": "arr1 and arr2 are sorted lists and k is an integer."
  },
  "598": {
    "specification": "Write a function to check whether the given number is armstrong or not.",
    "code": "def power(n,x):\r\n    return n**x\r\n\r\ndef sum\\_of\\_digits(n):\r\n    n = abs(n)\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n //= 10\r\n    return sum\r\n\r\ndef armstrong\\_number(n):\r\n    if n < 0:\r\n        return False\r\n    else:\r\n        original\\_number = n\r\n        sum\\_of\\_digits\\_cube = sum\\_of\\_digits(n)**3\r\n        if sum\\_of\\_digits\\_cube == original\\_number:\r\n            return True\r\n        else:\r\n            return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 598,
    "precondition": "n is an integer."
  },
  "599": {
    "specification": "Write a function to find sum and average of first n natural numbers.",
    "code": "def sum_average(n):\r\n    total = 0\r\n    for i in range(1, n+1):\r\n        total += i\r\n    avg = total/n\r\n    return (total, avg)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 599,
    "precondition": "n is a positive integer."
  },
  "600": {
    "specification": "Write a python function to check whether the given number is even or not.",
    "code": "def is_Even(n):\r\n    return n % 2 == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 600,
    "precondition": "n is an integer."
  },
  "602": {
    "specification": "Write a python function to find the first repeated character in a given string.",
    "code": "def first_repeated_char(str1):\r\n    chars = []\r\n    for n in str1:\r\n        if n in chars:\r\n            return n\r\n        chars.append(n)\r\n    return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 602,
    "precondition": "str1 is a string."
  },
  "603": {
    "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
    "code": "def get_ludic(n):\r\n    l = [1]\r\n    for x in range(2, n + 1):\r\n        prime = True\r\n        for i in range(2, int(x**0.5) + 1):\r\n            if x % i == 0:\r\n                prime = False\r\n                break\r\n        if prime:\r\n            l.append(x)\r\n    return l\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 603,
    "precondition": "n is an integer."
  },
  "604": {
    "specification": "Write a function to reverse words seperated by spaces in a given string.",
    "code": "def reverse_words(sentence)\r\n    return \" \".join(reversed(sentence.split()))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 604,
    "precondition": "sentence is a string."
  },
  "605": {
    "specification": "Write a function to check if the given integer is a prime number.",
    "code": "def prime_num(n):\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 605,
    "precondition": "n is an integer."
  },
  "606": {
    "specification": "Write a function to convert degrees to radians.",
    "code": "import math\ndef radian_degree(degree:\r\n    return math.radians(degree)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 606,
    "precondition": "degree is a real number."
  },
  "607": {
    "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
    "code": "import re\r\ndef find_literals(string, pattern)\r\n    match = re.search(pattern, string)\r\n    if match:\r\n        return (match.group(), match.start(), match.end())\r\n    else:\r\n        return None\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 607,
    "precondition": "string and pattern are strings."
  },
  "608": {
    "specification": "Write a python function to find nth bell number.",
    "code": "def bell_Number(n):\r\n  if n == 1:\r\n    return 1\r\n  else:\r\n    bell = [0 for x in range(n)]\r\n    bell[0] = 1\r\n    bell[1] = 1\r\n    for i in range(2, n):\r\n      bell[i] = sum(bell[i-1:0:-1])\\\n    return bell[n-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 608,
    "precondition": "n is a positive integer."
  },
  "610": {
    "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
    "code": "def remove_kth_element(input_list, k):\r\n    res = input_list[:k-1] + input_list[k:]\r\n    return res\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 610,
    "precondition": "input\\_list is a list and k is an integer."
  },
  "611": {
    "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
    "code": "def max_of_nth(mat, n)\r\n    max = mat[0][n]\r\n    for i in range(len(mat))\r\n        if mat[i][n] > max:\r\n            max = mat[i][n]\r\n    return max\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 611,
    "precondition": "mat is a list of lists representing a matrix and n is an integer."
  },
  "612": {
    "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
    "code": "def merge(list\\_of\\_lists):\r\n    list1 = []\r\n    list2 = []\r\n    for i in range(len(list_of_lists));\r\n        list1.append(list_of_lists[i][0])\r\n        list2.append(list_of_lists[i][1])\r\n    return [list1, list2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 612,
    "precondition": "list\\_of\\_lists is a list of lists, where each sublist has exactly two elements."
  },
  "614": {
    "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "code": "def cummulative_sum(numbers)\r\n\tsum = 0\r\n\tfor i in numbers:\r\n\t\tfor j in i:\r\n\t\t\tsum += j\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 614,
    "precondition": "numbers is a list of tuples."
  },
  "615": {
    "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
    "code": "def average_tuple(tuples\\_list)\r\n    avg\\_list = []\r\n    for t in tuples\\_list:\r\n        avg = sum(t) / len(t)\r\n        avg\\_list.append(avg)\r\n    return avg\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 615,
    "precondition": "tuples\\_list is a list of tuples."
  },
  "616": {
    "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
    "code": "def tuple_modulo(tup1, tup2):\r\n    return tuple(x % y for x, y in zip(tup1, tup2));\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 616,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "617": {
    "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "code": "def min_Jumps(point, leng): \r\n    (x, y) = point \r\n    (a, b) = (x, abs(y)) \r\n    if b == 0:\r\n        return 0 \r\n    elif b % leng == 0:\r\n        return b // leng \r\n    else:\r\n        return b // leng + 1 \r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 617,
    "precondition": "point is a tuple of two integers, leng is a positive integer."
  },
  "618": {
    "specification": "Write a function to divide two lists element wise.",
    "code": "def div_list(list1, list2):\r\n    if len(list1) != len(list2):\r\n        return \"Error: Lists are not the same length\"\r\n    else:\r\n        div\\_list = []\r\n        for i in range(len(list1)):\r\n            div\\_list.append(list1[i]/list2[i])\r\n        return div\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 618,
    "precondition": "list1 and list2 are lists of the same length."
  },
  "619": {
    "specification": "Write a function to move all the numbers to the end of the given string.",
    "code": "import re\r\ndef move_num(string):\r\n  num\\_list = re.findall('[0-9]', string)\r\n  alpha\\_list = re.findall('[^0-9]', string)\r\n  return ''.join(alpha\\_list + [str(eval('+'.join(num\\_list)))]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 619,
    "precondition": "string is a string containing numbers and non-numerical characters."
  },
  "620": {
    "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
    "code": "def largest_subset(nums:\r\n    n = len(nums)\r\n    if n == 0:\r\n        return 0\r\n    dp = [[False for x in range(n)] for x in range(n)]\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if nums[i] == nums[j]\r\n                dp[i][j] = True\r\n            elif i != j and nums[i] % nums[j] == 0:\r\n                dp[i][j] = True\r\n    max_subset = 0\r\n    for k in range(n):\r\n        for i in range(k, n):\r\n            for j in range(i, n):\r\n                if dp[i][k] and dp[k][j]\r\n                    max_subset = max(max_subset, j - i + 1)\r\n    return max_subset\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 620,
    "precondition": "nums is a list of numbers."
  },
  "622": {
    "specification": "Write a function to find the median of two sorted lists of same size.",
    "code": "def get_median(num1, num2, n):\r\n    i = 0\r\n    for j in range(n // 2):\r\n        if num1[i] < num2[j]\r\n            i = i + 1\r\n        else:\r\n            if j > 0:\r\n                i = i + 1\r\n                j = j - 1\r\n            else:\r\n                i = i + 1\r\n    if n % 2 == 0:\r\n        if num1[i] <= num2[n // 2]\r\n            return (num1[i] + num2[n // 2]) / 2.0\r\n        else:\r\n            return (num1[i - 1] + num2[n // 2]) / 2.0\r\n    else:\r\n        if num1[i] <= num2[n // 2]\r\n            return num1[i]\r\n        else:\r\n            return num2[n // 2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 622,
    "precondition": "num1 and num2 are sorted lists, and n is a positive integer representing the size of the lists."
  },
  "623": {
    "specification": "Write a function to compute the n-th power of each number in a list.",
    "code": "def nth_nums(num_list, n):\r\n\treturn [x**n for x in num_list]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 623,
    "precondition": "num\\_list is a list of numbers and n is an integer."
  },
  "624": {
    "specification": "Write a python function to convert a given string to uppercase.",
    "code": "def is_upper(str1):\r\n    return str1.upper()\r\nprint(is_upper(\"person\"))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 624,
    "precondition": "str1 is a string."
  },
  "625": {
    "specification": "Write a python function to interchange the first and last element in a given list.",
    "code": "def swap_List(input\\_list):\r\n    if len(input\\_list) < 2:\r\n        return input\\_list\r\n    else:\r\n        input\\_list[0], input\\_list[-1] = input\\_list[-1], input\\_list[0]\r\n        return input\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 625,
    "precondition": "input\\_list is a list with at least one element."
  },
  "626": {
    "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
    "code": "import math\ndef triangle_area(r):\n    if r < 0:\r\n        return None\r\n    else:\n        area = math.sqrt((r**2)*(math.pi)/2)/2\r\n        return area\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 626,
    "precondition": "r is a non-negative floating point number."
  },
  "627": {
    "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
    "code": "def find_First_Missing(arr):\r\n\tn = len(arr)\r\n\tif n == 0:\r\n\t\treturn 1\r\n\tfor i in range(0, n,\r\n\t\tif (arr[i] != i):\r\n\t\t\treturn i*\r\n\treturn n + 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 627,
    "precondition": "arr is a list of sorted natural numbers."
  },
  "628": {
    "specification": "Write a function to replace all spaces in the given string with '%20'.",
    "code": "def replace_spaces(s):\r\n    return s.replace(\" \",\"%20\")\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 628,
    "precondition": "s is a string."
  },
  "629": {
    "specification": "Write a python function to find even numbers from a list of numbers.",
    "code": "def Split(lst):\r\n    return [i for i in lst if i%2 == 0]\r\nassert Split([1,2,3,4,5]) == [2,4]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 629,
    "precondition": "lst is a list of integers."
  },
  "630": {
    "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "code": "def get_coordinates(coord)\r\n\tx, y = coord\r\n\tres = []\r\n\tfor i in range(x-1, x+2):\r\n\t\tfor j in range(y-1, y+2):\r\n\t\t\tif(i == x and j == y):\r\n\t\t\t\tcontinue\r\n\t\t\tres.append([i, j])\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 630,
    "precondition": "coord is a tuple of two integers."
  },
  "631": {
    "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
    "code": "def replace_spaces(s)\r\n    return s.replace(\" \", \"_\").replace(\"_\", \" \")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 631,
    "precondition": "s is a string."
  },
  "632": {
    "specification": "Write a python function to move all zeroes to the end of the given list.",
    "code": "def move_zero(list1)\r\n    zeroPos = 0\r\n    for i in range(len(list1))\r\n        if list1[i] != 0:\r\n            list1[zeroPos], list1[i] = list1[i], list1[zeroPos]\r\n            zeroPos += 1\r\n    return list1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 632,
    "precondition": "list1 is a list."
  },
  "633": {
    "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
    "code": "def pair_xor_Sum(numbers, k):\r\n    result = 0\r\n    for i in range(len(numbers))\r\n        for j in range(i, len(numbers));\r\n            if i != j:\r\n                if (i, j) in pairs:\r\n                    continue\r\n                else:\r\n                    pairs.add((i, j))\r\n                    result += numbers[i] ^ numbers[j]\r\n                    if len(pairs) == k:\r\n                        return result\r\n    return result \n\npairs = set()\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 633,
    "precondition": "numbers is a list of integers, and k is an integer."
  },
  "635": {
    "specification": "Write a function to sort the given list.",
    "code": "import heapq\r\ndef heap_sort(numbers):\r\n\theappush(numbers, 0)\r\n\tresult = []\r\n\twhile numbers:\r\n\t\tnumber = heappop(numbers)\r\n\t\tresult.append(number)\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 635,
    "precondition": "numbers is a list."
  },
  "637": {
    "specification": "Write a function to check whether the given amount has no profit and no loss",
    "code": "def noprofit_noloss(cost, selling\\_price):\r\n    if cost == selling\\_price:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 637,
    "precondition": "cost and selling\\_price are numbers."
  },
  "638": {
    "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
    "code": "def wind_chill(velocity, temp)\r\n    if velocity < 4.8 or temp > 10:\r\n        return temp\r\n    else:\r\n        wc = 13.12 + 0.6215*temp - 11.37*(velocity**0.16) + 0.3965*temp*(velocity**0.16)\r\n        return math.floor(wc)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 638,
    "precondition": "velocity is a number greater than or equal to 0, and temp is a number."
  },
  "639": {
    "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "code": "def sample_nam(names):\r\n    res = [name for name in names if name[0].isupper()\r\n    return sum([len(name) for name in res\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 639,
    "precondition": "names is a list of strings."
  },
  "640": {
    "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
    "code": "import re\r\ndef remove_parenthesis(string\r\n\r\n    return re.sub(r'\\([^)]*\\)', '', string):\r\n\r\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\r\n\r\nremove\\_parenthesis([\"python (chrome)\"])\r\n\r\nOutput:\r\n'python'\r\n\r\n---\n\r\n[Python application](https://www.tiobe.com/tiobe-index/python/) completed. Exited with code 0.\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 640,
    "precondition": "string is a string."
  },
  "641": {
    "specification": "Write a function to find the nth nonagonal number.",
    "code": "def is_nonagonal(n):\r\n    return n*(9*(n-1) + 2) // 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 641,
    "precondition": "n is an integer."
  },
  "643": {
    "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
    "code": "def text_match_wordz_middle(text\r\n ):\r\n    if text.startswith(\"z\")\r\n        text = text[1:]\r\n    if text.endswith(\"z\")\r\n        text = text[:-1]\r\n    if text.find(\"z\")!=-1 and text[0]!=\"z\" and text[-1]!=\"z\":\n        return True\n    else:\n        return False\n\nprint(text_match_wordz_middle(\"pythonzabc.\"))\r\n#output:True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 643,
    "precondition": "text is a string."
  },
  "644": {
    "specification": "Write a python function to reverse an array upto a given position.",
    "code": "def reverse_Array_Upto_K(arr,k):\r\n    arr[:] = (arr[k-1:0:-1] + arr[k:])\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 644,
    "precondition": "arr is a list and k is an integer."
  },
  "720": {
    "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
    "code": "def add_dict_to_tuple(tup, dict1):\r\n    return tup + (dict1,)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 720,
    "precondition": "tup is a tuple and dict1 is a dictionary."
  },
  "721": {
    "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
    "code": "def maxAverageOfPath(cost):\n    dp = [[0, 0] for _ in range(len(cost))]\n    dp[0][0] = cost[0][0]\n    dp[0][1] = 1\n    for i in range(1, len(cost)):\n        dp[i][1] = dp[i-1][1] + 1\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, len(cost)):\n        dp[len(cost)-1][1] += 1\n        dp[len(cost)-1][0] += cost[len(cost)-1][j]\n        for i in range(len(cost)-2, -1, -1):\n            total = dp[i][0] + cost[i+1][j]\n            cells = dp[i][1] + 1\n            avg = total / cells\n            if dp[i+1][0] < total or (dp[i+1][0] == total and dp[i+1][1] < cells):\n                dp[i+1][0] = total\n                dp[i+1][1] = cells\n            if dp[i][1] == 1:\n                avg = total\n            if avg > dp[i+1][0] / dp[i+1][1]:\n                dp[i+1][0] = total\n                dp[i+1][1] = cells\n    return dp[len(cost)-1][0] / dp[len(cost)-1][1]\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 721,
    "precondition": "cost is a list of lists where each element cost[i][j] is a float or integer representation of a cost and N is an integer."
  },
  "722": {
    "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
    "code": "def filter_data(dict1,min_height,min_weight):\r\n    res = {k:v for k,v in dict1.items() if v[0] > min_height and v[1] > min_weight}\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 722,
    "precondition": "dict1 is a dictionary, min\\_height and min\\_weight are float or integer values."
  },
  "723": {
    "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
    "code": "def count_same_pair(lst1, lst2):\r\n    count = 0\r\n    for i in range(len(lst1));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 723,
    "precondition": "lst1 and lst2 are both lists of the same length."
  },
  "724": {
    "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
    "code": "def power_base_sum(base, power):\r\n    result = 0\r\n    for i in range(power+1):\r\n        result += (base ** i)\r\n    return sum([int(digit) for digit in str(result)])\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 724,
    "precondition": "base is an integer and power is a non-negative integer."
  },
  "725": {
    "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
    "code": "import re\r\ndef extract_quotation(s):\r\n    res = re.findall(r'\"([^\"]*)\"', s)\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 725,
    "precondition": "s is a string."
  },
  "726": {
    "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
    "code": "def multiply_elements(tup*\r\n\treturn tuple(tup[i]*tup[i+1] for i in range(len(tup)-1))\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 726,
    "precondition": "tup is a tuple of length N+1 or greater, where each element is a number."
  },
  "728": {
    "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
    "code": "def sum_list(list1, list2):\r\n    return tuple(map(operator.add, list1, list2))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 728,
    "precondition": "list1 and list2 are lists of integers with equal length."
  },
  "730": {
    "specification": "Write a function to remove consecutive duplicates of a given list.",
    "code": "def consecutive_duplicates(numbers):\r\n    result = [numbers[0]]\r\n    for i in range(1, len(numbers):\r\n        if numbers[i] != numbers[i-1]:\r\n            result.append(numbers[i])\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 730,
    "precondition": "numbers is a list of elements."
  },
  "731": {
    "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
    "code": "import math\ndef lateralsurface_cone(r, h):\r\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 731,
    "precondition": "r and h are positive real numbers."
  },
  "732": {
    "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "code": "def replace_specialchar(input):\r\n    for char in [',','.']:\r\n        input = input.replace(char, ':')\r\n    return input.replace(' ', ':')\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 732,
    "precondition": "input is a string."
  },
  "733": {
    "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "code": "def find_first_occurrence(arr, val):\r\n    if not arr:\r\n        return -1\r\n    if arr[0] == val:\r\n        return 0\r\n    if arr[-1] == val:\r\n        return -1\r\n    left = 0\r\n    right = len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == val:\r\n            if mid == 0 or arr[mid-1] != val:\r\n                return mid\r\n            else: \r\n                right = mid - 1\r\n        elif arr[mid] < val:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    return -1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 733,
    "precondition": "arr is a non-empty sorted list and val is an integer."
  },
  "734": {
    "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
    "code": "def sum_Of_Subarray_Prod(arr):\r\n    sum = 0\r\n    for i in range(len(arr)):\r\n        prod = 1\r\n        for j in range(i, len(arr)):\\\n            prod *= arr[j]\r\n            sum += prod\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 734,
    "precondition": "arr is a list of numbers."
  },
  "735": {
    "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
    "code": "def toggle_middle_bits(n)\r\n    m = n & ~(1 | (1 << (n.bit_length() - 1))\r\n    m = m ^ ((1 << (n.bit_length() - 2)) - 1)\r\n    return (1 | m)\r\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 735,
    "precondition": "n is an integer."
  },
  "736": {
    "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
    "code": "def left_insertion(sorted_list, num):\r\n    left = 0\r\n    right = len(sorted_list)\r\n    while left < right:\r\n        mid = (left + right) // 2\r\n        if sorted_list[mid] < num:\r\n            left = mid + 1\r\n        else:\r\n            right = mid\r\n    return left\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 736,
    "precondition": "sorted\\_list is a sorted list and num is an integer."
  },
  "737": {
    "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "code": "import re\ndef check_str(string):\n    if re.search(r'^[aeiouAEIOU]', string):\n        return True\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 737,
    "precondition": "string is a string."
  },
  "738": {
    "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
    "code": "import math\r\ndef geometric_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (1/math.pow(2,n-1)) + geometric_sum(n-1)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 738,
    "precondition": "n is a positive integer."
  },
  "739": {
    "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
    "code": "import math\r\ndef is_n_digit_number(n):\r\n    return len(str(n)) == math.floor(math.log10(n)) + 1\r\n\r\ndef find_Index(n):\r\n    triangular_number = 0\r\n    count = 1\r\n    while not is_n_digit_number(triangular_number*\r\n                                    ):\r\n        triangular_number += count\r\n        count += 1\r\n    return int(triangular_number)**0.5\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 739,
    "precondition": "n is an integer greater than 0."
  },
  "740": {
    "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
    "code": "def tuple_to_dict(tpl)\r\n\tres = {tpl[i]: tpl[i+1] for i in range(0,len(tpl)-1,2)}\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 740,
    "precondition": "tpl is a tuple with an even number of elements."
  },
  "741": {
    "specification": "Write a python function to check whether all the characters are same or not.",
    "code": "def all_Characters_Same(s):\r\n    if len(set(s)) == 1:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 741,
    "precondition": "s is a string."
  },
  "742": {
    "specification": "Write a function to caluclate the area of a tetrahedron.",
    "code": "import math\r\ndef area_tetrahedron(a):\r\n    s = a/2\r\n    area = math.sqrt(a**2 * (a**2 - s)**2)\r\n    return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 742,
    "precondition": "a is a positive real number representing the length of a side of the tetrahedron."
  },
  "743": {
    "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
    "code": "def rotate_right(arr, n)\r\n    for i in range(n)\r\n        k = arr[n-1]\r\n        for j in range(n-1, 0, -1)\r\n            arr[j] = arr[j-1]\r\n        arr[0] = k\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 743,
    "precondition": "arr is a list and n is an integer such that 0 <= n <= len(arr)."
  },
  "744": {
    "specification": "Write a function to check if the given tuple has any none value or not.",
    "code": "def check_none(tup):\r\n    for i in tup:\r\n        if i is None:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 744,
    "precondition": "tup is a tuple."
  },
  "745": {
    "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
    "code": "def divisible_by_digits(startnum, endnum):\r\n    lst = []\r\n    for i in range(startnum, endnum + 1):\r\n        for j in str(i):\r\n            if int(j) != 0 and i % int(j) != 0:\r\n                break\r\n        else:\r\n            lst.append(i)\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 745,
    "precondition": "startnum and endnum are integers."
  },
  "746": {
    "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
    "code": "import math\r\ndef sector_area(r, angle):\r\n    area = 0\r\n    if angle <= 360:\r\n        area = (angle \\* math.pow(r, 2)) / (360)\r\n    return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 746,
    "precondition": "r is a positive number and angle is a non-negative number."
  },
  "747": {
    "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
    "code": "def lcs_of_three(str1, str2, str3):\r\n    len_str1 = len(str1)\r\n    len_str2 = len(str2)\r\n    len_str3 = len(str3)\r\n    dp = [[[0 for z in range(len_str3 + 1)] for y in range(len_str2 + 1)] for x in range(len_str1 + 1)]\r\n    for i in range(1, len_str1 + 1):\r\n        for j in range(1, len_str2 + 1):\r\n            for k in range(1, len_str3 + 1):\r\n                if str1[i - 1] == str2[j - 1] == str3[k - 1]:\r\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\r\n                else:\r\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1] )\r\n    return dp[len_str1][len_str2][len_str3]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 747,
    "precondition": "str1, str2, and str3 are strings."
  },
  "748": {
    "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
    "code": "def capital_words_spaces(s):\n    words = re.findall('[A-Z][^A-Z]*', s)\n    return ' '.join(words)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 748,
    "precondition": "s is a string."
  },
  "749": {
    "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
    "code": "def sort_numeric_strings(lst):\r\n    return sorted(lst, key=int)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 749,
    "precondition": "lst is a list of strings."
  },
  "750": {
    "specification": "Write a function to add the given tuple to the given list.",
    "code": "def add_tuple(input\\_list, input\\_tup)\r\n    input\\_list.append(input\\_tup)\\\n    return input\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 750,
    "precondition": "input\\_list is a mutable list and input\\_tup is a tuple."
  },
  "751": {
    "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "code": "def check_min_heap(arr,\r\n    n = len(arr));\r\n    if n<2:\r\n        return True\r\n    for i in range(1,n):\r\n        parent = arr[i]\r\n        left = 2*i + 1\r\n        right = 2*i + 2\r\n        if left<n and parent>arr[left]:\r\n            return False\r\n        if right<n and parent>arr[right]:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 751,
    "precondition": "arr is a list."
  },
  "752": {
    "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
    "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-2) + jacobsthal_num(n-1)\r\n",
    "total_tests": 4,
    "passed_tests": 1,
    "test_result": 0.25,
    "task_id": 752,
    "precondition": "n is an integer."
  },
  "753": {
    "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
    "code": "def min_k(li, k):\r\n    return (sorted(li, key=lambda x: x[1]))[:k]\r\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 753,
    "precondition": "li is a list of tuples and k is an integer."
  },
  "754": {
    "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
    "code": "def extract_index_list(l1, l2, l3):\r\n    res = [] \r\n    for i in range(len(l1)):\r\n        if l1[i] == l2[i] == l3[i\u7f00]:\r\n            res.append(l1[i]]\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 754,
    "precondition": "l1, l2, and l3 are lists of equal length."
  },
  "755": {
    "specification": "Write a function to find the second smallest number in a list.",
    "code": "def second_smallest(lst):\r\n    lst = list(set(lst))\r\n    lst.sort()\r\n    return lst[1]\r\n",
    "total_tests": 4,
    "passed_tests": 2,
    "test_result": 0.5,
    "task_id": 755,
    "precondition": "lst is a list."
  },
  "756": {
    "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
    "code": "import re\r\ndef text_match_zero_one(txt):\r\n    match = re.search(r'ab*', txt)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n\nassert text_match_zero_one(\"ac\")==False\n",
    "total_tests": 6,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 756,
    "precondition": "txt is a string."
  },
  "757": {
    "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
    "code": "def count_reverse_pairs(input\\_list):\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(len(input_list)):\n            if i < j and input_list[i] == input_list[j][::-1]:\n                count += 1\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 757,
    "precondition": "input\\_list is a list of strings."
  },
  "758": {
    "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
    "code": "def unique_sublists(lst):\r\n  result = {}\r\n  for i in lst:\r\n    t = tuple(i)\r\n    if t in result:\r\n      result[t] += 1\r\n    else:\r\n      result[t] = 1\r\n  return result\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 758,
    "precondition": "lst is a list."
  },
  "759": {
    "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
    "code": "import re\r\ndef is_decimal(num\\_string):\r\n    if re.match(r\"^\\d{1,}(\\.\\d{1,2})?$\", num\\_string):\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 759,
    "precondition": "num\\_string is a string."
  },
  "760": {
    "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
    "code": "def unique_Element(numbers)\r\n    return len(set(numbers)) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 760,
    "precondition": "numbers is a list of numbers."
  },
  "762": {
    "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
    "code": "def check_monthnumber_number(n):\r\n    if n == 2:\r\n        return False\r\n    elif n in [4, 6, 9, 11]:\r\n        return True\r\n    else:\r\n        return n in [1, 3, 5, 7, 8, 10, 12]\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 762,
    "precondition": "n is an integer between 1 and 12 inclusive."
  },
  "763": {
    "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
    "code": "def find_min_diff(arr, n)\r\n{\r\n    # Sort the array\r\n    arr.sort()\r\n    diff = math.inf\r\n    # Loop through the array and find the min difference\r\n    for i in range(1, n)\r\n    {\r\n        if(arr[i] - arr[i-1] < diff):\r\n            diff = arr[i] - arr[i-1]\r\n    }\r\n    return diff\r\n}\r\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 763,
    "precondition": "arr is a list of integers and n is the length of arr."
  },
  "764": {
    "specification": "Write a python function to count number of digits in a given string.",
    "code": "def number_ctr(string):\r\n    result = 0\r\n    for i in range(len(string));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 764,
    "precondition": "string is a non-empty string."
  },
  "765": {
    "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
    "code": "def is_polite(n):\r\n    if n < 1:\r\n        return None\r\n    elif n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 3\r\n    else:\r\n        i = 2\r\n        while True:\r\n            sum = 0\r\n            for j in range(0, i:\r\n                sum += (i + j)\r\n                if sum > n:\r\n                    break\r\n            if sum == n:\r\n                return i + j\r\n            i += 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 765,
    "precondition": "n is a positive integer."
  },
  "766": {
    "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
    "code": "def pair_wise(lst):\r\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 766,
    "precondition": "lst is a list."
  },
  "767": {
    "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
    "code": "def get_pairs_count(numbers, sum):\r\n    count = 0\r\n    for i in range(len(numbers)-1):\r\n        for j in range(i+1, len(numbers));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 767,
    "precondition": "numbers is a list of numbers and sum is an integer."
  },
  "769": {
    "specification": "Write a python function to get the difference between two lists.",
    "code": "def Diff(list1, list2)\r\n    result = [value for value in list1 if value not in list2]\r\n    result2 = [value for value in list2 if value not in list1]\r\n    result.extend(result2)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 769,
    "precondition": "list1 and list2 are lists."
  },
  "770": {
    "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "code": "def odd_num_sum(n):\r\n    return sum([i**4 for i in range(1, 2*n, 2)])\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 770,
    "precondition": "n is a positive integer."
  },
  "771": {
    "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
    "code": "def check_expression(exp)\r\n    stack = []\r\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\r\n    for char in exp:\r\n        if char in mapping:\r\n            top_element = stack.pop() if stack else '#'\r\n            if mapping[char] != top_element:\r\n                return False\r\n        else:\r\n            stack.append(char)\r\n    return not stack\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 771,
    "precondition": "exp is a string."
  },
  "772": {
    "specification": "Write a function to remove all the words with k length in the given string.",
    "code": "def remove_length(s, k)\r\n{\r\n  result = \"\"\r\n  words = s.split()\r\n  for word in words:\r\n    if len(word) != k:\r\n      result += word + \" \"</\n  return result.strip()\r\n\r\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 772,
    "precondition": "s is a string."
  },
  "773": {
    "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
    "code": "def occurance_substring(text, pattern)\r\n    if text.find(pattern) == -1:\r\n        return None\r\n    else:\r\n        loc = text.find(pattern)\r\n        return (pattern, loc, loc + len(pattern))\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 773,
    "precondition": "text and pattern are strings."
  },
  "775": {
    "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "code": "def odd_position(lst):\r\n\treturn all(x%2!=0 for x in lst[1::2])\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 775,
    "precondition": "lst is a list of numbers."
  },
  "776": {
    "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "code": "def count_vowels(s):\r\n\tvowels = set(\"aeiou\")\r\n\tcount = 0\r\n\tfor i in range(len(s)-1):\r\n\t\tif s[i] in vowels and s[i+1] in vowels:\r\n\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 776,
    "precondition": "s is a string of characters."
  },
  "777": {
    "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
    "code": "def find_sum(lst));\r\n    res = set()\n    for i in lst:\n        if i not in res:\n            res.add(i)\n    return sum(res)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 777,
    "precondition": "lst is a list."
  },
  "778": {
    "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "code": "def pack_consecutive_duplicates(lst):\r\n    if not lst:\r\n        return []\r\n    else:\r\n        result = [lst[0]]\r\n        for i in range(1, len(lst):\r\n            if lst[i] != lst[i-1].\r\n                result.append([lst[i]])\r\n            else:\r\n                result[-1].append(lst[i])\r\n        return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 778,
    "precondition": "lst is a list."
  },
  "779": {
    "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
    "code": "def unique_sublists(lst):\r\n    res = {}\r\n    for i in lst:\r\n        i = tuple(i)\r\n        if i not in res:\r\n            res[i] = 0\r\n        res[i] += 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 779,
    "precondition": "lst is a list."
  },
  "780": {
    "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
    "code": "def find_combinations(tuples)\r\n{\r\n\tresult = []\r\n\tfor i in range(len(tuples))\r\n\t{\r\n\t\tfor j in range(len(tuples))\r\n\t\t{\r\n\t\t\tif i != j:\r\n\t\t\t\tif tuples[i][0] + tuples[j][0] in [x[0] for x in result]\r\n\t\t\t\t{\r\n\t\t\t\t\tfor k in range(len(result))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif result[k][0] == tuples[i][0] + tuples[j][0];\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresult[k] = (result[k][0], result[k][1] + tuples[i][1] + tuples[j][1])\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}\r\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 780,
    "precondition": "tuples is a list of tuples."
  },
  "781": {
    "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
    "code": "import math\r\ndef count_divisors(n):\r\n    count = 0\r\n    for i in range(1,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            if n//i == i:\r\n                count += 1\r\n            else:\r\n                count += 2\r\n    return count % 2 == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 781,
    "precondition": "n is a non-negative integer."
  },
  "782": {
    "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
    "code": "def odd_length_sum(arr):\r\n    n = len(arr)\r\n    total = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if (j - i + 1) % 2 != 0:\r\n                total += sum(arr[i:j+1])\r\n    return total\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 782,
    "precondition": "arr is a list of numbers."
  },
  "783": {
    "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
    "code": "def rgb_to_hsv(r, g, b):\r\n    max_color = max(r, g, b)\r\n    min_color = min(r, g, b)\r\n    if max_color == min_color:\r\n        h = 0\r\n    elif max_color == r\r\n        h = (60 * ((g - b) / (max_color - min_color)) + 360) % 360\r\n    elif max_color == g:\r\n        h = (60 * ((b - r) / (max_color - min_color)) + 120) % 360\r\n    else:\r\n        h = (60 * ((r - g) / (max_color - min_color)) + 240) % 360\r\n    if max_color == 0:\r\n        s = 0\r\n    else:\r\n        s = (max_color - min_color) / max_color\r\n    v = max_color\r\n    hsv = (h, s, v)\r\n    return hsv\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 783,
    "precondition": "r, g, and b are integers within the range [0, 255]"
  },
  "784": {
    "specification": "Write a function to find the product of first even and odd number of a given list.",
    "code": "def mul_even_odd(numbers):\r\n    even = next((x for x in numbers if x % 2 == 0), None)\r\n    odd = next((x for x in numbers if x % 2 != 0), None)\r\n    if even and odd:\r\n        return even * odd\r\n    return 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 784,
    "precondition": "numbers is an iterable, such as a list or tuple."
  },
  "785": {
    "specification": "Write a function to convert tuple string to integer tuple.",
    "code": "import ast\r\ndef tuple_str_int(tup\\_str):\r\n    tup\\_int = ast.literal\\_eval(tup\\_str)\r\n    return tup\\_int\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 785,
    "precondition": "tup\\_str is a string representation of a tuple of integers."
  },
  "786": {
    "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "code": "def right_insertion(lst, val):\r\n    for i in range(len(lst))\r\n        if lst[i] >= val:\r\n            return i\r\n    return len(lst)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 786,
    "precondition": "lst is a list and val is a comparable value."
  },
  "787": {
    "specification": "Write a function that matches a string that has an a followed by three 'b'.",
    "code": "import re\r\ndef text_match_three(text):\r\n  match = re.search('abbb', text)\r\n  if match:\r\n    return True\r\n  else:\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 787,
    "precondition": "text is a string."
  },
  "788": {
    "specification": "Write a function to create a new tuple from the given string and list.",
    "code": "def new_tuple(t, l):\r\n    return tuple(t + l)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 788,
    "precondition": "t is a string and l is a list."
  },
  "790": {
    "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
    "code": "def even_position(lst):\r\n    for i in range(0,len(lst),2):\r\n        if lst[i] % 2 != 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 790,
    "precondition": "lst is a list."
  },
  "791": {
    "specification": "Write a function to remove tuples from the given tuple.",
    "code": "def remove_nested(tup):\r\n    result = []\r\n    for i in tup:\r\n        if type(i) is not tuple:\r\n            result.append(i)\r\n    return tuple(result)\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 791,
    "precondition": "tup is a tuple."
  },
  "792": {
    "specification": "Write a python function to count the number of lists in a given number of lists.",
    "code": "def count_list(lst):\r\n    return len(lst)\r\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 792,
    "precondition": "lst is a list of lists."
  },
  "793": {
    "specification": "Write a python function to find the last position of an element in a sorted array.",
    "code": "def last(arr, x):\r\n    return len(arr) - 1 - arr[::-1].index(x)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 793,
    "precondition": "arr is a sorted list and x is an element in arr or not in arr."
  },
  "794": {
    "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "code": "import re\ndef text_starta_endb(value\\_string):\n return bool(re.search(r'a.*b$', value_string))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 794,
    "precondition": "value\\_string is a string."
  },
  "796": {
    "specification": "Write function to find the sum of all items in the given dictionary.",
    "code": "def return_sum(dictionary):\r\n    sum = 0\r\n    for key, value in dictionary.items:\r\n        sum += value\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 796,
    "precondition": "dictionary is a dictionary."
  },
  "797": {
    "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "code": "def sum_in_range(l, r):\r\n\treturn sum([x for x in range(l, r+1) if x % 2 != 0])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 797,
    "precondition": "l and r are integers, and l <= r."
  },
  "798": {
    "specification": "Write a python function to find the sum of an array.",
    "code": "def _sum(arr):\r\n    return sum(arr)\r\nassert _sum([1, 2, 3]) == 6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 798,
    "precondition": "arr is a list of numbers."
  },
  "799": {
    "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
    "code": "def left_rotate(n, d)\r\n\treturn (n << d) & 0xFFFFFFFF\r\nassert left_rotate(16,2) == 64\n",
    "total_tests": 7,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 799,
    "precondition": "n is an integer and d is a non-negative integer less than or equal to 32."
  },
  "800": {
    "specification": "Write a function to remove all whitespaces from a string.",
    "code": "def remove_all_spaces(input_string):\r\n    return input_string.replace(' ','')\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 800,
    "precondition": "input\\_string is a string."
  },
  "801": {
    "specification": "Write a python function to count the number of equal numbers from three given integers.",
    "code": "def test_three_equal(a,b,c):\r\n    if a == b == c:\r\n        return 3\r\n    elif a == b or b == c or a == c:\r\n        return 2\r\n    else:\r\n        return 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 801,
    "precondition": "a, b, and c are integers."
  },
  "802": {
    "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
    "code": "def count_rotation(arr):\r\n    if arr[0] < arr[-1]:\r\n        return 0\r\n    return (arr.index(min(arr))) + 1\n",
    "total_tests": 5,
    "passed_tests": 1,
    "test_result": 0.2,
    "task_id": 802,
    "precondition": "arr is a list of comparable elements."
  },
  "803": {
    "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
    "code": "import math\ndef is_perfect_square(n):\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 803,
    "precondition": "n is a non-negative integer."
  },
  "804": {
    "specification": "Write a function to check whether the product of numbers in a list is even or not.",
    "code": "def is_product_even(li):\r\n    return all(x % 2 != 1 for x in li)\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 804,
    "precondition": "li is a list of integers."
  },
  "805": {
    "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
    "code": "def max_sum_list(lst):\n    max_sum = -1\r\n    max_list = []\r\n    for i in lst:\r\n        if sum(i) > max_sum:\r\n            max_sum = sum(i)\r\n            max_list = i\r\n    return max_list\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 805,
    "precondition": "lst is a list of lists containing only numbers."
  },
  "806": {
    "specification": "Write a function to find maximum run of uppercase characters in the given string.",
    "code": "def max_run_uppercase(s):\r\n    max_run = 0\r\n    current_run = 0\r\n    for c in s:\r\n        if c.isupper():\r\n            current_run += 1\r\n            if current_run > max_run:\r\n                max_run = current_run\r\n        else:\r\n            current_run = 0\r\n    return max_run\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 806,
    "precondition": "s is a string."
  },
  "807": {
    "specification": "Write a python function to find the first odd number in a given list of numbers.",
    "code": "def first_odd(lst):\r\n    for i in lst:\r\n        if i % 2 != 0:\r\n            return i\r\n    return \"No odd numbers in the list\"\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 807,
    "precondition": "lst is a list of numbers."
  },
  "808": {
    "specification": "Write a function to check if the given tuples contain the k or not.",
    "code": "def check_K(tup, k):\r\n    if k in tup:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 808,
    "precondition": "tup is a tuple and k is a value."
  },
  "809": {
    "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
    "code": "def check_smaller(tup1, tup2):\r\n    return all(x<y for x, y in zip(tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 809,
    "precondition": "tup1 and tup2 are tuples of equal length."
  }
}