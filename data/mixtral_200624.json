{
    "2": {
        "specification": "Write a function to find the shared elements from the given two lists.",
        "code": "def similar_elements(test_list1, test_list2)\r\n  res = set(test_list1) & set(test_list2)\r\n  return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 2,
        "precondition": "test\\_list1 and test\\_list2 are lists."
    },
    "3": {
        "specification": "Write a python function to identify non-prime numbers.",
        "code": "def is_not_prime(n):\r\n    if n < 2:\r\n        return True\r\n    for i in range(2,n):\r\n        if n % i == 0:\r\n            return True\r\n    return False\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 3,
        "precondition": "n is a non-negative integer."
    },
    "4": {
        "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "code": "import heapq\r\ndef heap_queue_largest(numbers, n):\r\n    return heapq.nlargest(n, numbers)\r\n\r\nOR\r\n\r\ndef heap_queue_largest(numbers, n):\r\n    max_heap = numbers[:n]\r\n    heapq.heapify(max_heap)\r\n    for i in numbers[n:]:\r\n        if i > max_heap[0]:\r\n            heapq.heappop(max_heap)\r\n            heapq.heappush(max_heap, i)\r\n    return max_heap\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 4,
        "precondition": "numbers is a list of numbers and n is a positive integer."
    },
    "6": {
        "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "code": "def differ_At_One_Bit_Pos(n1, n2):\r\n    if bin(n1)[2:] ^ bin(n2)[2:] == '1' * len(bin(n1)[2:]) or bin(n1)[2:] ^ bin(n2)[2:] == '1' * len(bin(n2)[2:]):\n        return False\n    else:\n        return True\n",
        "total_tests": 6,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 6,
        "precondition": "n1 and n2 are integers."
    },
    "7": {
        "specification": "Write a function to find all words which are at least 4 characters long in a string.",
        "code": "def find_char_long(sentence):\r\n    words = sentence.split()\r\n    result = []\r\n    for word in words:\r\n        if len(word) >= 4:\r\n            result.append(word)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 7,
        "precondition": "sentence is a string."
    },
    "8": {
        "specification": "Write a function to find squares of individual elements in a list.",
        "code": "def square_nums(numbers):\r\n  return [x*x for x in numbers]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 8,
        "precondition": "numbers is a list of numbers."
    },
    "9": {
        "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "def find_Rotations(str1):\r\n    str2 = str1\r\n    count = 1\r\n    while (str1 != str2):\r\n        str2 = str2[1:] + str2[0]\r\n        str2 = str2.lower()\r\n        str1 = str1.lower()\r\n        count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 9,
        "precondition": "str1 is a string."
    },
    "11": {
        "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,c):\r\n    if s.count(c) > 1:\r\n        if s[0] == c:\r\n            s = s[1:]\r\n        if s[-1] == c:\r\n            s = s[:-1]\r\n        for i in range(s.count(c) - 2):\r\n            s = s.replace(str(c),'',1)\r\n        return s\r\n    else:\r\n        return \"There is only one or zero occurrence of \" + c + \" in the string\"\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 11,
        "precondition": "s is a string and c is a character."
    },
    "12": {
        "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(matrix):\r\n    matrix.sort(key = sum)\r\n    return matrix\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 12,
        "precondition": "matrix is a two-dimensional list of numbers."
    },
    "14": {
        "specification": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l, b, h):\r\n    return (l * b * h)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 14,
        "precondition": "l, b, and h are positive real numbers representing the length, breadth, and height of the triangular prism."
    },
    "16": {
        "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import re\r\ndef text_lowercase_underscore(text):\r\n    result = re.match(\"^[a-z_]*$\", text)\r\n    if result:\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 16,
        "precondition": "text is a string."
    },
    "17": {
        "specification": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "def square_perimeter(side\\_length):\r\n    perimeter = 4 * side_length\r\n    return perimeter\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 17,
        "precondition": "side\\_length is a non-negative real number."
    },
    "18": {
        "specification": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "def remove_dirty_chars(input_string, dirty_string):\r\n    for char in dirty_string:\r\n        if char in input_string\r\n            input_string = input_string.replace(char, \"\")\r\n    return input_string\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 18,
        "precondition": "input\\_string and dirty\\_string are strings."
    },
    "19": {
        "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arr):\r\n    return len(arr) != len(set(arr))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 19,
        "precondition": "arr is a list of integers."
    },
    "20": {
        "specification": "Write a function to check if the given number is woodball or not.",
        "code": "import math\r\ndef is_woodall(n):\r\n    result = False\r\n    if n > 0:\r\n        temp = 0\r\n        for i in range(1,int(math.sqrt(n)) + 1):\r\n            temp += i**3\r\n            if temp == n:\r\n                result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 20,
        "precondition": "n is a positive integer."
    },
    "56": {
        "specification": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def reverse(num):\r\n    rev = 0\r\n    while num > 0:\r\n        rev = rev * 10 + (num % 10)\r\n        num = num // 10\r\n    return rev\r\ndef check(num):\r\n    if num != (2 * reverse(num) - 1):\r\n        return False\r\n    return True\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 56,
        "precondition": "num is an integer."
    },
    "57": {
        "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "code": "def find_Max_Num(numbers):\r\n  numbers.sort()\r\n  return int(''.join(str(i) for i in numbers))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 57,
        "precondition": "numbers is a list of integers."
    },
    "58": {
        "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(n1, n2):\r\n    if (n1 > 0 and n2 < 0) or (n1 < 0 and n2 > 0):\r\n        return True\r\n    return False\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 58,
        "precondition": "n1 and n2 are integers."
    },
    "59": {
        "specification": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (n*(n-1) + 2)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 59,
        "precondition": "n is a positive integer."
    },
    "61": {
        "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "code": "def count_Substrings(inputStr):\r\n    count = 0\r\n    for i in range(len(inputStr)-\\\n                    len(inputStr) % 2):\r\n        if sum(map(int, inputStr[i:i + len(inputStr) // 2])) == len(inputStr[i:i + len(inputStr) // 2])\\\n                and len(inputStr[i:i + len(inputStr) // 2]) == len(set(inputStr[i:i + len(inputStr) // 2])):\\\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 61,
        "precondition": "inputStr is a non-empty string."
    },
    "62": {
        "specification": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(lst:\r\n    return min(lst)\r\n\r\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 62,
        "precondition": "lst is a list of numbers."
    },
    "63": {
        "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(lst):\r\n    return max(max(b)-min(a) for a,b in lst)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 63,
        "precondition": "lst is a list of tuples containing two integers each."
    },
    "64": {
        "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
        "code": "def subject_marks(list\\_of\\_tuples):\r\n\treturn sorted(list_of_tuples, key=lambda x:x[1] )\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 64,
        "precondition": "list\\_of\\_tuples is a list of tuples."
    },
    "65": {
        "specification": "Write a function to flatten a list and sum all of its elements.",
        "code": "def recursive_list_sum(lst):\r\n    sum = 0\r\n    for i in lst:\r\n        if type(i) is not list:\r\n            sum += i\r\n        else:\r\n            sum += recursive_list_sum(i)\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 65,
        "precondition": "lst is a list containing integers and/or nested lists."
    },
    "66": {
        "specification": "Write a python function to count the number of positive numbers in a list.",
        "code": "def pos_count(numbers):\r\n    return sum(1 for x in numbers if x > 0)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 66,
        "precondition": "numbers is a list of integers."
    },
    "67": {
        "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "def bell_number(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        res = [0 for x in range(n)]\r\n        res[0] = 1\r\n        res[1] = 2\r\n        for i in range(2, n):\r\n            for j in range(1, i + 1)\r\n                res[i] += res[i - j]\r\n        return res[n - 1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 67,
        "precondition": "n is a non-negative integer."
    },
    "68": {
        "specification": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(arr):\r\n  inc = dec = True \r\n  for i in range(len(arr) - 1):\r\n    if arr[i] > arr[i + 1];\r\n      dec = False \r\n    if arr[i] < arr[i + 1]\r\n      inc = False \r\n  return inc or dec\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 68,
        "precondition": "arr is a list of comparable elements."
    },
    "69": {
        "specification": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(list1, sublist:\r\n    if len(sublist) > len(list1):\r\n        return False\r\n    for i in range(len(list1) - len(sublist) + 1):\r\n        if list1[i:i+len(sublist)] == sublist:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 69,
        "precondition": "list1 and sublist are lists."
    },
    "70": {
        "specification": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def get_equal(tuples\\_list):\r\n    return len(set([len(i) for i in tuples_list])) == 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 70,
        "precondition": "tuples\\_list is a list of tuples."
    },
    "71": {
        "specification": "Write a function to sort a list of elements.",
        "code": "def comb_sort(arr):\r\n    gap = len(arr)\r\n    swapped = True\r\n    while gap > 1 or swapped:\r\n        gap = int(gap/1.3)\r\n        if gap < 1:\r\n            gap = 1\r\n        swapped = False\r\n        for i in range(0, len(arr) - gap)\r\n            if arr[i] > arr[i + gap]:\r\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\r\n                swapped = True\r\n    return arr\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 71,
        "precondition": "arr is a list of comparable elements."
    },
    "72": {
        "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "import math\r\ndef dif_Square(n):\r\n    sqrt = int(math.sqrt(n))\r\n    for i in range(sqrt + 1):\r\n        sq = i * i\r\n        if (n - sq) ** 0.5 % 1 == 0:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 72,
        "precondition": "n is a non-negative integer."
    },
    "74": {
        "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(pattern, colors)\r\n  if len(pattern) != len(colors):\r\n    return False\r\n  for i in range(len(pattern)):\r\n    if colors.count(colors[i]) != pattern[i].count(pattern[i]):\r\n      return False\r\n  return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 74,
        "precondition": "pattern is a list of characters, colors is a list of integers, and the length of pattern and colors are equal."
    },
    "75": {
        "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(tuples_list, k):\r\n    result = []\r\n    for t in tuples_list:\r\n        if all(map(lambda x: x % k == 0, t)):\r\n            result.append(t)\r\n    return tuple(result)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 75,
        "precondition": "tuples\\_list is a list of tuples and k is an integer."
    },
    "77": {
        "specification": "Write a python function to find whether a number is divisible by 11.",
        "code": "def is_Diff (n):\r\n    result = False\r\n    if (n < 0):\r\n        n = -n\r\n    if (n > 0):\r\n        if (sum([int(ch) for ch in str(n)[::2]]) - sum([int(ch) for ch in str(n)[1::2]])) % 11 == 0:\r\n            result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 77,
        "precondition": "n is an integer."
    },
    "79": {
        "specification": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(word):\r\n    if len(word) % 2 != 0:\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 79,
        "precondition": "word is a string."
    },
    "80": {
        "specification": "Write a function to find the nth tetrahedral number.",
        "code": "import math\r\ndef tetrahedral_number(n):\r\n    return math.factorial(n) / math.factorial(3) * (n*(n-1)*(n-2))/6\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 80,
        "precondition": "n is a non-negative integer."
    },
    "82": {
        "specification": "Write a function to find the volume of a sphere.",
        "code": "import math\ndef volume_sphere(radius):\r\n    return 4/3 * math.pi * math.pow(radius, 3)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 82,
        "precondition": "radius is a positive number (float or integer)."
    },
    "83": {
        "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "def get_Char(s):\r\n    result = \"\"\r\n    for char in s:\r\n        result += chr((ord(char) - 97 + int(result)) % 26 + 97)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 83,
        "precondition": "s is a non-empty string consisting of lowercase alphabets only."
    },
    "84": {
        "specification": "Write a function to find the nth number in the newman conway sequence.",
        "code": "def sequence(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        a, b = 1, 2\r\n        for i in range(2,n):\r\n            a, b = b, b + a\r\n        return b\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 84,
        "precondition": "n is a positive integer."
    },
    "85": {
        "specification": "Write a function to find the surface area of a sphere.",
        "code": "import math\r\ndef surfacearea_sphere(radius):\r\n    return 4 * math.pi * (radius ** 2)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 85,
        "precondition": "radius is a positive number."
    },
    "86": {
        "specification": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\r\n  return (n*(2*n - 1)) + 1\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 86,
        "precondition": "n is a positive integer."
    },
    "87": {
        "specification": "Write a function to merge three dictionaries into a single dictionary.",
        "code": "def merge_dictionaries_three(dict1, dict2, dict3):\r\n    final_dict = {}.fromkeys(dict1.keys() | dict2.keys() | dict3.keys(), None)\r\n    final_dict.update(dict1)\r\n    final_dict.update(dict2)\r\n    final_dict.update(dict3)\r\n    return final_dict\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 87,
        "precondition": "dict1, dict2, and dict3 are dictionaries."
    },
    "88": {
        "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "code": "def freq_count(numbers):\r\n  freq = {}\r\n  for num in numbers:\r\n    if num in freq:\r\n      freq[num] += 1\r\n    else:\r\n      freq[num] = 1\r\n  return freq\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 88,
        "precondition": "numbers is a list of numbers."
    },
    "89": {
        "specification": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(n):\r\n    return n-1 if n-1>0 else 1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 89,
        "precondition": "n is an integer."
    },
    "90": {
        "specification": "Write a python function to find the length of the longest word.",
        "code": "def len_long(lst):\r\n    return max(len(i) for i in lst)\r\nprint(len_long([\"python\",\"PHP\",\"bigdata\"]))\r\n)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 90,
        "precondition": "lst is a list of strings."
    },
    "91": {
        "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "def find_substring(lst, str1):\r\n    for word in lst:\r\n        if str1 in word:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 91,
        "precondition": "lst is a list of strings and str1 is a string."
    },
    "92": {
        "specification": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n):\r\n    if len(str(n)) % 2 == 0:\r\n        for i in range(0,len(str(n)),2):\r\n            if str(n)[i] != str(n)[i+1];\r\n                return False\r\n    else:\r\n        for i in range(0,len(str(n))-1,2):\r\n            if str(n)[i] != str(n)[i+1]\r\n                return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 92,
        "precondition": "n is an integer."
    },
    "93": {
        "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a,b):\r\n    result = 1\r\n    for i in range(1,b+1):\r\n        result *= a\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 93,
        "precondition": "a is a non-zero number, b is an integer."
    },
    "94": {
        "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "def index_minimum(a):\r\n    min_val = min(a, key=lambda x: x[1])[1]\r\n    res = [x[0] for x in a if x[1] == min_val]\r\n    return res[0]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 94,
        "precondition": "a is a list of tuples."
    },
    "95": {
        "specification": "Write a python function to find the length of the smallest list in a list of lists.",
        "code": "def Find_Min_Length(lst):\r\n    return min(len(i) for i in lst)\r\nprint(Find_Min_Length([[1],[1,2]]))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 95,
        "precondition": "lst is a list of lists."
    },
    "96": {
        "specification": "Write a python function to find the number of divisors of a given integer.",
        "code": "def divisor(n):\r\n    result = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            result += 1\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 96,
        "precondition": "n is a non-negative integer."
    },
    "97": {
        "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "code": "def frequency_lists(nested_list):\r\n    flat_list = [i for sublist in nested_list for i in sublist]\r\n    freq_dict = {i:0 for i in set(flat_list):\r\n    for item in flat_list:\r\n        if item in freq_dict:\r\n            freq_dict[item] += 1\r\n    return freq_dict\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 97,
        "precondition": "nested\\_list is a list of lists."
    },
    "98": {
        "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "import math\r\ndef multiply_num(num\\_list):\r\n  return math.fsum(num\\_list) / len(num\\_list)\r\n \nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)\r\nprint(\"Test case passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 98,
        "precondition": "num\\_list is a list of numbers."
    },
    "99": {
        "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "def decimal_to_binary(n):\r\n    if n == 0:\r\n        return '0'\r\n    binary = []\r\n    while n > 0:\r\n        binary.append(str(n % 2))\r\n        n = n // 2\r\n    return ''.join(binary)[::-1]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 99,
        "precondition": "n is a non-negative integer."
    },
    "100": {
        "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "def is_palindrome(n):\r\n    return str(n)==str(n)[::-1]\r\ndef next_smallest_palindrome(n):\r\n    while(True):\r\n        n+=1\r\n        if is_palindrome(n):\r\n            return n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 100,
        "precondition": "n is an integer."
    },
    "101": {
        "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "def kth_element(arr, k):\r\n    arr.sort()\r\n    return arr[k-1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 101,
        "precondition": "arr is a list of elements and k is a positive integer less than or equal to the length of arr."
    },
    "102": {
        "specification": "Write a function to convert a snake case string to camel case string.",
        "code": "def snake_to_camel(str1):\r\n    words = str1.split('_')\r\n    words[0] = words[0].lower()\r\n    for i in range(1,len(words));\r\n        words[i] = words[i].capitalize()\r\n    return ''.join(words)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 102,
        "precondition": "str1 is a string that contains only lowercase letters, underscores, and starts with a letter."
    },
    "103": {
        "specification": "Write a function to find the Eulerian number a(n, m).",
        "code": "def eulerian_num(n, m):\r\n    if n == 0 and m == 0:\r\n        return 1\r\n    elif n > 0 and m == 0:\r\n        return eulerian_num(n-1, 1) + (n-1) * eulerian_num(n-1, 0)\r\n    elif m > 0 and m < n:\r\n        return (m) * eulerian_num(n-1, m) + (n-m) * eulerian_num(n-1, m-1)\r\n    elif m == n:\r\n        return (n) * eulerian_num(n-1, m-1)\r\n    else:\r\n        return 0\r\n\r\nassert eulerian_num(3, 1) == 4\r\nassert eulerian_num(3, 2) == 3\r\nassert eulerian_num(3, 3) == 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 103,
        "precondition": "n and m are non-negative integers, and m is less than or equal to n."
    },
    "104": {
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "def sort_sublists(lst):\r\n    return [sorted(sublst) for sublst in lst]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 104,
        "precondition": "lst is a list of lists of strings."
    },
    "105": {
        "specification": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):\r\n    return sum(lst)\r\nprint(count([True,False,True]))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 105,
        "precondition": "lst is a list of booleans."
    },
    "106": {
        "specification": "Write a function to append the given list to the given tuples.",
        "code": "def add_lists(lst, tup*\r\n    return tup + tuple(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 106,
        "precondition": "lst is a list and tup is a tuple."
    },
    "108": {
        "specification": "Write a function to merge three lists into a single sorted list.",
        "code": "def merge_sorted_list(list1,list2,list3):\r\n    merged_list = sorted(list1 + list2 + list3)\r\n    return merged_list\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 108,
        "precondition": "list1, list2, and list3 are lists of comparable elements."
    },
    "109": {
        "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "def odd_Equivalent(binary_str, num\\_rotations):\r\n    num\\_odd = 0\r\n    for i in range(num_rotations):\r\n        if int(binary_str, 2) % 2 != 0:\r\n            num_odd += 1\r\n        binary_str = binary_str[1:] + binary_str[0]\r\n    return num_odd\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 109,
        "precondition": "binary\\_str is a string of '0's and '1's and num\\_rotations is a non-negative integer."
    },
    "111": {
        "specification": "Write a function to find the common elements in given nested lists.",
        "code": "def common_in_nested_lists(nested\\_lists):\r\n    result = set()\r\n    for i in nested\\_lists:\r\n        result = result | set(i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 111,
        "precondition": "nested\\_lists is a list of lists."
    },
    "113": {
        "specification": "Write a function to check if a string represents an integer or not.",
        "code": "import re\r\ndef check_integer(str1):\r\n   if re.match(r'-?\\d+', str1):\r\n      return True\r\n   else:\r\n      return False\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 113,
        "precondition": "str1 is a string."
    },
    "115": {
        "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(lst\\_dict):\r\n    result = True\r\n    for i in lst\\_dict:\r\n        if i != {}\\: \r\n            result = False\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 115,
        "precondition": "lst\\_dict is a list of dictionaries."
    },
    "116": {
        "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "def tuple_to_int(t\\_tuple):\r\n    num = \"\"\r\n    for i in t\\_tuple:\r\n        num += str(i)\r\n    return int(num)\r\nprint(tuple_to_int((1,2,3)) == 123) # This will print True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 116,
        "precondition": "t\\_tuple is a tuple of positive integers."
    },
    "117": {
        "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "def list_to_float(lst):\r\n    return [[float(i) for i in j] for j in lst]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 117,
        "precondition": "lst is a list of lists, containing only numbers or strings that can be converted to numbers."
    },
    "118": {
        "specification": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "def string_to_list(str1):\r\n  return str1.split()\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 118,
        "precondition": "str1 is a string."
    },
    "119": {
        "specification": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr):\r\n    for i in range(len(arr)-1):\r\n        if arr[i] != arr[i+1]:\n            return arr[i+1]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 119,
        "precondition": "arr is a sorted list of integers."
    },
    "120": {
        "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "code": "def max_product_tuple(tuples\\_list):\r\n    max\\_product = -1\r\n    for t in tuples\\_list:\r\n        product = abs(t[0] * t[1])\r\n        if product > max\\_product:\r\n            max\\_product = product\r\n    return max\\_product\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 120,
        "precondition": "tuples\\_list is a list of tuples where each tuple contains exactly two integers."
    },
    "123": {
        "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def factors(n):\r\n    factors\\_list = []\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            factors\\_list.append(i)\r\n    return factors\\_list\r\n\r\ndef deficient\\_or\\_abundant(n, factors\\_list):\r\n    if sum(factors\\_list) < n:\r\n        return \"Deficient\"\r\n    elif sum(factors_list) > n:\r\n        return \"Abundant\"\r\n    else:\r\n        return \"Perfect\"\r\n\r\ndef amicable\\_pair(x, y):\r\n    if sum(factors(x)) == y and sum(factors(y)) == x:\r\n        return True\r\n    else:\r\n        return False\r\n\r\ndef amicable\\_numbers\\_sum(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        factors\\_list = factors(i)\r\n        result = deficient_or_abundant(i, factors_list)\r\n        if result == \"Abundant:\r\n            for j in range(i + 1, n + 1):\r\n                if amicable\\_pair(i, j):\r\n                    sum += i\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 123,
        "precondition": "n is a positive integer."
    },
    "124": {
        "specification": "Write a function to get the angle of a complex number.",
        "code": "import cmath\r\ndef angle_complex(real, imag*\r\n  num = complex(real, imag)\r\n  return cmath.phase(num)\r\n \nassert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 124,
        "precondition": "real and imag are real numbers."
    },
    "125": {
        "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(binary\\_string):\r\n    zero\\_count = 0\r\n    max\\_count = 0\r\n    for i in binary\\_string:\r\n        if i == \"0:\r\n            zero\\_count += 1\r\n        else:\\\n            max\\_count = max(zero\\_count, max\\_count)\r\n            zero\\_count = 0\r\n    return max(zero\\_count, max\\_count)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 125,
        "precondition": "binary\\_string is a non-empty string containing only 0s and 1s."
    },
    "126": {
        "specification": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum(num1, num2):\r\n    result = 0\r\n    for i in range(1, min(num1, num2) + 1):\r\n        if num1 % i == 0 and num2 % i == 0:\r\n            result += i\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 126,
        "precondition": "num1 and num2 are positive integers."
    },
    "127": {
        "specification": "Write a function to multiply two integers.",
        "code": "def multiply_int(a, b):\r\n    return a * b\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 127,
        "precondition": "a and b are integers."
    },
    "128": {
        "specification": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "def long_words(n,words): \r\n    return [word for word in words.split() if len(word) > n]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 128,
        "precondition": "n is an integer and words is a string."
    },
    "129": {
        "specification": "Write a function to calculate whether the matrix is a magic square.",
        "code": "def magic_square_test(matrix):\r\n\tn = len(matrix)\r\n\tif n != len(matrix[0]):\r\n\t\treturn False\r\n\trows = [sum(row) for row in matrix]\r\n\tcols = [sum(col) for col in zip(*matrix)]\r\n\tif rows != [sum(rows) / n] * n or cols != [sum(cols) / n] * n:\r\n\t\treturn False\r\n\tif sorted(matrix[0]) != [x for x in range(1, n + 1)]:\r\n\t\treturn False\r\n\tfor i in range(1, n):\r\n\t\tif sorted(matrix[i]) != [x for x in range(1, n + 1)]:\r\n\t\t\treturn False\r\n\treturn True\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 129,
        "precondition": "matrix is a square 2D list."
    },
    "130": {
        "specification": "Write a function to find the item with maximum frequency in a given list.",
        "code": "from collections import Counter\r\ndef max_occurrences(lst):\r\n    data = Counter(lst)\r\n    max_count = max(data.values())\r\n    max_item = [item for item, count in data.items() if count == max_count]\r\n    return max_item\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 130,
        "precondition": "lst is a list."
    },
    "131": {
        "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "def reverse_vowels(input\\_string):\r\n    vowels = 'aeiouAEIOU'\r\n    vowels\\_list = list(filter(input_string.lower().count, vowels))\r\n    i = 0\r\n    j = len(vowels_list) - 1\r\n    input_list = list(input_string)\r\n    while i < j:\r\n        input_list[i], input_list[j] = input_list[j], input_list[i]\r\n        i += 1\r\n        j -= 1\r\n    return ''.join(input_list)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 131,
        "precondition": "input\\_string is a string."
    },
    "132": {
        "specification": "Write a function to convert a tuple to a string.",
        "code": "def tup_string(tup):\r\n  return ''.join(tup)\r\n\r\n# Test the function\r\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')\r\nprint(tup_string(tup))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 132,
        "precondition": "tup is a tuple of strings."
    },
    "133": {
        "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "def sum_negativenum(num_list):\r\n    return sum([x for x in num_list if x<0])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 133,
        "precondition": "num\\_list is a list of numbers."
    },
    "135": {
        "specification": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n):\r\n    return n*(2*n-1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 135,
        "precondition": "n is an integer."
    },
    "137": {
        "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "code": "import math\ndef zero_count(arr):\r\n    zero_arr = [i for i in arr if i == 0]\r\n    non_zero_arr = [i for i in arr if i != 0]\r\n    return len(zero_arr) / len(non_zero_arr)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 137,
        "precondition": "arr is a list of integers."
    },
    "138": {
        "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    if n < 0:\r\n        return False\r\n    while n != 0:\r\n        if n % 2 == 1:\r\n            return False\r\n        n = n // 2\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 138,
        "precondition": "n is an integer."
    },
    "139": {
        "specification": "Write a function to find the circumference of a circle.",
        "code": "import math\r\ndef circle_circumference(radius):\r\n    return 2*math.pi*radius\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 139,
        "precondition": "radius is a non-negative number."
    },
    "140": {
        "specification": "Write a function to flatten the list of lists into a single set of numbers.",
        "code": "def extract_singly(lst_of_lst):\r\n    res = set() \n    for i in lst_of_lst:\r\n        res = res.union(set(i))\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 140,
        "precondition": "lst\\_of\\_lst is a list of lists."
    },
    "141": {
        "specification": "Write a function to sort a list of elements.",
        "code": "def pancake_sort(pancakes):\r\n    for i in range(len(pancakes)-1):\r\n        for j in range(len(pancakes)-1):\r\n            if pancakes[j] > pancakes[j+1]:\r\n                pancakes[j], pancakes[j+1] = pancakes[j+1], pancakes[j]\r\n    return pancakes\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 141,
        "precondition": "pancakes is a list of elements."
    },
    "142": {
        "specification": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "def count_samepair(a, b, c):\r\n    count = 0\r\n    for i in range(len(a):\r\n        if a[i] == b[i] and b[i] == c[i]{\\\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 142,
        "precondition": "a, b, and c are lists of the same length."
    },
    "143": {
        "specification": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(tup)\r\n    return len([i for i in tup if type(i) is list])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 143,
        "precondition": "tup is a tuple."
    },
    "145": {
        "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr):\r\n    return max(arr) - min(arr)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 145,
        "precondition": "arr is a list of numbers."
    },
    "160": {
        "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "def find_solution(a, b, n):\r\n    if (a, b) == (0, 0):\r\n        raise ValueError(\"Infinite solutions or no solution\")\r\n    if a == 0:\r\n        if n == 0:\r\n            return (0, 0)\r\n        else:\r\n            return None\r\n    if b == 0:\r\n        if n == 0:\r\n            return (0, 0)\r\n        else:\r\n            return None\r\n    if a > 0:\r\n        x = 1\r\n        y = (n - a) // b\r\n    else:\r\n        x = -1\r\n        y = (n + a) // b\r\n    while x * a + y * b != n:\r\n        if a > 0:\r\n            x += 1\r\n            y = (n - a * x) // b\r\n        else:\r\n            x -= 1\r\n            y = (n - a * x) // b\r\n    return (x, y)\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 160,
        "precondition": "a, b, and n are integers, with b and n not equal to 0."
    },
    "161": {
        "specification": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(lst, rem\\_lst):\r\n\tfor x in rem_lst:\r\n\t\tif x in lst:\r\n\t\t\tlst.remove(x)\r\n\treturn lst\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 161,
        "precondition": "lst and rem\\_lst are both lists."
    },
    "162": {
        "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\r\n    total = 0\r\n    for i in range(n//2 + 1):\r\n        total += n - 2 * i\r\n    return total\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 162,
        "precondition": "n is a positive integer."
    },
    "163": {
        "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "code": "import math\ndef area_polygon(l, n)\r\n    **side\\_length = l\r\n    **number\\_of\\_sides = n\r\n    **angle = (number\\_of\\_sides - 2) * (math.pi / number\\_of\\_sides)\r\n    **area = 0.5 * side\\_length ** 2 * number\\_of\\_sides * math.sin(angle)\r\n    **return area\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 163,
        "precondition": "l is a positive number and n is a positive integer greater than 2."
    },
    "164": {
        "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "def divisors(n):\r\n    divs = []\r\n    divs.append(1)\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n % i == 0:\r\n            divs.append(i)\r\n            divs.append(int(n/i))\r\n    divs = list(set(divs))\r\n    divs.sort()\r\n    return divs\r\n\r\ndef are_equivalent(x, y):\r\n    return divisors(x) == divisors(y)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 164,
        "precondition": "x and y are positive integers."
    },
    "165": {
        "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "def count_char_position(s):\r\n  return sum(1 for c in set(s) if (ord(c.lower()) - ord('a') == (ord(c.lower()) - ord('a')) % 26))\r\n  print(count_char_position(\"xbcefg\"))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 165,
        "precondition": "s is a string."
    },
    "166": {
        "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "def find_even_pair(numbers):\r\n    result = 0\r\n    for i in range(len(numbers));\r\n        for j in range(i+1, len(numbers):\r\n            if (numbers[i] ^ numbers[j]) % 2 == 0:\r\n                result += 1\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 166,
        "precondition": "numbers is a list of integers."
    },
    "167": {
        "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "code": "def next_power_of_2(n):\r\n    return 1 << (n - 1).bit_length()\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 167,
        "precondition": "n is an integer."
    },
    "168": {
        "specification": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "def frequency(numbers, n):\r\n    count = 0\r\n    for i in numbers:\r\n        if i == n:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 168,
        "precondition": "numbers is a list and n is an element in the list or not."
    },
    "170": {
        "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "def sum_range_list(lst, start, end):\r\n\treturn sum(lst[start:end+1])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 170,
        "precondition": "lst is a list, start and end are integers such that start < end."
    },
    "171": {
        "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "def perimeter_pentagon(l)\r\n    return 5 * l\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 171,
        "precondition": "l is a positive number representing the length of a side of the pentagon."
    },
    "172": {
        "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "code": "def count_occurance(str1):\r\n    return str1.count('std')\n",
        "total_tests": 5,
        "passed_tests": 5,
        "test_result": 1.0,
        "task_id": 172,
        "precondition": "str1 is a string."
    },
    "222": {
        "specification": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(tup):\r\n    t = type(tup[0])\r\n    for i in tup:\r\n        if not isinstance(i, t):\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 222,
        "precondition": "tup is a tuple."
    },
    "223": {
        "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == x:\r\n            count += 1\r\n    if count > n/2:\r\n        return True\r\n    return False\n",
        "total_tests": 4,
        "passed_tests": 3,
        "test_result": 0.75,
        "task_id": 223,
        "precondition": "arr is a sorted array of length n, and x is an integer."
    },
    "224": {
        "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "def count_Set_Bits(n):\r\n    count = 0\r\n    while (n != 0):\r\n        if (n & 1 != 0):\r\n            count += 1\r\n        n >>= 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 224,
        "precondition": "n is an integer."
    },
    "226": {
        "specification": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str1):\r\n    res = \"\"\r\n    for i in range(len(str1));\r\n        if i % 2 == 0:\r\n            res += str1[i]\r\n    return res \n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 226,
        "precondition": "str1 is a string."
    },
    "227": {
        "specification": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(x, y, z):\r\n    if x <= y and x <= z:\r\n        return x\r\n    elif y <= x and y <= z:\r\n        return y\r\n    else:\r\n        return z\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 227,
        "precondition": "x, y, and z are numbers."
    },
    "228": {
        "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n, start, end):\r\n    res = 0\r\n    for i in range(start, end+1):\r\n        res = res | (1 << i)\r\n    if (res & n) == res:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 228,
        "precondition": "n is an integer and start, end are non-negative integers such that start <= end."
    },
    "229": {
        "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "def re_arrange_array(arr, n):\r\n\tneg = []\r\n\tpos = []\r\n\tfor i in arr:\r\n\t\tif i < 0:\r\n\t\t\tneg.append(i)\r\n\t\telse:\r\n\t\t\tpos.append(i)\r\n\tfor j in range(n):\r\n\t\tif neg:\r\n\t\t\tarr[j] = neg.pop(0)\r\n\t\tif pos:\r\n\t\t\tarr[j] = pos.pop(0)\r\n\treturn arr\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 229,
        "precondition": "arr is a list and n is an integer such that 0 <= n <= len(arr)."
    },
    "230": {
        "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "def replace_blank(str1, char):\r\n    result = str1\r\n    result = result.replace(\" \", char)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 230,
        "precondition": "str1 is a string and char is a character."
    },
    "232": {
        "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "code": "def larg_nnum(lst,n):\r\n    return sorted(lst)[-n:]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 232,
        "precondition": "lst is a list of comparable elements and n is a positive integer."
    },
    "233": {
        "specification": "Write a function to find the lateral surface area of a cylinder.",
        "code": "import math\r\ndef lateralsuface_cylinder(radius, height):\r\n    return 2 * math.pi * radius * height\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 233,
        "precondition": "radius and height are positive real numbers."
    },
    "234": {
        "specification": "Write a function to find the volume of a cube given its side length.",
        "code": "def volume_cube(side\\_length):\r\n    return side_length**3\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 234,
        "precondition": "side\\_length is a positive number."
    },
    "235": {
        "specification": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n):\r\n    n = n | (n >> 1)\r\n    n = n | (n >> 2)\r\n    n = n | (n >> 4)\r\n    n = n | (n >> 8)\r\n    n = n | (n >> 16)\r\n    return n & 0xaaaaaaaa\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 235,
        "precondition": "n is an integer."
    },
    "237": {
        "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "code": "def check_occurences(lst):\r\n    result = dict()\r\n    for item in lst:\r\n        result[item] = result.get(item, 0) + 1\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 237,
        "precondition": "lst is a list of tuples."
    },
    "238": {
        "specification": "Write a python function to count the number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str1):\r\n    result = 0\r\n    for i in range(len(str1));\r\n        for j in range(i, len(str1):\r\n            result += 1\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 238,
        "precondition": "str1 is a string."
    },
    "239": {
        "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m, n):\r\n    if m <= 1:\r\n        return 0\r\n    elif n == 1:\r\n        return m\r\n    else:\r\n        return (m - 1) * get_total_number_of_sequences(m - 1, n - 1)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 239,
        "precondition": "m and n are positive integers."
    },
    "240": {
        "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "def replace_list(l1, l2):\r\n\tl1[-1:] = l2\n\treturn l1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 240,
        "precondition": "l1 and l2 are lists."
    },
    "242": {
        "specification": "Write a function to count the total number of characters in a string.",
        "code": "def count_charac(str1):\r\n    return len(str1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 242,
        "precondition": "str1 is a string."
    },
    "244": {
        "specification": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math\r\ndef next_Perfect_Square(n):\r\n    result = math.isqrt(n) \r\n    if result*result == n:\r\n        result += 1\r\n    return result*result\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 244,
        "precondition": "n is a non-negative integer."
    },
    "245": {
        "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "def max_subarray(arr,\r\n  start = 0,\r\n  end = 0,\r\n  inc = 1,\r\n  dec = 0,\r\n  max_so_far = 0,\r\n  max_ending_here = 0):\r\n  if end == len(arr):\r\n    return max_so_far\r\n  if inc == 1:\r\n    max_ending_here += arr[end]\r\n    if max_ending_here < 0:\r\n      inc = 0\r\n      dec = 1\r\n      max_ending_here = 0\r\n      max_so_far = max(max_so_far, max_ending_here)\r\n    else:\r\n      max_so_far = max(max_so_far, max_ending_here)\r\n  elif dec == 1:\r\n    max_ending_here += arr[end]\r\n    if max_ending_here > 0:\r\n      dec = 0\r\n      inc = 1\r\n      max_ending_here = 0\r\n    else:\r\n      max_so_far = max(max_so_far, max_ending_here)\r\n  end += 1\r\n  return max_subarray(arr, start, end, inc, dec, max_so_far, max_ending_here)\r\ndef max_sum(arr):\r\n  return max_subarray(arr, 0, 0, 1, 0, float('-inf'), 0)\r\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 245,
        "precondition": "arr is a list of integers."
    },
    "246": {
        "specification": "Write a function for computing square roots using the babylonian method.",
        "code": "import math\r\ndef babylonian_squareroot(number):\r\n    num = number\r\n    guess = num / 2.0\r\n    while True:\r\n        improved_guess = (guess + num / guess) / 2.0\r\n        if abs(guess - improved_guess) < 0.00000000001:\r\n            return improved_guess\r\n        guess = improved_guess\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 246,
        "precondition": "number is a non-negative float."
    },
    "247": {
        "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "def lps(string)\r\n  X = len(string)\r\n  dp = [[0 for x in range(X)] for x in range(X)]\r\n  for cl in range(X)\r\n    dp[cl][cl] = 1\r\n  for cl in range(X-1,\r\n    if string[cl] == string[cl+1]\r\n      dp[cl][cl+1] = 2\r\n    else:\r\n      dp[cl][cl+1] = 1\r\n  for sl in range(3, X + 1):\r\n    for cl in range(X - sl + 1):\r\n      if dp[cl][cl + sl - 1] < dp[cl + 1][cl + sl - 1]\r\n        dp[cl][cl + sl - 1] = dp[cl + 1][cl + sl - 1]\r\n      if string[cl] == string[cl + sl - 1]\r\n        dp[cl][cl + sl - 1] = max(dp[cl][cl + sl - 1], dp[cl + 1][cl + sl - 2] + 2)\r\n  return dp[0][X - 1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 247,
        "precondition": "string is a non-empty string."
    },
    "248": {
        "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "code": "import math\r\n\r\ndef harmonic_sum(n):\r\n    sum = 0\r\n    for i in range(2, n + 1):\r\n        sum += 1 / (i - 1)\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 248,
        "precondition": "n is a positive integer greater than 1."
    },
    "249": {
        "specification": "Write a function to find the intersection of two arrays.",
        "code": "def intersection_array(arr1, arr2):\r\n  return list(set(arr1) & set(arr2))\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 249,
        "precondition": "arr1 and arr2 are arrays (lists)."
    },
    "250": {
        "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "code": "def count_X(t, x):\r\n  return t.count(x)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 250,
        "precondition": "t is a tuple and x is an element."
    },
    "251": {
        "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "def insert_element(lst, element):\r\n    result = [element] + lst\r\n    for i in range(len(lst));\r\n        result.insert(i*2 + 1, element)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 251,
        "precondition": "lst is a list and element is an object."
    },
    "252": {
        "specification": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath\r\ndef convert(c:\r\n    r = cmath.polar(c)\r\n    return (r[0], r[1])\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 252,
        "precondition": "c is a complex number."
    },
    "253": {
        "specification": "Write a python function that returns the number of integer elements in a given list.",
        "code": "def count_integer(lst)\r\n    return sum(isinstance(i, int) for i in lst)\r\n\r\n# Test the function\r\nassert count_integer([1,2,'abc',1.2]) == 2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 253,
        "precondition": "lst is a list."
    },
    "255": {
        "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "code": "from itertools import product\r\ndef combinations_colors(my_list, n):\r\n    result = list(product(my_list, repeat=n))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 255,
        "precondition": "my\\_list is a list of elements, n is a non-negative integer."
    },
    "256": {
        "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "import math\r\ndef count_Primes_nums(n):\r\n\tif n < 2:\r\n\t\treturn 0\r\n\tcount = 0\r\n\tfor i in range(2, n):\r\n\t\tif is_prime(i):\r\n\t\t\tcount += 1\r\n\treturn count\n\ndef is_prime(n):\r\n    result = True\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = False\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 256,
        "precondition": "n is a non-negative integer."
    },
    "257": {
        "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 257,
        "precondition": "num1 and num2 are numbers."
    },
    "259": {
        "specification": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(tup1, tup2):\r\n    result = tuple(max(x, y) for x, y in zip(tup1, tup2))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 259,
        "precondition": "tup1 and tup2 are tuples with the same length."
    },
    "260": {
        "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n):\r\n    if n == 1:\r\n        return 3\r\n    else:\r\n        i = 1\r\n        while n > 1:\r\n            i = i + 2\r\n            if is_not_prime(i) == False:\r\n                n = n - 1\r\n        return i\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 260,
        "precondition": "n is a positive integer."
    },
    "261": {
        "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(x/y for x, y in zip(test_tup1, test_tup2))\r\n  return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 261,
        "precondition": "test\\_tup1 and test\\_tup2 are tuples of equal length, and all elements of the tuples are non-zero numbers."
    },
    "262": {
        "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "code": "def split_two_parts(lst, L):\r\n    return (lst[:L], lst[L:])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 262,
        "precondition": "lst is a list and L is an integer such that 0 <= L <= len(lst)"
    },
    "264": {
        "specification": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(human_age):\r\n    if human_age < 0:\r\n        return \"Invalid input\"\r\n    else:\r\n        dog_age = 10.5 * human_age\r\n        return int(dog_age)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 264,
        "precondition": "human\\_age is a non-negative integer."
    },
    "265": {
        "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "def list_split(lst, n):\r\n    result = []\r\n    for i in range(0, len(lst), n):\r\n        result.append(lst[i:n + i] )\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 265,
        "precondition": "lst is a list and n is a positive integer."
    },
    "266": {
        "specification": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "import math\r\ndef lateralsurface_cube(side\\_length):\r\n    return 4 * side_length ** 2\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 266,
        "precondition": "side\\_length is a positive real number."
    },
    "267": {
        "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "def square_Sum(n):\r\n    return sum(x**2 for x in range(1, n*2, 2))\r\n\r\nassert square_Sum(2) == 10\r\nprint(\"Test Passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 267,
        "precondition": "n is a positive integer."
    },
    "268": {
        "specification": "Write a function to find the n'th star number.",
        "code": "def find_star_num(n):\r\n    star_num = 1\r\n    count = 1\r\n    while count < n:\r\n        star_num = star_num + (star_num + 1)\r\n        count = count + 1\r\n    return star_num\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 268,
        "precondition": "n is a positive integer."
    },
    "269": {
        "specification": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(char):\r\n    return ord(char)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 269,
        "precondition": "char is a single character."
    },
    "270": {
        "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
        "code": "def sum_even_and_even_index(numbers):\r\n    res = 0\r\n    for i in range(len(numbers));\r\n        if i % 2 == 0 and numbers[i] % 2 == 0:\r\n            res += numbers[i]\r\n    return res\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 270,
        "precondition": "numbers is a list of integers."
    },
    "271": {
        "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += (2*i)**5\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 271,
        "precondition": "n is a positive integer."
    },
    "272": {
        "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "code": "def rear_extract(tuples:\r\n    return [i[-1] for i in tuples]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 272,
        "precondition": "tuples is a list of tuples."
    },
    "273": {
        "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "def substract_elements(tup1, tup2):\r\n  result = []\r\n  for i in range(len(tup1));\r\n    result.append(tup1[i] - tup2[i])\r\n  return tuple(result)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 273,
        "precondition": "tup1 and tup2 are tuples with the same length."
    },
    "274": {
        "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "import math\r\ndef binomial_coefficient(n, k):\r\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\r\n\r\ndef even_binomial_Coeff_Sum(n):\r\n    result = 0\r\n    for i in range(n + 1):\r\n        if i % 2 == 0:\r\n            result += binomial_coefficient(n, i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 274,
        "precondition": "n is a positive integer."
    },
    "276": {
        "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "code": "import math\r\ndef volume_cylinder(radius,height):\r\n    return math.pi * (radius ** 2) * height\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 276,
        "precondition": "radius and height are non-negative real numbers."
    },
    "277": {
        "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "code": "def dict_filter(d,n):\r\n    return {k: v for k, v in d.items() if v >= n}\r\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 277,
        "precondition": "d is a dictionary and n is an integer."
    },
    "278": {
        "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "code": "def count_first_elements(tup)\r\n    return sum(1 for x in tup if type(x) is not tuple)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 278,
        "precondition": "tup is a tuple."
    },
    "279": {
        "specification": "Write a function to find the nth decagonal number.",
        "code": "def num_decagonal(n):\r\n\treturn (n*(3*n-1))\r\nassert num_decagonal(3) == 27\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 279,
        "precondition": "n is a positive integer."
    },
    "280": {
        "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "def sequential_search(arr, elem):\r\n\t(result, pos) = (False, -1)\r\n\tfor i in range(len(arr));\r\n\t\tif arr[i] == elem:\r\n\t\t\tresult = True\r\n\t\t\tpos = i\r\n\t\t\tbreak\r\n\treturn (result, pos)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 280,
        "precondition": "arr is an array and elem is an element."
    },
    "281": {
        "specification": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(lst):\r\n    if len(lst) != len(set(lst));\r\n        return False\r\n    else:\r\n        return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 281,
        "precondition": "lst is a list."
    },
    "282": {
        "specification": "Write a function to subtract two lists element-wise.",
        "code": "def sub_list(list1,list2):\r\n    return [x-y for x,y in zip(list1,list2)]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 282,
        "precondition": "list1 and list2 are lists of the same length."
    },
    "283": {
        "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "def validate(n):\r\n  count = [0]*10\r\n  while n > 0:\r\n    count[n % 10] += 1\r\n    n //= 10\r\n  for i in range(10):\r\n    if i < count[i]:\r\n      return False\r\n  return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 283,
        "precondition": "n is a non-negative integer."
    },
    "284": {
        "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "def check_element(lst, element):\r\n    if all(x == element for x in lst):\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 284,
        "precondition": "lst is a list and element is any value."
    },
    "285": {
        "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "def text_match_two_three(string):\r\n    result = False\r\n    if len(string) > 2:\r\n        if string[1] == \"b\"\r\n            if len(string) > 3:\r\n                if string[2] == \"b\"\r\n                    if len(string) > 4:\r\n                        if string[3] == \"b\"\r\n                            result = True\r\n                        else:\r\n                            result = False\r\n                    else:\r\n                        if string[2] == \"b\"\r\n                            result = True\r\n                        else:\r\n                            result = False\r\n                else:\r\n                    result = False\r\n            else:\r\n                result = False\r\n           \n        else:\r\n            result = False\r\n    else:\r\n        result = False\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 285,
        "precondition": "string is a string."
    },
    "286": {
        "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(arr, k, n):\r\n    max_sum = float('-inf')\r\n    curr_sum = 0\r\n    for i in range(n):\r\n        curr_sum += arr[i]\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n    if max_sum < 0:\r\n        return 0\r\n    return max_sum * k\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 286,
        "precondition": "arr is a list, k is a positive integer, n is the length of arr."
    },
    "287": {
        "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(2,n*2,2):\r\n        sum += i**2\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 287,
        "precondition": "n is a positive integer."
    },
    "290": {
        "specification": "Write a function to find the list of maximum length in a list of lists.",
        "code": "def max_length(lst):\r\n\tmax_l = max(len(i) for i in lst)\r\n\tres = [i for i in lst if len(i) == max_l]\r\n\treturn max_l, res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 290,
        "precondition": "lst is a list of lists."
    },
    "291": {
        "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k):\r\n    if n==1:\r\n        return k\r\n    elif n==2:\r\n        return k*k\r\n    else:\r\n        return (k*(k-1)**(n-1) + (k-1)*k**(n-1))\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 291,
        "precondition": "n and k are positive integers."
    },
    "292": {
        "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "def find(num1, num2):\r\n    return num1 // num2 \n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 292,
        "precondition": "num1 and num2 are integers."
    },
    "293": {
        "specification": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    result = math.sqrt((a*a) + (b*b))\r\n    return round(result, 5)\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 293,
        "precondition": "a and b are positive numbers."
    },
    "294": {
        "specification": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(lst):\r\n    max_v = lst[0]\r\n    for i in lst:\r\n        if type(i) == type(max_v) and i > max_v:\r\n            max_v = i\r\n        elif type(i) != type(max_v) and i > max_v\r\n            max_v = i\r\n    return max_v\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 294,
        "precondition": "lst is a list of heterogeneous elements."
    },
    "295": {
        "specification": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(n):\r\n    total = 1\r\n    for i in range(2,int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            if i != n // i:\r\n                total += i\r\n                total += n // i\r\n            else:\r\n                total += i\r\n    if total == n:\r\n        total -= 1\r\n    return total\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 295,
        "precondition": "n is a non-negative integer."
    },
    "296": {
        "specification": "Write a python function to count inversions in an array.",
        "code": "def merge_sort(arr):\r\n    if len(arr) > 1:\r\n        m = len(arr)//2\r\n        L = arr[:m]\r\n        R = arr[m:]\r\n        merge_sort(L)\r\n        merge_sort(R)\r\n        i = j = k = 0\r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]:\r\n                arr[k] = L[i]\r\n                i += 1\r\n                k += 1\r\n            else:\r\n                arr[k] = R[j]\r\n                j += 1\r\n                k += 1\r\n        while i < len(L\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e):\r\n            arr[k] = L[i]\r\n            i += 1\r\n            k += 1\r\n        while j < len(R\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e):\r\n            arr[k] = R[j]\r\n            j += 1\r\n            k += 1\r\ndef get_Inv_Count(arr):\r\n    arr = merge_sort(arr)\r\n    count = 0\r\n    for i in range(len(arr)-1):\r\n        if arr[i] > arr[i+1\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e]:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 296,
        "precondition": "arr is a list of integers."
    },
    "297": {
        "specification": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(nested\\_list:\r\n    result = []\n    for i in nested\\_list:\r\n        if type(i) is not list:\r\n            result.append(i)\r\n        else:\r\n            result.extend(flatten\\_list(i))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 297,
        "precondition": "nested\\_list is a list."
    },
    "299": {
        "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "def max_aggregate(lst):\r\n    max_agg = max(lst, key = lambda x:x[1])\r\n    return max_agg\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 299,
        "precondition": "lst is a list of tuples."
    },
    "300": {
        "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "import math\r\ndef count_binary_seq(n):\r\n    dp = [[0 for x in range(n + 1)] for x in range(n + 1)]\r\n    dp[0][0] = dp[0][1] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(i + 1):\r\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\r\n    return dp[n][0] + dp[n][1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 300,
        "precondition": "n is a non-negative integer."
    },
    "301": {
        "specification": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(dictionary:\r\n    if not dictionary:\r\n        return 0\r\n    else:\r\n        keys = dictionary.keys()\r\n        sub_dic = {k: dictionary[k] for k in keys if isinstance(dictionary[k], dict)}\\\n        if sub_dic:\r\n            return 1 + dict_depth(sub_dic)\r\n        else:\r\n            return 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 301,
        "precondition": "dictionary is a dictionary."
    },
    "304": {
        "specification": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(array,indices,num,rotations:\r\n  result = array[indices[num][rotations]]\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 304,
        "precondition": "array is a list of elements, indices is a list of indices, num is an integer, rotations is an integer, and the values in the indices list are valid indices for the array list."
    },
    "305": {
        "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
        "code": "def start_withp(list\\_of\\_words):\r\n  result = []\r\n  for word in list_of_words:\r\n    if word.startswith(\"p\") or word.startswith(\"P\"):\r\n      result.append(word)\r\n      if len(result) >= 2:\r\n        return result\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 305,
        "precondition": "list\\_of\\_words is a list of strings."
    },
    "306": {
        "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(arr, n, i, k):\r\n    if i == 0:\r\n        return 0\r\n    if i == 1:\r\n        return arr[i-1]\r\n    dp = [[0 for x in range(n)] for x in range(n)] \r\n    for j in range(i,\r\n        dp[i-1][i-1] = max(dp[i-1][j] + arr[i-1], dp[i-1][i-1]) \r\n        for j in range(i-2, -1, -1):\r\n    max_sum = dp[i-1][i-1]\r\n    for j in range(i, k):\r\n        max_sum = max(max_sum, dp[i-1][j-1] + arr[j]) \r\n    return max_sum \r\n\r\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 306,
        "precondition": "arr is a list of integers, n is the length of arr, i and k are integers where 1 <= i < k <= n."
    },
    "307": {
        "specification": "Write a function to get a colon of a tuple.",
        "code": "def colon_tuplex(tup, index1, index2):\r\n    lst = list(tup)\r\n    lst[index1] = (lst[index1][:index2] + (index2,) + lst[index1][index2:] )\r\n    return tuple(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 307,
        "precondition": "tup is a tuple, index1 and index2 are integers such that 0 <= index1 < len(tup) and 0 <= index2 <= len(tup[index1])"
    },
    "308": {
        "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "def large_product(num1, num2, k):\r\n  num1.sort()\r\n  num2.sort()\r\n  result = []\r\n  for i in range(len(num1)-1, -1, -1):\r\n    for j in range(len(num2)-1, -1, -1):\r\n      if len(result) == k:\r\n        return result\r\n      result.append(num1[i]*num2[j]*\r\n        num1.remove(num1[i]))\r\n        num2.remove(num2[j]))\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 308,
        "precondition": "num1 and num2 are lists of integers, and k is an integer such that 0 <= k <= len(num1) \\* len(num2)."
    },
    "309": {
        "specification": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(a, b):\r\n    if a > b:\r\n        return a\r\n    else:\r\n        return b\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 309,
        "precondition": "a and b are real numbers."
    },
    "310": {
        "specification": "Write a function to convert a given string to a tuple of characters.",
        "code": "def string_to_tuple(input\\_string):\r\n  return tuple(input_string)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 310,
        "precondition": "input\\_string is a string."
    },
    "311": {
        "specification": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n):\r\n    count = 0\r\n    while n & 1 == 0:\r\n        n = n >> 1\r\n        count += 1\r\n    return n << (count + 1)\r\nprint(set_left_most_unset_bit(10))\r\n14\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 311,
        "precondition": "n is an integer."
    },
    "312": {
        "specification": "Write a function to find the volume of a cone.",
        "code": "import math\r\ndef volume_cone(r, h):\r\n    return (1/3)*math.pi*(r**2)*h\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 312,
        "precondition": "r and h are positive real numbers."
    },
    "388": {
        "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n):\r\n    result = 1\r\n    while result < n:\r\n        result = 2 * result\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 388,
        "precondition": "n is a positive integer."
    },
    "389": {
        "specification": "Write a function to find the n'th lucas number.",
        "code": "def find_lucas(n):\r\n  if n == 0:\r\n    return 2\r\n  elif n == 1:\r\n    return 1\r\n  else:\r\n    return find_lucas(n-1) + find_lucas(n-2)\r\n\r\nassert find_lucas(9) == 76\r\nprint(find_lucas(9))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 389,
        "precondition": "n is a non-negative integer."
    },
    "390": {
        "specification": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "def add_string(lst,fmt):\r\n    return [fmt.format(x) for x in lst]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 390,
        "precondition": "lst is a list of objects and fmt is a format string."
    },
    "391": {
        "specification": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(keys, values1, values2):\r\n  result = [dict(zip(values1, [{keys[i]: {values2[i]: j}}))\r\n                  )) for i, j in enumerate(values2)]\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 391,
        "precondition": "keys, values1, and values2 are all lists of the same length."
    },
    "392": {
        "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "memo = {}\r\ndef get_max_sum(n):\r\n    if n in memo:\r\n        return memo[n]\r\n    if n <= 0:\r\n        memo[n] = 0\r\n        return 0\r\n    elif n == 1:\r\n        memo[n] = 1\r\n        return 1\r\n    else:\r\n        memo[n] = max(get_max_sum(int(n/2)), get_max_sum(int(n/3)), get_max_sum(int(n/4)), get_max_sum(int(n/5))\r\n        return memo[n]\r\n\r\nprint(get_max_sum(60))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 392,
        "precondition": "n is a non-negative integer."
    },
    "393": {
        "specification": "Write a function to find the list with maximum length.",
        "code": "def max_length_list(L):\r\n  max_length = max(len(sublist) for sublist in L)\r\n  max_length_list = [sublist for sublist in L if len(sublist) == max_length]\r\n  return (max_length, max_length_list[0] if len(max_length_list) == 1 else max_length_list)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 393,
        "precondition": "L is a list of lists, and the lengths of the sublists are all non-negative integers."
    },
    "394": {
        "specification": "Write a function to check if given tuple contains no duplicates.",
        "code": "def check_distinct(tup):\r\n    tup_set = set(tup)\r\n    if len(tup_set) < len(tup):\r\n        return False\r\n    else:\r\n        return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 394,
        "precondition": "tup is a tuple."
    },
    "395": {
        "specification": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(s):\r\n  for i in s:\r\n    if s.count(i) == 1:\r\n      return i\r\n    else:\r\n      pass\r\n  return None\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 395,
        "precondition": "s is a string."
    },
    "396": {
        "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "def check_char(string):\r\n    if len(string) > 0 and string[0] == string[-1\u7f00]\r\n        return \"Valid\"\r\n    else:\r\n        return \"Not valid\"\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 396,
        "precondition": "string is a string."
    },
    "397": {
        "specification": "Write a function to find the median of three numbers.",
        "code": "def median_numbers(*args):\r\n    args = sorted(args)\r\n    l = len(args)\r\n    if l == 1:\r\n        return args[0]\r\n    elif l == 2:\r\n        return (args[0] + args[1])/2\r\n    else:\r\n        return args[int(l/2)]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 397,
        "precondition": "args is a variable number of numbers."
    },
    "398": {
        "specification": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(num\\_list):\r\n    res = 0\r\n    for i in num\\_list:\r\n        res += sum(int(digit) for digit in str(i))\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 398,
        "precondition": "num\\_list is a list of integers."
    },
    "399": {
        "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(tup1, tup2):\r\n    return tuple(a ^ b for a, b in zip(tup1, tup2))\r\n               \nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\r\nassert bitwise_xor((2, 3, 5), (5, 6, 7)) == (7, 5, 4)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 399,
        "precondition": "tup1 and tup2 are tuples of equal length."
    },
    "400": {
        "specification": "Write a function to extract the number of unique tuples in the given list.",
        "code": "def extract_freq(lst):\r\n  return len(set(map(tuple, set(map(tuple, lst))))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 400,
        "precondition": "lst is a list of tuples."
    },
    "401": {
        "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(tup1, tup2):\r\n    return tuple(tuple(sum(x) for x in zip(t1, t2)) for t1, t2 in zip(tup1, tup2))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 401,
        "precondition": "tup1 and tup2 are tuples of tuples with the same length."
    },
    "404": {
        "specification": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(x, y):\r\n  if x < y:\r\n    return x\r\n  else:\r\n    return y\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 404,
        "precondition": "x and y are numbers."
    },
    "405": {
        "specification": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tuplex, element):\r\n    if element in tuplex:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 405,
        "precondition": "tuplex is a tuple."
    },
    "406": {
        "specification": "Write a python function to find whether the parity of a given number is odd.",
        "code": "def find_Parity(num):\r\n    if num % 2 == 0:\r\n        return False\r\n    else:\r\n        return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 406,
        "precondition": "num is an integer."
    },
    "407": {
        "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\r\n    l = list(str(n))\r\n    l.sort(reverse=True)\r\n    res = \"\".join(l)\r\n    return int(res)\r\nprint(rearrange_bigger(12))\r\nprint(rearrange_bigger(512))\r\nprint(rearrange_bigger(1112))\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 407,
        "precondition": "n is a positive integer."
    },
    "408": {
        "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "def k_smallest_pairs(a, b, k):\r\n    pair\\_list = [[x, y] for x in a for y in b]\r\n    pair\\_list.sort()\r\n    result = []\r\n    for i in range(min(len(pair\\_list), k):\r\n        result.append(pair\\_list[i])\\\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 408,
        "precondition": "a and b are lists of integers, k is a positive integer and k <= n where n is the number of elements in the resultant list."
    },
    "409": {
        "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(tuples:\r\n    min_product = float(\"inf\")\r\n    for t in tuples:\r\n        product = t[0]*t[1]\r\n        if product < min_product:\r\n            min_product = product\r\n    return min_product\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 409,
        "precondition": "tuples is a list of tuples where each tuple contains two numbers."
    },
    "410": {
        "specification": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(lst):\r\n\treturn min([i for i in lst if isinstance(i, (int, float))])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 410,
        "precondition": "lst is a list containing at least one integer or float."
    },
    "411": {
        "specification": "Write a function to convert the given snake case string to camel case string.",
        "code": "def snake_to_camel(snake\\_case\\_string):\r\n    return \"\".join(x.title() for x in snake\\_case\\_string.split(\"_\"))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 411,
        "precondition": "snake\\_case\\_string is a string containing only lowercase letters, underscores, and digits."
    },
    "412": {
        "specification": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(l:\r\n  return list(filter(lambda x: x % 2 == 0, l))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 412,
        "precondition": "l is a list of integers."
    },
    "413": {
        "specification": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list_of_tuples, n):\r\n    res = [x[n] for x in list_of_tuples]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 413,
        "precondition": "list\\_of\\_tuples is a list of tuples and n is an integer."
    },
    "414": {
        "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "code": "def overlapping(seq1, seq2):\r\n    result = False\r\n    for i in seq1:\r\n        if i in seq2:\r\n            result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 414,
        "precondition": "seq1 and seq2 are sequences (e.g. lists, tuples)."
    },
    "415": {
        "specification": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(numbers):\r\n    max_product = (numbers[0], numbers[1])\r\n    for i in range(len(numbers)-1):\r\n        for j in range(i+1, len(numbers));\r\n            if numbers[i]*numbers[j] > max_product[0]*max_product[1]:\r\n                max_product = (numbers[i], numbers[j])\n    return max_product\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 415,
        "precondition": "numbers is a non-empty list of integers."
    },
    "417": {
        "specification": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(my\\_tuples):\r\n    result = []\r\n    for i in my\\_tuples:\r\n        if result == []:\r\n            result.append(i)\r\n        else:\r\n            if i[0] == result[-1][-1][0]:\r\n                result[-1] += i\r\n            else:\r\n                result.append(i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 417,
        "precondition": "my\\_tuples is a list of tuples."
    },
    "418": {
        "specification": "Write a python function to find the element of a list having maximum length.",
        "code": "def Find_Max(lists):\r\n    return max(lists, key=len)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 418,
        "precondition": "lists is a list containing only lists."
    },
    "419": {
        "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(numbers):\r\n  r = [round(i,2) for i in numbers]\r\n  return sum(r) * len(r)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 419,
        "precondition": "numbers is a list of numbers."
    },
    "420": {
        "specification": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum = sum + (2*i)**3\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 420,
        "precondition": "n is a positive integer."
    },
    "421": {
        "specification": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(tup):\r\n    result = \"\"\r\n    for i in tup:\r\n        result += str(i) + \"-\"\r\n    return result[:-1]\r\n   \nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")\r\n) == 'ID-is-4-UTS'\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 421,
        "precondition": "tup is a tuple of arbitrary elements."
    },
    "422": {
        "specification": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):\r\n    result = sum([i**3 for i in range(1, n+1)])/n\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 422,
        "precondition": "n is a positive integer."
    },
    "424": {
        "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(tup WARRANTED):\r\n  res = tuple(x[-1:] for x in tup WARRANTED)\r\n  return (res)\r\n  pass\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 424,
        "precondition": "tup WARRANTED is a tuple of strings."
    },
    "425": {
        "specification": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(lst, element):\r\n    count = 0\r\n    for i in lst:\r\n        if element in i:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 425,
        "precondition": "lst is a list and element is any object."
    },
    "426": {
        "specification": "Write a function to filter odd numbers.",
        "code": "def filter_oddnumbers(numbers):\r\n    return [x for x in numbers if x % 2 != 0]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 426,
        "precondition": "numbers is a list of integers."
    },
    "427": {
        "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "def change_date_format(date):\r\n    date_list = date.split(\"-\")\r\n    return date_list[2] + \"-\" + date_list[1] + \"-\" + date_list[0]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 427,
        "precondition": "date is a string in \"yyyy-mm-dd\" format."
    },
    "428": {
        "specification": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(array):\r\n    gap = len(array) \r\n    while gap > 1:\r\n        gap = int(gap/2)\r\n        for i in range(gap, len(array), gap):\r\n            j = i\r\n            while j >= gap and array[j] < array[j-gap]:\r\n                array[j], array[j-gap] = array[j-gap], array[j]\r\n                j -= gap\r\n    return array\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 428,
        "precondition": "array is a list of comparable elements."
    },
    "429": {
        "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(tup1, tup2):\r\n    return tuple(min(x, y) for x, y in zip(tup1, tup2))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 429,
        "precondition": "tup1 and tup2 are tuples of the same length."
    },
    "430": {
        "specification": "Write a function to find the directrix of a parabola.",
        "code": "import math\r\ndef parabola_directrix(p,d,h):\r\n    return -2*p*h + d\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 430,
        "precondition": "p, d, and h are all real numbers, where p is the coefficient of the x^2 term, d is the distance from the vertex to the directrix, and h is the y-coordinate of the vertex of the parabola."
    },
    "431": {
        "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\r\n    return len(set(list1) & set(list2)) > 0\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 431,
        "precondition": "list1 and list2 are lists."
    },
    "432": {
        "specification": "Write a function to find the median length of a trapezium.",
        "code": "def median_trapezium(base1, base2, height):\r\n    median = (base1 + base2) / 2\r\n    area = (base1 + base2) * height\r\n    median_length = (2 * area) / median\r\n    return median_length\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 432,
        "precondition": "base1, base2, and height are positive real numbers."
    },
    "433": {
        "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr,n):\r\n    for i in arr:\r\n        if n <= i:\r\n            return True \r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 433,
        "precondition": "arr is a list of integers and n is an integer."
    },
    "434": {
        "specification": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\r\ndef text_match_one(text):\r\n    pattern = r'ab+'\r\n    match = re.search(pattern, text)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 434,
        "precondition": "text is a string."
    },
    "435": {
        "specification": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n):\r\n    return n % 10\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 435,
        "precondition": "n is an integer."
    },
    "436": {
        "specification": "Write a python function to return the negative numbers in a list.",
        "code": "def neg_nos(numbers):\r\n\treturn [num for num in numbers if num < 0]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 436,
        "precondition": "numbers is a list of numbers."
    },
    "437": {
        "specification": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(test\\_string):\r\n  result = ''.join(char for char in test_string if int(char) % 2 == 0)\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 437,
        "precondition": "test\\_string is a string."
    },
    "438": {
        "specification": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(lst)\n ):\r\n    count = 0\r\n    for i in lst:\r\n        for j in lst:\r\n            if i[0] == j[1] and i[1] == j[0] and i != j:\r\n                count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 438,
        "precondition": "lst is a list of tuples."
    },
    "439": {
        "specification": "Write a function to join a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(numbers):\r\n    res = \"\"\r\n    for number in numbers:\r\n        res += str(number)\r\n    return int(res)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 439,
        "precondition": "numbers is a list of integers."
    },
    "440": {
        "specification": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "import re\r\ndef find_adverb_position(sentence):\r\n    words = re.findall(r'\\w+', sentence)\r\n    positions = []\r\n    for i, word in enumerate(words):\r\n        if word in [\"very\", \"extremely\", \"slightly\", \"fairly\", \"quite\", \"really\"]:\r\n            positions.append(i)\r\n    if len(positions) > 0:\r\n        return positions[0], positions[-1], words[positions[0]]\r\n    else:\r\n        return -1, -1, \"\"\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 440,
        "precondition": "sentence is a string."
    },
    "441": {
        "specification": "Write a function to find the surface area of a cube of a given size.",
        "code": "import math\r\ndef surfacearea_cube(a):\r\n    return 6*a**2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 441,
        "precondition": "a is a positive real number representing the side length of the cube."
    },
    "442": {
        "specification": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "def positive_count(numbers):\r\n    result = len([i for i in numbers if i > 0])\r\n    return result / len(numbers)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 442,
        "precondition": "numbers is a list of integers."
    },
    "443": {
        "specification": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(numbers):\r\n  return max(filter(lambda x: x<0, numbers))\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 443,
        "precondition": "numbers is a list of integers."
    },
    "444": {
        "specification": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(test_list, k):\r\n    res = []\r\n    for i in range(len(test_list));\r\n        res.append((test_list[i][k-1]))\r\n    )\r\n    return (tuple(res))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 444,
        "precondition": "test\\_list is a list of tuples and k is an integer."
    },
    "445": {
        "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(t1, t2):\r\n    if len(t1) != len(t2):\r\n        return \"Error: The two tuples are not of the same length\"\r\n    else:\r\n        result = []\r\n        for i in range(len(t1)):\r\n            result.append((t1[i][0] * t2[i][0], t1[i][1] * t2[i][1]))\r\n        return tuple(result)\r\n\r\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 445,
        "precondition": "t1 and t2 are tuples of tuples, and both tuples have the same length."
    },
    "446": {
        "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "def count_Occurrence(tup, lst):\r\n    occurrence = 0\r\n    for i in lst:\r\n        for j in tup:\r\n            if i == j:\r\n                occurrence += 1\r\n    return occurrence\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 446,
        "precondition": "tup is a tuple and lst is a list."
    },
    "447": {
        "specification": "Write a function to find cubes of individual elements in a list.",
        "code": "def cube_nums(numbers):\r\n    return [x**3 for x in numbers]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 447,
        "precondition": "numbers is a list of integers."
    },
    "448": {
        "specification": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n):\r\n    if n<= 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        a, b, c = 0, 1, 2\r\n        sum = 3\r\n        while n > 2:\r\n            a, b, c = b, c, b + c\r\n            sum += c\r\n            n -= 1\r\n        return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 448,
        "precondition": "n is a non-negative integer."
    },
    "450": {
        "specification": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "def extract_string(str_list, size):\r\n\treturn [x for x in str_list if len(x) == size]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 450,
        "precondition": "str\\_list is a list of strings and size is an integer."
    },
    "451": {
        "specification": "Write a function to remove all whitespaces from the given string.",
        "code": "def remove_whitespaces(s):\r\n    return ''.join(s.split())\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 451,
        "precondition": "s is a string."
    },
    "452": {
        "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "def loss_amount(selling_price,cost_price):\r\n    if selling_price < cost_price:\r\n        return (cost_price - selling_price)\r\n    else:\r\n        return 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 452,
        "precondition": "selling\\_price and cost\\_price are non-negative numbers."
    },
    "453": {
        "specification": "Write a python function to find the sum of even factors of a number.",
        "code": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if n % 2 == 0:\r\n            sum += i\r\n        elif n % i == 0:\r\n            if i % 2 == 0:\r\n                sum += i\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 453,
        "precondition": "n is a non-negative integer."
    },
    "454": {
        "specification": "Write a function that matches a word containing 'z'.",
        "code": "def text_match_wordz(text):\r\n    result = False\r\n    if 'z' in text:\r\n        result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 454,
        "precondition": "text is a string."
    },
    "455": {
        "specification": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(month:\r\n    if month in [1,3,5,7,8,10,12]:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 455,
        "precondition": "month is an integer from 1 to 12."
    },
    "456": {
        "specification": "Write a function to reverse each string in a given list of string values.",
        "code": "def reverse_string_list(test\\_list):\r\n\treturn [i[::-1] for i in test_list]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 456,
        "precondition": "test\\_list is a list of strings."
    },
    "457": {
        "specification": "Write a python function to find the sublist having minimum length.",
        "code": "def Find_Min(lst):\r\n    min_len = len(lst[0])\r\n    res = lst[0]\r\n    for i in range(len(lst));\r\n        if len(lst[i]) < min_len:\r\n            min_len = len(lst[i])\r\n            res = lst[i]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 457,
        "precondition": "lst is a list of lists having at least one element."
    },
    "458": {
        "specification": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(length, width):\r\n    return length * width\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 458,
        "precondition": "length and width are numbers."
    },
    "459": {
        "specification": "Write a function to remove uppercase substrings from a given string.",
        "code": "def remove_uppercase(test_string):\r\n    res = '' \r\n    for char in test_string:\r\n        if char.islower():\r\n            res += char \r\n    return res\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 459,
        "precondition": "test\\_string is a string."
    },
    "460": {
        "specification": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(sublists):\r\n  return [sub[0] for sub in sublists]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 460,
        "precondition": "sublists is a list of lists with at least one element in each sublist."
    },
    "461": {
        "specification": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str1):\r\n    return sum(1 for c in str1 if c.isupper())\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 461,
        "precondition": "str1 is a string."
    },
    "462": {
        "specification": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(l:\r\n    result = []\r\n    for i in range(len(l)+1):\r\n        for j in range(i,\r\n            result.append(l[:i]))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 462,
        "precondition": "l is a list of any type of elements."
    },
    "463": {
        "specification": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr)\r\n  max_value = max_neg_value = max_ending_here = 1\r\n  for i in range(len(arr):\r\n    if arr[i] < 0:\r\n      max_neg_value = max(max_neg_value * arr[i], arr[i])\r\n      max_ending_here = max(max_ending_here * arr[i], max_neg_value, arr[i])\r\n      max_value = max(max_value, max_ending_here)\r\n    else:\r\n      max_ending_here = max(1, max_ending_here * arr[i] )\r\n      max_value = max(max_value, max_ending_here)\r\n  return max_value\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 463,
        "precondition": "arr is a list of numbers."
    },
    "464": {
        "specification": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(dic, val):\r\n    for value in dic.values():\r\n        if value != val:\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 464,
        "precondition": "dic is a dictionary, val is a value."
    },
    "465": {
        "specification": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(d:\r\n    res = {k: v for k, v in d.items() if v is not None}\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 465,
        "precondition": "d is a dictionary."
    },
    "468": {
        "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_sub_product(arr):\r\n    if len(arr) <= 1:\r\n        return arr[0]\r\n    dp_pos = [0] * len(arr)\r\n    dp_neg = [0] * len(arr)\r\n    dp_pos[0] = arr[0]\r\n    dp_neg[0] = arr[0]\r\n    mx = arr[0]\r\n    for i in range(1, len(arr):\r\n        dp_pos[i] = max(dp_pos[i-1] * arr[i], dp_neg[i-1] * arr[i], arr[i])\r\n        dp_neg[i] = min(dp_pos[i-1] * arr[i], dp_neg[i-1] * arr[i], arr[i])\r\n        mx = max(mx, dp_pos[i])\r\n    return mx\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 468,
        "precondition": "arr is a list of numbers."
    },
    "470": {
        "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "def add_pairwise(tup)\r\n    result = []\r\n    for i in range(len(tup)-1):\r\n        result.append(tup[i] + tup[i+1])\r\n    return tuple(result)\r\n\r\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 470,
        "precondition": "tup is a tuple of integers."
    },
    "471": {
        "specification": "Write a python function to find the product of the array multiplication modulo n.",
        "code": "def find_remainder(arr, n):\r\n    prod = 1\r\n    for i in arr:\r\n        prod = (prod * i) % n\r\n    return prod % n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 471,
        "precondition": "arr is a list of integers and n is a positive integer."
    },
    "472": {
        "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(lst):\r\n    return all(x == y or y - x == 1 for x, y in zip(lst, lst[1:]))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 472,
        "precondition": "lst is a list of integers with at least two elements."
    },
    "473": {
        "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(lst1, lst2):\r\n    return tuple(set(tuple(sorted(x)) for x in lst1) & set(tuple(sorted(x)) for x in lst2))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 473,
        "precondition": "lst1 and lst2 are lists of tuples."
    },
    "474": {
        "specification": "Write a function to replace characters in a string.",
        "code": "def replace_char(input_str,char1,char2):\r\n    result = input_str\r\n    for i in range(len(input_str))\r\n        if input_str[i] == char1:\r\n            result = result[:i] + char2 + result[i+1:]\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 474,
        "precondition": "input\\_str is a string, char1 and char2 are single characters"
    },
    "475": {
        "specification": "Write a function to sort a dictionary by value.",
        "code": "from collections import Counter\r\ndef sort_counter(counter\\_dict):\r\n    return sorted(counter\\_dict.items(), key=lambda x:x[1] ,reverse=True)\r\n\r\n# Test\r\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)] \r\nprint(\"Test Passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 475,
        "precondition": "counter\\_dict is a dictionary."
    },
    "476": {
        "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(arr):\r\n    res = max(arr) + min(arr)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 476,
        "precondition": "arr is a non-empty list of numbers."
    },
    "477": {
        "specification": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(test_string):\r\n    return test_string.lower()\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 477,
        "precondition": "test\\_string is a string."
    },
    "478": {
        "specification": "Write a function to remove lowercase substrings from a given string.",
        "code": "def remove_lowercase(s):\r\n  return ''.join(c for c in s if c.isupper())\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 478,
        "precondition": "s is a string."
    },
    "479": {
        "specification": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n):\r\n    while n >= 10:\r\n        n = int(str(n)[0])\r\n    return n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 479,
        "precondition": "n is an integer."
    },
    "554": {
        "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
        "code": "def Split(numbers:\r\n    return [x for x in numbers if x % 2 != 0]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 554,
        "precondition": "numbers is a list of integers."
    },
    "555": {
        "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "def sum_of_n_natural_numbers(n):\r\n    return (n*(n+1))/2\r\ndef sum_of_cubes(n):\r\n    return (n*(n+1)*(2*n+1))/6\r\ndef difference(n):\r\n    return abs(sum_of_cubes(n) - sum_of_n_natural_numbers(n)**3)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 555,
        "precondition": "n is a non-negative integer."
    },
    "556": {
        "specification": "Write a python function to count the number of pairs whose xor value is odd.",
        "code": "def find_Odd_Pair(arr, n)\r\n  count = 0\r\n  for i in range(n\r\n    for j in range(n\r\n      if i != j\r\n        if (arr[i] ^ arr[j]) & 1\r\n          count = count + 1\n  return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 556,
        "precondition": "arr is a list of integers, n is an integer and n is the length of arr."
    },
    "557": {
        "specification": "Write a function to toggle the case of all characters in a string.",
        "code": "def toggle_string(s):\r\n    res = \"\"\r\n    for i in s:\r\n        if i.isupper():\r\n            res += i.lower()\r\n        elif i.islower:\r\n            res += i.upper()\r\n        else:\r\n            res += i\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 557,
        "precondition": "s is a string."
    },
    "558": {
        "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
        "code": "def digit_distance_nums(num1, num2):\r\n    str_num1 = str(num1)\r\n    str_num2 = str(num2)\r\n    if len(str_num1) != len(str_num2):\r\n        return -1\r\n    else:\r\n        sum = 0\r\n        for i in range(len(str_num1));\r\n            sum += abs(int(str_num1[i]) - int(str_num2[i]))\r\n        return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 558,
        "precondition": "num1 and num2 are integers and have the same number of digits."
    },
    "559": {
        "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "code": "def max_sub_array_sum(a, n)\r\n{\r\n\tmax_so_far = a[0]\r\n\tcurr_max = a[0]\r\n\tfor i in range(1, n):\r\n\t\tcurr_max = max(a[i], curr_max + a[i));\r\n\t\tmax_so_far = max(max_so_far, curr_max)\r\n\treturn max_so_far\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 559,
        "precondition": "a is a list of integers, n is the length of the list a."
    },
    "560": {
        "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "code": "def union_elements(tup1, tup2):\r\n  res = tuple(sorted(set(tup1) | set(tup2))\r\n  return (res)\r\n \nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 560,
        "precondition": "tup1 and tup2 are tuples."
    },
    "562": {
        "specification": "Write a python function to find the length of the longest sublists.",
        "code": "def Find_Max_Length(lst /***/\n    return max(len(sublst) for sublst in lst)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 562,
        "precondition": "lst is a list of lists."
    },
    "563": {
        "specification": "Write a function to extract values between quotation marks from a string.",
        "code": "def extract_values(s\",\r\n  result = []\r\n  start = 0\r\n  while start < len(s):\r\n    if s[start] == '\"':\r\n      end = start + 1\r\n      while s[end] != '\"':\r\n        if s[end] == '\\\\' and s[end + 1] == '\"':\r\n          end += 2\r\n        else:\r\n          end += 1\r\n      result.append(s[start + 1:end])\r\n      start = end + 1\r\n    else:\r\n      start += 1\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 563,
        "precondition": "s is a string."
    },
    "564": {
        "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "def count_Pairs(a,n):\r\n    result = 0\r\n    count = 0\r\n    for i in a:\r\n        for j in a:\r\n            if i != j:\r\n                result += 1\r\n    return result//2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 564,
        "precondition": "a is a list of integers, n is the length of the list a."
    },
    "565": {
        "specification": "Write a python function to split a string into characters.",
        "code": "def split(string):\r\n    return list(string)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 565,
        "precondition": "string is a string."
    },
    "566": {
        "specification": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "def sum_digits(n):\r\n    sum = 0\r\n    while n:\r\n        sum += n % 10\r\n        n //= 10\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 566,
        "precondition": "n is an integer."
    },
    "567": {
        "specification": "Write a function to check whether a specified list is sorted or not.",
        "code": "def issort_list(lst):\r\n    return lst == sorted(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 567,
        "precondition": "lst is a list."
    },
    "568": {
        "specification": "Write a function to create a list of N empty dictionaries.",
        "code": "def empty_list(n):\r\n  return [{}]*n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 568,
        "precondition": "n is a non-negative integer."
    },
    "569": {
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "def sort_sublists(lst\r\n{\r\n    return [sorted(sub) for sub in lst]\r\n\r\n# Test the function\r\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 569,
        "precondition": "lst is a list of lists, and all elements of lst are strings."
    },
    "572": {
        "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
        "code": "def two_unique_nums(lst):\r\n    res = []\r\n    for sublist in lst:\r\n        for i in sublist:\r\n            if i not in res:\r\n                res.append(i)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 572,
        "precondition": ""
    },
    "573": {
        "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
        "code": "def unique_product(numbers):\r\n\tunique_list = list(set(numbers))\r\n\tproduct = 1\r\n\tfor i in unique_list:\r\n\t\tproduct *= i\r\n\treturn product\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 573,
        "precondition": "numbers is a list of numbers."
    },
    "574": {
        "specification": "Write a function to find the surface area of a cylinder.",
        "code": "import math\r\ndef surfacearea_cylinder(radius, height):\r\n    surface_area = 2*math.pi*radius*(height + radius)\r\n    return round(surface_area, 2)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 574,
        "precondition": "radius and height are positive real numbers."
    },
    "576": {
        "specification": "Write a python function to check whether a list is sublist of another or not.",
        "code": "def is_Sub_Array(super_list, sub_list):\r\n    for i in range(len(super_list) - len(sub_list) + 1):\r\n        if super_list[i:i + len(sub_list)] == sub_list:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 576,
        "precondition": "super\\_list and sub\\_list are lists."
    },
    "577": {
        "specification": "Write a python function to find the last digit in factorial of a given number.",
        "code": "def fact(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * fact(n-1)\r\n\r\ndef last_Digit_Factorial(n):\r\n    return fact(n) % 10\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 577,
        "precondition": "n is a non-negative integer."
    },
    "578": {
        "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "code": "def interleave_lists(*args):\r\n  result = []\r\n  for i in range(len(args[0])):\r\n    for j in range(len(args):\r\n      result.append(args[j][i])\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 578,
        "precondition": "All lists in `args` have the same length."
    },
    "579": {
        "specification": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "def find_dissimilar(tup1, tup2):\r\n    res = tuple(set(tup1) ^ set(tup2))\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 579,
        "precondition": "tup1 and tup2 are tuples."
    },
    "580": {
        "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "def extract_even(arg)\r\n    if type(arg) == tuple:\r\n        res = ()\r\n        for i in arg:\r\n            if type(i) == tuple:\r\n                res += (extract_even(i),)\r\n            elif i % 2 == 0:\r\n                res += (i,)\r\n        return res\r\n    else:\r\n        if arg % 2 == 0:\r\n            return arg\r\n        else:\r\n            return ()\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 580,
        "precondition": "arg is a single value or a mixed tuple."
    },
    "581": {
        "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "code": "import math\r\ndef surface_Area(base_edge, height):\r\n    result = 0\r\n    result = 4*base_edge**2 + math.sqrt(4*base_edge**2 + height**2)*base_edge*4\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 581,
        "precondition": "base\\_edge and height are positive real numbers."
    },
    "582": {
        "specification": "Write a function to check if a dictionary is empty",
        "code": "def my_dict(d:\r\n    if not bool(d):\r\n        return True\r\n    return False\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 582,
        "precondition": "d is a dictionary."
    },
    "583": {
        "specification": "Write a function which returns nth catalan number.",
        "code": "import math\r\ndef catalan_number(n):\r\n    if n == 0:\r\n        return 1\r\n    num = 2*\r\n    for i in range(2, n + 1):\r\n        num = num * (4 * i - 2) * (4 * i - 4)\r\n        num = num // (i + 1) // i\r\n    return num // 2\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 583,
        "precondition": "n is a non-negative integer."
    },
    "584": {
        "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "def find_adverbs(text):\r\n    words = text.split()\r\n    adverb = [word for word in words if word.endswith(\"ly\")\r\n    if len(adverb) > 0:\r\n        pos = words.index(adverb[0])\r\n        return str(pos) + \"-\" + str(pos + len(adverb[0])) + \": \" + adverb[0]\r\n    else:\r\n        return \"No adverb ending with ly found\"\r\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 584,
        "precondition": "text is a string."
    },
    "585": {
        "specification": "Write a function to find the n most expensive items in a given dataset.",
        "code": "def expensive_items(lst, n):\r\n    return sorted(lst, key=lambda x:x['price'], reverse=True)[:n]\r\n    #return sorted(lst, key=itemgetter('price'), reverse=True)[:n]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 585,
        "precondition": "lst is a list of dictionaries, where each dictionary represents an item and has a 'price' key, and n is a positive integer less than or equal to the length of the list."
    },
    "586": {
        "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "code": "def split_Arr(lst,n):\r\n    return lst[n:] + lst[:n]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 586,
        "precondition": "lst is a list, n is an integer."
    },
    "587": {
        "specification": "Write a function to convert a list to a tuple.",
        "code": "def list_tuple(lst):\r\n    return tuple(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 587,
        "precondition": "lst is a list."
    },
    "588": {
        "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
        "code": "def big_diff(lst):\r\n    return max(lst) - min(lst)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 588,
        "precondition": "lst is a list of numbers."
    },
    "589": {
        "specification": "Write a function to find perfect squares between two given numbers.",
        "code": "def perfect_squares(start, end):\r\n    return [x*x for x in range(int(start**0.5),int(end**0.5)+1) if x*x >= start]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 589,
        "precondition": "start and end are integers such that start <= end."
    },
    "590": {
        "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
        "code": "import cmath\r\ndef polar_rect(r, theta):\r\n\tx = r * cmath.cos(theta)\r\n\ty = r * cmath.sin(theta)\r\n\treturn (x,y)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 590,
        "precondition": "r is a non-negative real number and theta is a real number."
    },
    "591": {
        "specification": "Write a python function to interchange the first and last elements in a list.",
        "code": "def swap_List(input\\_list):\r\n    length = len(input\\_list)\r\n    if length > 1:\r\n        temp = input\\_list[0]\r\n        input\\_list[0] = input\\_list[length - 1]\r\n        input\\_list[length - 1] = temp\r\n    return input\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 591,
        "precondition": "input\\_list is a list with a length greater than or equal to 1."
    },
    "592": {
        "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "import math\r\nn = 3\r\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\n\r\ndef binomial(n, k):\r\n    return int(factorial(n) / (factorial(k) * factorial(n-k))\r\n\r\ndef sum_Of_product(n):\r\n    result = 0\r\n    for i in range(1, n)\r\n        result += binomial(n-1, i-1) * binomial(n, i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 592,
        "precondition": "n is a positive integer."
    },
    "593": {
        "specification": "Write a function to remove leading zeroes from an ip address.",
        "code": "def removezero_ip(ip)\r\n    return '.'.join([ele for ele in ip.split('.') if ele != '0'])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 593,
        "precondition": "ip is a string representing an IP address with or without leading zeroes."
    },
    "594": {
        "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "def diff_even_odd(lst):\r\n  even_lst = [i for i in lst if i % 2 == 0]\r\n  odd_lst = [i for i in lst if i % 2 != 0]\r\n  if len(even_lst) > 0 and len(odd_lst) > 0:\r\n    return even_lst[0] - odd_lst[0]\r\n  return 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 594,
        "precondition": "lst is a list of integers."
    },
    "595": {
        "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "def min_Swaps(a, b)\r\n{\r\n  count = 0\r\n  for i in range(len(a)){\r\n    if a[i] != b[i];\r\n      count += 1\r\n  }\r\n  return int(count/2)\r\n}\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 595,
        "precondition": "a and b are strings representing binary numbers of the same length."
    },
    "596": {
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "code": "import sys\r\ndef tuple_size(tuple1):\r\n    return sys.getsizeof(tuple1)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 596,
        "precondition": "tuple1 is a tuple."
    },
    "597": {
        "specification": "Write a function to find kth element from the given two sorted arrays.",
        "code": "def find_kth(arr1, arr2, k):\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    if m > n:\r\n        return find_kth(arr2, arr1, k)\r\n    if m == 0:\r\n        return arr2[k-1]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    i = min(m, k//2)\r\n    j = k - i\r\n    if arr1[i-1] <= arr2[j-1]:\r\n        return find_kth(arr1[i:], arr2, j)\r\n    else:\r\n        return find_kth(arr1, arr2[j:], i)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 597,
        "precondition": "arr1 and arr2 are two sorted arrays, k is a positive integer."
    },
    "598": {
        "specification": "Write a function to check whether the given number is armstrong or not.",
        "code": "def sum_of_cubes(n):\r\n  n = str(n)\r\n  sum = 0\r\n  for i in n:\r\n    sum += (int(i)**3)\r\n  return sum\r\n\r\ndef armstrong_number(number):\r\n  result = False\r\n  if number == sum_of_cubes(number):\r\n    result = True\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 598,
        "precondition": "number is an integer."
    },
    "599": {
        "specification": "Write a function to find sum and average of first n natural numbers.",
        "code": "def sum_average(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum = sum + i\r\n    avg = sum/n\r\n    return (sum, avg)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 599,
        "precondition": "n is a positive integer."
    },
    "600": {
        "specification": "Write a python function to check whether the given number is even or not.",
        "code": "def is_Even(n):\r\n    return n % 2 == 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 600,
        "precondition": "n is an integer."
    },
    "602": {
        "specification": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_repeated_char(str1):\r\n  repeated_char = ''\r\n  for i in str1:\r\n    if str1.count(i) > 1:\r\n      if repeated_char == '':\r\n        repeated_char = i\r\n      else:\r\n        return repeated_char\r\n  return repeated_char\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 602,
        "precondition": "str1 is a non-empty string."
    },
    "603": {
        "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "def get_ludic(n):\r\n    ludic_numbers = []\r\n    for i in range(2, n+1):\r\n        is_ludic = True\r\n        for j in range(2, int(i**0.5) + 1):\r\n            if i % j == 0:\r\n                is_ludic = False\r\n                break\r\n        if is_ludic:\r\n            ludic_numbers.append(i)\r\n    return ludic_numbers\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 603,
        "precondition": "n is a non-negative integer."
    },
    "604": {
        "specification": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "def reverse_words(sentence:\r\n    words = sentence.split()\r\n    reversed_words = words[::-1]\r\n    reversed_sentence = \" \".join(reversed_words)\r\n    return reversed_sentence\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 604,
        "precondition": "sentence is a string."
    },
    "605": {
        "specification": "Write a function to check if the given integer is a prime number.",
        "code": "import math\r\ndef prime_num(n):\r\n    result = True\r\n    if n <= 1:\r\n        result = False\r\n    elif n == 2:\r\n        result = True\r\n    elif n % 2 == 0:\r\n        result = False\r\n    else:\r\n        for i in range(3,int(math.sqrt(n)) + 1,2):\r\n            if n % i == 0:\r\n                result = False\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 605,
        "precondition": "n is a non-negative integer."
    },
    "606": {
        "specification": "Write a function to convert degrees to radians.",
        "code": "import math\r\ndef radian_degree(degrees):\r\n    radians = math.radians(degrees)\r\n    return radians\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 606,
        "precondition": "degrees is a number."
    },
    "607": {
        "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "import re\r\ndef find_literals(s, p):\r\n  match = re.search(p, s)\r\n  if match:\r\n    return (match.group(), match.start(), match.end())\r\n  else:\r\n    return None\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 607,
        "precondition": "s is a string and p is a valid regular expression pattern."
    },
    "608": {
        "specification": "Write a python function to find nth bell number.",
        "code": "import math\r\ndef bell_Number(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return sum([math.factorial(n-1)/(math.factorial(k))*bell_Number(k) for k in range(1, n)] )\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 608,
        "precondition": "n is a positive integer."
    },
    "610": {
        "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "def remove_kth_element(lst, k):\r\n    new_list = lst.copy()\r\n    new_list.pop(k)\r\n    return new_list\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 610,
        "precondition": "lst is a list and k is an integer such that 0 <= k < len(lst)"
    },
    "611": {
        "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "code": "def max_of_nth(matrix, n):\r\n    max_val = matrix[0][n]\r\n    for i in range(1, len(matrix):\r\n        if matrix[i][n] > max_val:\r\n            max_val = matrix[i][n]\r\n    return max_val\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 611,
        "precondition": "matrix is a list of lists with the same length, n is a non-negative integer smaller than the length of matrix."
    },
    "612": {
        "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "code": "def merge(lst)\r\n    return list(map(list, zip(*lst))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 612,
        "precondition": "lst is a list of lists, where each sublist has exactly two elements."
    },
    "614": {
        "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "code": "def cummulative_sum(num_tuples:\r\n    sum = 0\r\n    for x in num_tuples:\r\n        sum = sum + sum(x)\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 614,
        "precondition": "num\\_tuples is a list of tuples, and all elements in the tuples are numbers."
    },
    "615": {
        "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "code": "def average_tuple(tuples):\r\n    result = []\r\n    for t in tuples:\r\n        avg = sum(t)/len(t)\r\n        result.append(avg)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 615,
        "precondition": "tuples is a tuple of tuples, and all tuples contain at least one float or integer."
    },
    "616": {
        "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "def tuple_modulo(tup1, tup2):\r\n    return tuple(x % y for x, y in zip(tup1, tup2))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 616,
        "precondition": "tup1 and tup2 are tuples of the same length."
    },
    "617": {
        "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "def min_Jumps(d,jump\\_len):\r\n    if d % jump_len == 0:\r\n        return d // jump_len\r\n    else:\r\n        return d // jump_len + 1.0\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 617,
        "precondition": "d and jump\\_len are non-negative integers."
    },
    "618": {
        "specification": "Write a function to divide two lists element wise.",
        "code": "def div_list(list1, list2):\r\n    if len(list1) != len(list2):\r\n        return \"Error: lists are not the same length\"\r\n    else:\r\n        return [x/y for x, y in zip(list1, list2)]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 618,
        "precondition": "list1 and list2 are lists of the same length consisting of numbers."
    },
    "619": {
        "specification": "Write a function to move all the numbers to the end of the given string.",
        "code": "def move_num(text):\r\n  result = ''.join(re.findall('\\d+', text)) + re.sub(r'\\d+','', text)\r\n  return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 619,
        "precondition": "text is a string."
    },
    "620": {
        "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "code": "def largest_subset(numbers):\r\n    def is_divisible(x, y)\r\n        return x % y == 0 or y % x == 0\r\n    \n    def find_largest_subset_recursive(numbers, subset, index)\r\n        if index == len(numbers):\r\n            return len(subset)\r\n        else:\r\n            if len(subset) == 0 or is_divisible(subset[-1], numbers[index]):\r\n                subset.append(numbers[index])\r\n                result = find_largest_subset_recursive(numbers, subset, index + 1)\r\n                subset.pop()\r\n            else:\r\n                result = find_largest_subset_recursive(numbers, subset, index + 1)\r\n            return result\r\n\r\n    if len(numbers) == 0:\r\n        return 0\r\n    else:\r\n        return find_largest_subset_recursive(numbers, [], 0)\r\n\r\nprint(largest_subset([ 1, 3, 6, 13, 17, 18 ]))\r\n# Output: 4\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 620,
        "precondition": "numbers is a list of integers."
    },
    "622": {
        "specification": "Write a function to find the median of two sorted lists of same size.",
        "code": "def get_median(list1, list2, size):\r\n    list3 = list1 + list2\r\n    list3.sort()\r\n    if size % 2 == 0:\r\n        return (list3[int(size/2)] + list3[int(size/2) - 1])/2.0\r\n    else:\r\n        return list3[int(size/2)]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 622,
        "precondition": "list1 and list2 are sorted lists of same size."
    },
    "623": {
        "specification": "Write a function to compute the n-th power of each number in a list.",
        "code": "def nth_nums(nums,n):\r\n    return [num ** n for num in nums]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 623,
        "precondition": "nums is a list of numbers, n is an integer."
    },
    "624": {
        "specification": "Write a python function to convert a given string to uppercase.",
        "code": "def is_upper(string):\r\n    return string.upper()\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 624,
        "precondition": "string is a string object."
    },
    "625": {
        "specification": "Write a python function to interchange the first and last element in a given list.",
        "code": "def swap_List(lst*\r\n  temp = lst[0]\r\n  lst[0] = lst[-1]\r\n  lst[-1] = temp\r\n  return lst\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 625,
        "precondition": "lst is a list."
    },
    "626": {
        "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "import math\r\ndef triangle_area(r):\r\n    if r < 0:\r\n        return None\r\n    else:\r\n        area = (math.sqrt(3) / 4) * r**2\r\n        return area\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 626,
        "precondition": "r is a non-negative real number."
    },
    "627": {
        "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "def find_First_Missing(arr):\r\n    for i in range(len(arr)+1):\r\n        if i not in arr:\r\n            return i\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 627,
        "precondition": "arr is a sorted list of natural numbers without duplicates."
    },
    "628": {
        "specification": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "def replace_spaces(s):\r\n    return s.replace(\" \",\"%20\")\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 628,
        "precondition": "s is a string."
    },
    "629": {
        "specification": "Write a python function to find even numbers from a list of numbers.",
        "code": "def Split(numbers):\r\n    return [x for x in numbers if x % 2 == 0]\r\ntest_list = [1, 2, 3, 4, 5]\r\nprint(Split(test_list))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 629,
        "precondition": "numbers is a list of integers."
    },
    "630": {
        "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "def get_coordinates(coord\r\n\r\n):\r\n  i, j = coord\r\n  x = []\r\n  for a in range(i-1, i+2):\r\n    for b in range(j-1, j+2):\r\n      if a != i or b != j:\r\n        x.append([a,b])\r\n  return x\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 630,
        "precondition": "coord is a tuple of two integers."
    },
    "631": {
        "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "def replace_spaces(s):\r\n  result = s.replace(\" \",\"_\")\r\n  return result \n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 631,
        "precondition": ""
    },
    "632": {
        "specification": "Write a python function to move all zeroes to the end of the given list.",
        "code": "def move_zero(numbers):\r\n    zeroes = []\r\n    non_zeroes = []\r\n    for number in numbers:\r\n        if number == 0:\r\n            zeroes.append(number)\r\n        else:\r\n            non_zeroes.append(number)\r\n    return non_zeroes + zeroes\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 632,
        "precondition": "numbers is a list of integers."
    },
    "633": {
        "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "code": "def pair_xor_Sum(arr,n):\r\n    res = 0\r\n    for i in range(n\r\n    ):\n        for j in range(i+1, n):\r\n            res ^= (arr[i] ^ arr[j])\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 633,
        "precondition": "arr is a list of integers, n is the length of the list."
    },
    "635": {
        "specification": "Write a function to sort the given list.",
        "code": "import heapq\r\ndef heap_sort(lst):\r\n  heapq.heapify(lst)\r\n  sorted_lst = heapq.nsmallest(len(lst), lst)\r\n  return sorted_lst\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 635,
        "precondition": "lst is a list."
    },
    "637": {
        "specification": "Write a function to check whether the given amount has no profit and no loss",
        "code": "def noprofit_noloss(cost_price,selling_price):\r\n    if cost_price == selling_price:\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 637,
        "precondition": "cost\\_price and selling\\_price are numbers."
    },
    "638": {
        "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "def wind_chill(velocity,temp)\r\n    if (velocity<3) or (temp>10:\r\n        return temp\r\n    else:\r\n        wci = 13.12 + 0.6215*temp - 11.37*velocity**0.16 + 0.3965*temp*velocity**0.16\r\n        return int(wci)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 638,
        "precondition": "velocity is a non-negative number representing wind velocity in km/h and temp is a number representing temperature in Celsius."
    },
    "639": {
        "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "code": "def sample_nam(names):\r\n    result = 0\r\n    for name in names:\r\n        if name[0].isupper()\r\n            result += len(name)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 639,
        "precondition": "names is a list of strings."
    },
    "640": {
        "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "def remove_parenthesis(string\\_list):\r\n    for i in range(len(string_list));\r\n        string_list[i] = string_list[i].replace(\"(\",\" \").replace(\")\",\"\").strip()\r\n    return string_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 640,
        "precondition": "string\\_list is a list of strings."
    },
    "641": {
        "specification": "Write a function to find the nth nonagonal number.",
        "code": "def is_nonagonal(n')\r\n{\r\n  return (n*(n-1) + 1 + (n-1))\r\n}\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 641,
        "precondition": "n is a positive integer."
    },
    "643": {
        "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "def text_match_wordz_middle(text):\r\n    if text.count('z') > 1 and text[0] != 'z' and text[-1] != 'z':\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 643,
        "precondition": "text is a string."
    },
    "644": {
        "specification": "Write a python function to reverse an array upto a given position.",
        "code": "def reverse_Array_Upto_K(arr, k):\r\n    n = len(arr)\r\n    for i in range(0,int((n+k)/2));\r\n        arr[i], arr[k-i] = arr[k-i], arr[i]\r\n    return arr\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 644,
        "precondition": "arr is a list of integers and k is an integer such that 0 <= k <= n."
    },
    "720": {
        "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "code": "def add_dict_to_tuple(tup, dict:\r\n    return tup + (dict,)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 720,
        "precondition": "tup is a tuple and dict is a dictionary."
    },
    "721": {
        "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "def maxAverageOfPath(cost:\r\n    R = len(cost)\r\n    C = len(cost[0])\r\n    dp = [[0 for x in range(C)] for x in range(R)]\r\n    dp[0][0] = cost[0][0]\r\n    for i in range(1, R)\r\n        dp[i][0] = dp[i-1][0] + cost[i][0]\r\n    for j in range(1, C)\r\n        dp[0][j] = dp[0][j-1] + cost[0][j]\r\n    for i in range(1, R):\r\n        for j in range(1, C):\r\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\r\n    return dp[R-1][C-1] / (R * C)\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 721,
        "precondition": "cost is a list of lists where each inner list represents a row in the matrix."
    },
    "722": {
        "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "def filter_data(student, min_height, min_weight):\r\n    res = {}\\\n    for key, value in student.items():\r\n        if value[0] > min_height and value[1] > min_weight:\r\n            res[key] = value\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 722,
        "precondition": "student is a dictionary, min\\_height and min\\_weight are floats."
    },
    "723": {
        "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "code": "def count_same_pair(lst1, lst2):\r\n  count = 0\r\n  for i in range(len(lst1));\r\n    if lst1[i] == lst2[iF\n      count+=1\n  return count\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 723,
        "precondition": "lst1 and lst2 are lists of the same length."
    },
    "724": {
        "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "def power_base_sum(base, power /***/\r\n  result = base \r\n  for i in range(power - 1 /***/\r\n    result = result * base \r\n  sum = 0 \r\n  while result > 0 \r\n    sum += result % 10 \r\n    result = result // 10 \r\n  return sum \r\n\r\nassert power_base_sum(2,100)==115 \r\n\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 724,
        "precondition": "base and power are integers greater than 0."
    },
    "725": {
        "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "def extract_quotation(str1):\r\n    return re.findall('\"(.*?)\"', str1)\r\n   \nimport re\r\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 725,
        "precondition": "str1 is a string."
    },
    "726": {
        "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "def multiply_elements(t):\r\n  res = ()\r\n  for i in range(len(t)-1):\r\n    res += (t[i] * t[i+1],)\r\n  return res\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 726,
        "precondition": "t is a tuple with even length and elements are numbers."
    },
    "728": {
        "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "def sum_list(lst1, lst2):\r\n    return tuple(map(lambda x, y: x + y, lst1, lst2))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 728,
        "precondition": "lst1 and lst2 are lists of the same length."
    },
    "730": {
        "specification": "Write a function to remove consecutive duplicates of a given list.",
        "code": "def consecutive_duplicates(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        if i == 0 or lst[i] != lst[i-1\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u0438\u0435]\r\n            result.append(lst[i])\r\n    return result\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 730,
        "precondition": "lst is a list."
    },
    "731": {
        "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "import math\r\ndef lateralsurface_cone(r,h):\r\n    area = r * math.pi * math.sqrt(r**2 + h**2)\r\n    return area\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 731,
        "precondition": "r and h are positive numbers."
    },
    "732": {
        "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "def replace_specialchar(text):\r\n  text = text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\r\n  return text\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 732,
        "precondition": "text is a string."
    },
    "733": {
        "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "def find_first_occurrence(arr, target):\r\n    low, high = 0, len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] < target:\r\n            low = mid + 1\r\n        elif arr[mid] > target:\r\n            high = mid - 1\r\n        else:\r\n            if mid == 0 or arr[mid - 1] != target:\r\n                return mid\r\n            else:\r\n                high = mid - 1\r\n    return -1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 733,
        "precondition": "arr is a sorted list of numbers and target is an integer."
    },
    "734": {
        "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "def sum_Of_Subarray_Prod(arr):\r\n    res = 0\r\n    for i in range(len(arr):\r\n        prod = 1\r\n        for j in range(i,len(arr):\r\n            prod *= arr[j]\r\n            res += prod\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 734,
        "precondition": "arr is a list of integers."
    },
    "735": {
        "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "def toggle_middle_bits(n):\r\n    n = n ^ ((n >> 1) & (n - 1))\r\n    n = n ^ ((n << 1) & (n - 1))\r\n    return n\n",
        "total_tests": 5,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 735,
        "precondition": "n is an integer."
    },
    "736": {
        "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
        "code": "def left_insertion(arr,n):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == n:\r\n            return mid\r\n        elif arr[mid] < n:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return low\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 736,
        "precondition": "arr is a sorted list, n is an element to be inserted in sorted order."
    },
    "737": {
        "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "import re\r\ndef check_str(str1):\r\n  if re.search(r'^[aeiouAEIOU]', str1):\r\n    return True\r\n  else:\r\n    return False\r\n  end\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 737,
        "precondition": "str1 is a string."
    },
    "738": {
        "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
        "code": "import math\r\ndef geometric_sum(n):\r\n    return 1 - (1/math.pow(2, n))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 738,
        "precondition": "n is a positive integer."
    },
    "739": {
        "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "import math\r\ndef triangular_number(n):\r\n    return (n*(n+1))//2\r\n\r\ndef count_digits(n):\r\n    return math.floor(math.log10(n)) + 1\r\n\r\ndef find_Index(n):\r\n    i = 1\r\n    while(True):\r\n        tri = triangular_number(i)\r\n        if (count_digits(tri) == n):\r\n            return i\r\n        i+=1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 739,
        "precondition": "n is a positive integer."
    },
    "740": {
        "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
        "code": "def tuple_to_dict(t):\r\n    result = dict()\r\n    for i in range(0, len(t)-1,\r\n                          2):\r\n        result[t[i]] = t[i+1]\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 740,
        "precondition": "t is a tuple with an even number of elements."
    },
    "741": {
        "specification": "Write a python function to check whether all the characters are same or not.",
        "code": "def all_Characters_Same(string):\r\n    result = False\r\n    if len(set(string)) <= 1:\r\n        result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 741,
        "precondition": "string is a string."
    },
    "742": {
        "specification": "Write a function to caluclate the area of a tetrahedron.",
        "code": "import math\r\ndef area_tetrahedron(a):\r\n    A = (3*math.sqrt(3))/4\r\n    return A*a**2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 742,
        "precondition": "a is a positive number representing the length of a side of the regular tetrahedron."
    },
    "743": {
        "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "code": "def rotate_right(arr,n):\r\n  for i in range(n:\r\n    arr.insert(0, arr.pop())\r\n  return arr\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 743,
        "precondition": "arr is a list and n is an integer."
    },
    "744": {
        "specification": "Write a function to check if the given tuple has any none value or not.",
        "code": "def check_none(tup):\r\n    return any(val is None for val in tup)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 744,
        "precondition": "tup is a tuple."
    },
    "745": {
        "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
        "code": "def divisible_by_digits(startnum, endnum):\r\n    result = []\n    for i in range(startnum, endnum + 1):\r\n        s = str(i)\r\n        if all([j == 0 or i % j == 0 for j in [int(x) for x in s]]):\r\n            result.append(i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 745,
        "precondition": "startnum and endnum are integers such that startnum <= endnum."
    },
    "746": {
        "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "import math\r\ndef sector_area(radius, angle):\r\n    if angle > 360:\r\n        return None\r\n    else:\r\n        return (angle/360)*math.pi*(radius**2)\r\nprint(sector_area(4,45))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 746,
        "precondition": "radius is a positive number and angle is a number."
    },
    "747": {
        "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "def lcs_of_three(str1, str2, str3):\r\n    dp = [[[0 for x in range(len(str3)+1)] for y in range(len(str2)+1)] for z in range(len(str1)+1)]\r\n    for i in range(len(str1)+1):\r\n        for j in range(len(str2)+1):\r\n            for k in range(len(str3)+1):\r\n                if i == 0 or j == 0 or k == 0:\r\n                    dp[i][j][k] = 0\r\n                elif str1[i-1] == str2[j-1] == str3[k-1]:\r\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\r\n                else:\r\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\r\n    return dp[len(str1)][len(str2)][len(str3)]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 747,
        "precondition": "str1, str2, and str3 are strings."
    },
    "748": {
        "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "def capital_words_spaces(str1):\r\n    return ' '.join(word if word.isupper() else word.lower() for word in str1.split())\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 748,
        "precondition": "str1 is a string."
    },
    "749": {
        "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
        "code": "def sort_numeric_strings(lst):\r\n    return sorted(lst, key = lambda x: int(x))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 749,
        "precondition": "lst is a list of strings representing numbers."
    },
    "750": {
        "specification": "Write a function to add the given tuple to the given list.",
        "code": "def add_tuple(lst, tup):\r\n    lst.append(tup)\r\n    return lst\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 750,
        "precondition": "lst is a list and tup is a tuple."
    },
    "751": {
        "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "def check_min_heap(arr):\r\n    if len(arr) == 0:\r\n        return True\r\n    i = 1\r\n    while i < len(arr):\r\n        if 2*i+1 < len(arr) and arr[2*i+1] < arr[i]\r\n            return False\r\n        if 2*i+2 < len(arr) and arr[2*i+2] < arr[i]\r\n            return False\r\n        i += 1\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 751,
        "precondition": "arr is a list of integers."
    },
    "752": {
        "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)*2\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 752,
        "precondition": "n is a non-negative integer."
    },
    "753": {
        "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
        "code": "def min_k(k_list, min_val)\r\n    return (sorted(k_list, key=lambda x: x[1])[:min_val])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 753,
        "precondition": "k\\_list is a list of tuples and min\\_val is an integer such that 0 <= min\\_val <= len(k\\_list)."
    },
    "754": {
        "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for i in range(len(l1));\r\n        if l1[i] == l2[i] == l3[i]:\r\n            result.append(l1[i])\r\n    return result\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 754,
        "precondition": "l1, l2, and l3 are lists of the same length."
    },
    "755": {
        "specification": "Write a function to find the second smallest number in a list.",
        "code": "def second_smallest(lst):\r\n    if len(lst) < 2:\r\n        return \"List should have at least two elements\"\r\n    elif len(lst) == 2:\r\n        return lst[0]\r\n    else:\r\n        first_min = min(lst[0], lst[1])\r\n        second_min = max(lst[0], lst[1])\r\n        for i in lst:\r\n            if i < second_min and i != first_min:\r\n                second_min = i\r\n        return second_min\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 755,
        "precondition": "lst is a list with at least two elements."
    },
    "756": {
        "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
        "code": "import re\r\ndef text_match_zero_one(txt):\r\n    result = bool(re.search(r'ab+', txt))\r\n    return result\n",
        "total_tests": 6,
        "passed_tests": 6,
        "test_result": 1.0,
        "task_id": 756,
        "precondition": "txt is a string."
    },
    "757": {
        "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
        "code": "def count_reverse_pairs(str_list):\r\n    count = 0\r\n    for i in range(len(str_list):\r\n        if str_list[i] == str_list[::-1][i]\u00a0:\\\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 757,
        "precondition": "str\\_list is a list of strings."
    },
    "758": {
        "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "code": "def unique_sublists(lst):\r\n  result = {}\r\n  for i in lst:\r\n    t = tuple(i)\r\n    if t not in result:\r\n      result[t] = 1\r\n    else:\r\n      result[t] += 1\r\n  return result\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 758,
        "precondition": "lst is a list."
    },
    "759": {
        "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "import re\r\ndef is_decimal(n):\r\n  if re.match(r'^\\d{1,}(\\.\\d{1,2})?$', n):\r\n    return True\r\n  else:\r\n    return False\n",
        "total_tests": 5,
        "passed_tests": 5,
        "test_result": 1.0,
        "task_id": 759,
        "precondition": "n is a string."
    },
    "760": {
        "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "code": "def unique_Element(numbers):\r\n    return len(set(numbers)) == 1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 760,
        "precondition": "numbers is a list of integers."
    },
    "762": {
        "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "def check_monthnumber_number(n):\r\n    result = False\r\n    if n in range(1,13):\r\n        if (n == 4 or n == 6 or n == 9 or n == 11):\r\n            result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 762,
        "precondition": "n is an integer between 1 and 12 inclusive."
    },
    "763": {
        "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "def find_min_diff(arr, n):\r\n    arr.sort()\r\n    min_diff = float('inf')\r\n    for i in range(1, n)\r\n        min_diff = min(min_diff, abs(arr[i] - arr[i-1]))\r\n    return min_diff\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 763,
        "precondition": "arr is a list of integers, n is the length of the list."
    },
    "764": {
        "specification": "Write a python function to count number of digits in a given string.",
        "code": "def number_ctr(string)\r\n  return sum(1 for c in string if c.isdigit()\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 764,
        "precondition": "string is a string."
    },
    "765": {
        "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "def is_polite(n):\r\n    def sum_proper_divisors(num):\r\n        sum = 1\r\n        for i in range(2, int(num**0.5) + 1):\r\n            if num % i == 0:\r\n                sum += i\r\n                if i != num // i:\r\n                    sum += num // i\r\n        return sum\r\n    polite_count = 0\r\n    i = 1\r\n    while (polite_count < n):\r\n        if (sum_proper_divisors(i) > i):\r\n            polite_count += 1\r\n        i += 1\r\n    return i - 1\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 765,
        "precondition": "n is a positive integer."
    },
    "766": {
        "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "code": "def pair_wise(lst):\r\n    res = []\n    for i in range(len(lst) - 1):\r\n        res.append((lst[i], lst[i+1]))\n    return res\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 766,
        "precondition": "lst is a list with at least one element."
    },
    "767": {
        "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "code": "def get_pairs_count(numbers, sum):\r\n    count = 0\r\n    for i in range(len(numbers):\r\n        for j in range(i, len(numbers):\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1\r\n    return count\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 767,
        "precondition": "numbers is a list of numbers and sum is an integer."
    },
    "769": {
        "specification": "Write a python function to get the difference between two lists.",
        "code": "def Diff(lst1, lst2):\r\n  return tuple(set(lst1) - set(lst2))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 769,
        "precondition": "lst1 and lst2 are lists."
    },
    "770": {
        "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "code": "def odd_num_sum(n):\r\n    sum = 0\r\n    for i in range(1,n*2,2):\r\n        sum += i**4\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 770,
        "precondition": "n is a positive integer."
    },
    "771": {
        "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "def check_expression(inputStr:\r\n    stack = []\r\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\r\n    for char in inputStr:\r\n        if char in mapping:\r\n            top_element = stack.pop() if stack else '#'\r\n            if mapping[char] != top_element:\r\n                return False\r\n        else:\r\n            stack.append(char)\r\n    return not stack\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 771,
        "precondition": "inputStr is a string."
    },
    "772": {
        "specification": "Write a function to remove all the words with k length in the given string.",
        "code": "def remove_length(s, k):\r\n    return ' '.join([word for word in s.split() if len(word) != k\r\n])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 772,
        "precondition": "s is a string and k is an integer."
    },
    "773": {
        "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "def occurance_substring(text, substring):\r\n    start = 0\r\n    index = 0\r\n    count = 0\r\n    while True:\r\n        index = text.find(substring, start)\r\n        if index == -1:\r\n            return None\r\n        count += 1\r\n        start = index + len(substring)\r\n        res = (substring, index, start)\r\n    return res\n",
        "total_tests": 4,
        "passed_tests": 1,
        "test_result": 0.25,
        "task_id": 773,
        "precondition": "text and substring are strings."
    },
    "775": {
        "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "code": "def odd_position(lstByComparator\r\n  for i in range(len(lst))*\r\n    if i % 2 != 0*\r\n      if lst[i] % 2 == 0:\r\n        return False*\r\n  return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 775,
        "precondition": "lst is a list."
    },
    "776": {
        "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "def count_vowels(s):\r\n    count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i] in 'aeiou' and s[i+1] in 'aeiou:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 776,
        "precondition": "s is a string."
    },
    "777": {
        "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
        "code": "def find_sum(given_list):\r\n    return sum(set(given_list))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 777,
        "precondition": "given\\_list is a list."
    },
    "778": {
        "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "code": "def pack_consecutive_duplicates(lst):\r\n    if not lst:\r\n        return []\r\n    else:\r\n        ele = lst[0]\r\n        count = 1\r\n        pack\\_lst = []\r\n        for i in range(1,len(lst));\r\n            if lst[i] == ele:\r\n                count += 1\r\n            else:\r\n                pack\\_lst.append([ele]*count)\r\n                count = 1\r\n                ele = lst[i]\r\n        pack\\_lst.append([ele]*count)\r\n        return pack\\_lst\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 778,
        "precondition": "lst is a list of elements."
    },
    "779": {
        "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
        "code": "def unique_sublists(lst):\r\n\tsublists = dict()\r\n\tfor sublist in lst:\r\n\t\tsublist = tuple(sublist)\r\n\t\tif sublist in sublists:\r\n\t\t\tsublists[sublist] += 1\r\n\t\telse:\r\n\t\t\tsublists[sublist] = 1\r\n\treturn sublists\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 779,
        "precondition": "lst is a list."
    },
    "780": {
        "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
        "code": "def find_combinations(given\\_tuples):\r\n    result = []\r\n    for t in given\\_tuples:\r\n        for t2 in given\\_tuples:\r\n            if t[0] + t2[0] not in [x[0] for x in result] and t[1] + t2[1] not in [x[1] for x in result]:\r\n                result.append((t[0] + t2[0], t[1] + t2[1]))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 780,
        "precondition": "given\\_tuples is a list of tuples where each tuple contains two integers."
    },
    "781": {
        "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "code": "from math import sqrt\r\ndef count_divisors(n):\r\n    count = 0\r\n    for i in range(1, int(sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            count += 1\r\n            if i != sqrt(n):\r\n                count += 1\r\n    return count % 2 == 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 781,
        "precondition": "n is a non-negative integer."
    },
    "782": {
        "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "def odd_length_sum(arr):\r\n    n = len(arr)\r\n    total = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            if (j - i + 1) % 2 != 0:\r\n                total += sum(arr[i:j+1])\r\n    return total\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 782,
        "precondition": "arr is a list of numbers."
    },
    "783": {
        "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "import math\r\ndef rgb_to_hsv(r, g, b):\r\n    h = 0\r\n    s = 0\r\n    v = max(r, g, b)\r\n    if v != 0:\r\n        diff = v - min(r, g, b)\r\n        if v == r:\r\n            h = (g - b) / diff\r\n        elif v == g:\r\n            h = 2 + (b - r) / diff\r\n        elif v == b:\r\n            h = 4 + (r - g) / diff\r\n        h = h * 60 if h >= 0 else h * 60 + 360\r\n    if v != 0:\r\n        s = (diff / v) * 100\r\n    return h, s, v\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 783,
        "precondition": "r, g, b are integers between 0 and 255 inclusive."
    },
    "784": {
        "specification": "Write a function to find the product of first even and odd number of a given list.",
        "code": "def mul_even_odd(numbers):\r\n    even = [i for i in numbers if i % 2 == 0]\r\n    odd = [i for i in numbers if i % 2 != 0]\r\n    if even and odd:\r\n        return even[0] * odd[0]\r\n    else:\r\n        return \"List does not contain both even and odd numbers\"\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 784,
        "precondition": "numbers is a list of integers."
    },
    "785": {
        "specification": "Write a function to convert tuple string to integer tuple.",
        "code": "import ast\r\ndef tuple_str_int(tup\\_str):\r\n    tup = ast.literal\\_eval(tup\\_str)\r\n    return tuple(map(int, tup))\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 785,
        "precondition": "tup\\_str is a string representing a tuple of integers."
    },
    "786": {
        "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "def right_insertion(arr, num):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] < num:\r\n            low = mid + 1\r\n        elif arr[mid] > num:\r\n            high = mid - 1\r\n        else:\r\n            return mid\r\n    return low\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 786,
        "precondition": "arr is a sorted list of comparable elements, and num is a comparable element."
    },
    "787": {
        "specification": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "def text_match_three(text):\r\n    import re\r\n    pattern = r'abbb'\r\n    if re.search(pattern, text):\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 787,
        "precondition": "text is a string."
    },
    "788": {
        "specification": "Write a function to create a new tuple from the given string and list.",
        "code": "def new_tuple(str_list, given_string):\r\n    return tuple(str_list + [given_string])\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 788,
        "precondition": "str\\_list is a list of strings and given\\_string is a string."
    },
    "790": {
        "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
        "code": "def even_position(lst):\r\n    for i in range(0,len(lst),2):\r\n        if lst[i] % 2 != 0:\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 790,
        "precondition": "lst is a list of integers."
    },
    "791": {
        "specification": "Write a function to remove tuples from the given tuple.",
        "code": "def remove_nested(tup)\r\n    if type(tup) is not tuple:\r\n        return tup\r\n    else:\r\n        return tuple(remove_nested(i) for i in tup\r\n                if not isinstance(i, tuple))\r\n\r\nprint(remove_nested((1, 5, 7, (4, 6), 10))\r\n         )\r\n)\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 791,
        "precondition": "tup is a tuple."
    },
    "792": {
        "specification": "Write a python function to count the number of lists in a given number of lists.",
        "code": "def count_list(lst):\r\n    return len(lst)\r\ntest = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]\r\nprint(count_list(test))\r\n4\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 792,
        "precondition": "lst is a list of lists."
    },
    "793": {
        "specification": "Write a python function to find the last position of an element in a sorted array.",
        "code": "def last(arr,x):\r\n    for i in range(len(arr)-1, -1, -1):\r\n        if arr[i] == x:\r\n            return i\r\n    return -1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 793,
        "precondition": "arr is a sorted list of elements and x is an element."
    },
    "794": {
        "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "import re\r\ndef text_starta_endb(text):\r\n    return bool(re.search(r'a.*b', text))\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 794,
        "precondition": "text is a string."
    },
    "796": {
        "specification": "Write function to find the sum of all items in the given dictionary.",
        "code": "def return_sum(d:\r\n\tresult = 0\r\n\tfor key, value in d.items():\r\n\t\tresult += value \r\n\treturn result \n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600 \r\nprint(\"Test passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 796,
        "precondition": "d is a dictionary with numerical values."
    },
    "797": {
        "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "code": "def sum_in_range(l, r):\r\n    return sum([i for i in range(l, r+1) if i%2 != 0])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 797,
        "precondition": "l and r are integers, and l <= r."
    },
    "798": {
        "specification": "Write a python function to find the sum of an array.",
        "code": "def _sum(arr):\r\n    return sum(arr)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 798,
        "precondition": "arr is a list or tuple of numbers."
    },
    "799": {
        "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "def left_rotate(n, d):\r\n    return (n << d) & 0xFFFFFFFF\r\nassert left_rotate(16,2) == 64\n",
        "total_tests": 7,
        "passed_tests": 7,
        "test_result": 1.0,
        "task_id": 799,
        "precondition": "n is an integer and d is a non-negative integer less than or equal to 32."
    },
    "800": {
        "specification": "Write a function to remove all whitespaces from a string.",
        "code": "def remove_all_spaces(input_string):\r\n    return input_string.replace(\" \",\"\")\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 800,
        "precondition": "input\\_string is a string."
    },
    "801": {
        "specification": "Write a python function to count the number of equal numbers from three given integers.",
        "code": "def test_three_equal(a, b, c):\r\n    count = 0\r\n    if a == b and b == c:\r\n        count = 3\r\n    elif a == b or b == c or a == c:\r\n        count = 2\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 801,
        "precondition": "a, b, and c are integers."
    },
    "802": {
        "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "def count_rotation(arr):\r\n    size = len(arr)\r\n    if size == 1:\r\n        return 0\r\n    elif arr[0] > arr[size - 1]:\r\n        return size - find_pivot(arr)\r\n    else:\r\n        return 0\r\ndef find_pivot(arr):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n    while low < high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] > arr[high]:\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n    return low\n",
        "total_tests": 5,
        "passed_tests": 3,
        "test_result": 0.6,
        "task_id": 802,
        "precondition": "arr is a list of integers."
    },
    "803": {
        "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "import math\r\ndef is_perfect_square(n):\r\n    sqrt = int(math.sqrt(n))\r\n    if sqrt*sqrt == n:\r\n        return True\r\n    else:\r\n        return False\r\n",
        "total_tests": 6,
        "passed_tests": 6,
        "test_result": 1.0,
        "task_id": 803,
        "precondition": "n is a non-negative integer."
    },
    "804": {
        "specification": "Write a function to check whether the product of numbers in a list is even or not.",
        "code": "def is_product_even(num\\_list):\r\n    if num_list:\r\n        if num_list[0] != 0 and len(num_list) > 1:\r\n            if num_list[-1] == 0:\r\n                return False\r\n            else:\r\n                return all(x % 2 == 0 or x == 0 for x in num_list)\r\n        else:\r\n            return False\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 804,
        "precondition": "num\\_list is a list of integers."
    },
    "805": {
        "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "code": "def max_sum_list(lst):\r\n    return max(lst, key = sum)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 805,
        "precondition": "lst is a list of lists of numbers."
    },
    "806": {
        "specification": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "def max_run_uppercase(s):\r\n    max_count = 0\r\n    current_count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i].isupper()\r\n            and s[i] == s[i+1].isupper:\r\n                current_count += 1\r\n            else:\r\n                max_count = max(current_count, max_count)\r\n                current_count = 0\r\n    max_count = max(current_count, max_count)\r\n    return max_count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 806,
        "precondition": "s is a string."
    },
    "807": {
        "specification": "Write a python function to find the first odd number in a given list of numbers.",
        "code": "def first_odd(lst):\r\n  for num in lst:\r\n    if num % 2 != 0:\r\n      return lst.index(num)\r\n  return -1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 807,
        "precondition": "lst is a list of numbers."
    },
    "808": {
        "specification": "Write a function to check if the given tuples contain the k or not.",
        "code": "def check_K(tup, k):\r\n    result = False\r\n    for i in tup:\r\n        if i == k:\r\n            result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 808,
        "precondition": "tup is a tuple and k is a value."
    },
    "809": {
        "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "def check_smaller(tup1, tup2):\r\n    for x, y in zip(tup1, tup2):\r\n        if y >= x:\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 809,
        "precondition": "tup1 and tup2 are tuples with the same length."
    }
}