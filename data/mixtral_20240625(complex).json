{
  "2": {
    "specification": "Write a function to find the shared elements from the given two lists.",
    "code": "def similar_elements(test_list1, test_list2):\r\n    return set(similar_elements(tuple(test_list1), tuple(test_list2)))\n\nassert similar_elements([3, 4, 5, 6],[5, 7, 4, 10]) == set((4, 5))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 2,
    "precondition": "test\\_list1 and test\\_list2 are lists."
  },
  "3": {
    "specification": "Write a python function to identify non-prime numbers.",
    "code": "def is_not_prime(n):\r\n    if n < 2:\r\n        return True\r\n    for i in range(2, n):\r\n        if n % i == 0:\r\n            return True\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 3,
    "precondition": "n is an integer."
  },
  "4": {
    "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq\ndef heap_queue_largest(numbers, n):\r\n    return heapq.nlargest(n, numbers)\r\n\r\nprint(heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 4,
    "precondition": "numbers is a list of integers, and n is a positive integer such that n <= len(numbers)."
  },
  "6": {
    "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def differ_At_One_Bit_Pos(x,y):\r\n    res = (x ^ y) & (x | y)\r\n    return (res != 0 and bin(res).count(\"1\") == 1)\r\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 6,
    "precondition": "x and y are integers."
  },
  "7": {
    "specification": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "def find_char_long(string):\r\n    return set(filter(lambda x: len(x) >= 4, string.split()))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 7,
    "precondition": "string is a string."
  },
  "8": {
    "specification": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(numbers:\r\n\treturn [x*x for x in numbers]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 8,
    "precondition": "numbers is a list of numbers."
  },
  "9": {
    "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(str1):\r\n    n = len(str1)\r\n    for i in range(1,n):\r\n        if str1[i:] + str1[:i] == str1:\r\n            return i\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 9,
    "precondition": "str1 is a string."
  },
  "11": {
    "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(str1, ch*\r\n\tleft = str1.find(ch)\r\n\tright = str1.rfind(ch)\r\n\tif left == -1:\r\n\t\treturn str1*\r\n\telif right == -1:\r\n\t\treturn str1[:left]\r\n\telse:\r\n\t\treturn str1[:left] + str1[left+1:right] + str1[right+1:]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 11,
    "precondition": "str1 is a string and ch is a character such that ch is in str1."
  },
  "12": {
    "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(matrix):\r\n    matrix.sort(key=sum)\r\n    return matrix\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 12,
    "precondition": "matrix is a list of lists of numbers."
  },
  "14": {
    "specification": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_Volume(b, h, l:\r\n    return 0.5 * b * h * l\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 14,
    "precondition": "b, h, and l are all positive real numbers representing the base, height, and length of the triangular prism respectively."
  },
  "16": {
    "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "import re\ndef text_lowercase_underscore(text):\n    return bool(re.search('[a-z]+_[a-z]+', text))\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 16,
    "precondition": "text is a string."
  },
  "17": {
    "specification": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(side\\_length):\r\n    return 4 * side\\_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 17,
    "precondition": "side\\_length is a non-negative number."
  },
  "18": {
    "specification": "Write a function to remove characters from the first string which are present in the second string.",
    "code": "def remove_dirty_chars(str1, str2):\r\n\tfor x in str2:\r\n\t\tstr1 = str1.replace(x, \"\")\r\n\treturn str1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 18,
    "precondition": "str1 and str2 are both strings."
  },
  "19": {
    "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
    "code": "def test_duplicate(arr)\r\n\treturn len(arr) != len(set(arr))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 19,
    "precondition": "arr is a list of integers."
  },
  "20": {
    "specification": "Write a function to check if the given number is woodball or not.",
    "code": "def is_woodall(n):\r\n    return n == (n*(2**(n-1)))\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 20,
    "precondition": "n is an integer."
  },
  "56": {
    "specification": "Write a python function to check if a given number is one less than twice its reverse.",
    "code": "def check(n):\r\n    original_num = n\r\n    reverse = 0\r\n    while n > 0:\r\n        reverse = reverse * 10 + (n % 10)\r\n        n = n // 10\r\n    if original_num == 2 * reverse - 1:\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 56,
    "precondition": "n is an integer."
  },
  "57": {
    "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
    "code": "def find_Max_Num(arr*\r\n    arr.sort()\r\n    n = len(arr)\r\n    max_num = 0\r\n    pow = 1\r\n    while n > 0:\r\n        max_num += arr[n-1]*pow\r\n        pow *= 10\r\n        n -= 1\r\n    return max_num\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 57,
    "precondition": "arr is a list of digits (0 to 9), where each digit appears at most once."
  },
  "58": {
    "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
    "code": "def opposite_Signs(num1, num2)\r\n    if (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0):\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 58,
    "precondition": "num1 and num2 are integers."
  },
  "59": {
    "specification": "Write a function to find the nth octagonal number.",
    "code": "def is_octagonal(n):\r\n    return (n*(3*n - 1))//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 59,
    "precondition": "n is an integer."
  },
  "61": {
    "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
    "code": "def count_Substrings(str1):\r\n  count = 0\r\n  for i in range(len(str1):\r\n    temp = 0\r\n    for j in range(i,len(str1):\r\n      temp += int(str1[j])\r\n      if temp == j - i + 1:\r\n        count += 1\r\n  return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 61,
    "precondition": "str1 is a string."
  },
  "62": {
    "specification": "Write a python function to find smallest number in a list.",
    "code": "def smallest_num(lst):\r\n    return min(lst)\r\nprint(smallest_num([10, 20, 1, 45, 99]))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 62,
    "precondition": "lst is a list of integers."
  },
  "63": {
    "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "code": "def max_difference(arr)\r\n\treturn max(b[1]-a[0] for a, b in arr if a[1] > a[0] and b[1] > b[0] and a[1] < b[0])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 63,
    "precondition": "arr is a list of tuples, where each tuple is of the form (x, y) and x < y."
  },
  "64": {
    "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
    "code": "def subject_marks( subject\\_scores ):\r\n    return sorted(subject_scores, key=lambda x: x[1] )\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 64,
    "precondition": "subject\\_scores is a list of tuples where each tuple contains exactly two values."
  },
  "65": {
    "specification": "Write a function to flatten a list and sum all of its elements.",
    "code": "def recursive_list_sum(lst):\n    sum = 0\n    for i in lst:\n        if type(i) is not list:\n            sum += i\n        else:\n            sum += recursive_list_sum(i)\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 65,
    "precondition": "lst is a list that contains integers and/or other lists."
  },
  "66": {
    "specification": "Write a python function to count the number of positive numbers in a list.",
    "code": "def pos_count(num\\_list):\r\n    count = 0\r\n    for i in num\\_list:\r\n        if i > 0:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 66,
    "precondition": "num\\_list is a list of integers."
  },
  "67": {
    "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
    "code": "def bell_number(n):\r\n    if n == 0:\r\n        return 1\r\n    res = [0 for x in range(n)]\r\n    res[0], res[1] = 1, 1\r\n    for i in range(2, n):\r\n        temp = 0\r\n        for j in range(i,\r\n            res[i] = temp + res[j]\r\n    return res[n - 1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 67,
    "precondition": "n is a non-negative integer."
  },
  "68": {
    "specification": "Write a python function to check whether the given array is monotonic or not.",
    "code": "def is_Monotonic(arr):\r\n    return all(x <= y or x >= y for x, y in zip(arr, arr[1:]))\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 68,
    "precondition": "arr is a list of comparable elements."
  },
  "69": {
    "specification": "Write a function to check whether a list contains the given sublist or not.",
    "code": "def is_sublist(l1, l2):\r\n    flag = False\r\n    if len(l2) > len(l1):\r\n        return flag\r\n    for i in range(len(l1) - len(l2) + 1):\r\n        if l1[i:i+len(l2)] == l2:\r\n            flag = True\r\n    return flag\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 69,
    "precondition": "l1 and l2 are lists."
  },
  "70": {
    "specification": "Write a function to find whether all the given tuples have equal length or not.",
    "code": "def get_equal(test\\_tuples):\r\n    tup\\_len = len(test\\_tuples)\r\n    len\\_list = []\r\n    for i in range(tup\\_len):\r\n        len\\_list.append(len(test\\_tuples[i]))\r\n    if len\\_list.count(len\\_list[0]) == tup\\_len:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 70,
    "precondition": "test\\_tuples is a list of tuples."
  },
  "71": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def comb_sort(arr):\r\n    n = len(arr)\r\n    gap = n\r\n    swapped = True\r\n    while gap != 1 or swapped:\r\n        gap = int(gap/1.3)\r\n        if gap < 1:\r\n            gap = 1\r\n        swapped = False\r\n        for i in range(0, n-gap)\r\n            if arr[i] > arr[i+gap]:\r\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\r\n                swapped = True\r\n                print(arr)\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 71,
    "precondition": "arr is a list of comparable elements."
  },
  "72": {
    "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
    "code": "import math\ndef dif_Square(n):\n    root = int(math.sqrt(n))\n    for i in range(root, 0, -1):\n        if i*i - (n-i*i) == 0:\n            return True\n    return False\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 72,
    "precondition": "n is an integer."
  },
  "74": {
    "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
    "code": "def is_samepatterns(patterns1, patterns2):\r\n    return all(x == y for x, y in zip(patterns1, patterns2))\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 74,
    "precondition": "patterns1 and patterns2 are both lists or tuples of the same length."
  },
  "75": {
    "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "code": "def find_tuples(lst, k):\r\n    res = [i for i in lst if all([j % k == 0 for j in i])]\r\n    return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 75,
    "precondition": "lst is a list of tuples, and k is an integer."
  },
  "77": {
    "specification": "Write a python function to find whether a number is divisible by 11.",
    "code": "def is_Diff(n):\r\n    if n < 0:\r\n        return is_Diff(-n)\r\n    if n < 11:\r\n        return True\r\n    while n > 0:\r\n        x = n % 10\r\n        n = n // 10\r\n        if (n % 10 - x) % 11 != 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 77,
    "precondition": "n is an integer."
  },
  "79": {
    "specification": "Write a python function to check whether the length of the word is odd or not.",
    "code": "def word_len(word):\r\n    if len(word) % 2 != 0:\r\n        return True \r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 79,
    "precondition": "word is a string."
  },
  "80": {
    "specification": "Write a function to find the nth tetrahedral number.",
    "code": "def tetrahedral_number(n):\r\n    return (n * (n + 1) * (n + 2)) // 6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 80,
    "precondition": "n is an integer."
  },
  "82": {
    "specification": "Write a function to find the volume of a sphere.",
    "code": "import math\r\ndef volume_sphere(r):\r\n    return 4/3 * math.pi * (r**3)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 82,
    "precondition": "r is a positive real number (r > 0)."
  },
  "83": {
    "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
    "code": "def get_Char(str1):\r\n    result = 0\r\n    for i in str1:\r\n        result = (result + ord(i)) % 26\r\n    return chr(result + 97)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 83,
    "precondition": "str1 is a non-empty string containing only lowercase English characters."
  },
  "84": {
    "specification": "Write a function to find the nth number in the newman conway sequence.",
    "code": "def sequence(n):\r\n    if n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        a, b = 0, 1\r\n        for i in range(3, n + 1):\r\n            a, b = b, (a + b) % i\r\n        return b\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 84,
    "precondition": "n is a positive integer."
  },
  "85": {
    "specification": "Write a function to find the surface area of a sphere.",
    "code": "import math\r\ndef surfacearea_sphere(r):\r\n    return 4 * math.pi * r ** 2\r\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 85,
    "precondition": "r is a non-negative float representing the radius of the sphere."
  },
  "86": {
    "specification": "Write a function to find nth centered hexagonal number.",
    "code": "def centered_hexagonal_number(n):\r\n    return n * (2*n - 1) + 1\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 86,
    "precondition": "n is an integer."
  },
  "87": {
    "specification": "Write a function to merge three dictionaries into a single dictionary.",
    "code": "def merge_dictionaries_three(dict1, dict2, dict3):\r\n    final_dict = {**dict1, **dict2, **dict3}\r\n    return final_dict\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 87,
    "precondition": "dict1, dict2, and dict3 are dictionaries."
  },
  "88": {
    "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
    "code": "def freq_count(lst\r\n):\r\n    res = {}\r\n    for num in lst:\r\n        if num in res.keys:\r\n            res[num] += 1\r\n        else:\r\n            res[num] = 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 88,
    "precondition": "lst is a list of hashable elements."
  },
  "89": {
    "specification": "Write a function to find the closest smaller number than n.",
    "code": "def closest_num(n):\r\n    return n - 1 if n % 2 == 0 else n - 2\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 89,
    "precondition": "n is an integer."
  },
  "90": {
    "specification": "Write a python function to find the length of the longest word.",
    "code": "def len_log(words):\r\n    return len(max(words, key=len))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 90,
    "precondition": "words is a list of strings."
  },
  "91": {
    "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
    "code": "def find_substring(lst,s)\r\n    for i in lst:\r\n        if s in i:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 91,
    "precondition": "lst is a list of strings and s is a string."
  },
  "92": {
    "specification": "Write a function to check whether the given number is undulating or not.",
    "code": "def is_undulating(n):\r\n    if n < 0:\r\n        return False\r\n    first\\_digit = int(str(n)[0])\\\n    for i in range(1, len(str(n)))\\: \r\n        if (first\\_digit > int(str(n)[i]) and int(str(n)[i]) < int(str(n)[i+1])) or (first\\_digit < int(str(n)[i]) and int(str(n)[i]) > int(str(n)[i+1])):\r\n            first\\_digit = int(str(n)[i])\r\n        else:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 92,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "93": {
    "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
    "code": "def power(a, b):\r\n    return a ** b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 93,
    "precondition": "a and b are integers."
  },
  "94": {
    "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
    "code": "def index_minimum(tup\\_list):\r\n    min\\_index = 0\r\n    for i in range(len(tup\\_list)):\r\n        if tup\\_list[i][1] < tup\\_list[min\\_index][1]:\r\n            min\\_index = i\r\n    return tup\\_list[min\\_index][0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 94,
    "precondition": "tup\\_list is a list of tuples, where each tuple contains two integers."
  },
  "95": {
    "specification": "Write a python function to find the length of the smallest list in a list of lists.",
    "code": "def Find_Min_Length(lst\\_lst):\r\n    return min(len(i) for i in lst\\_lst)\r\n\r\nassert Find_Min_Length([[1],[1,2]]) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 95,
    "precondition": "lst\\_lst is a list of lists."
  },
  "96": {
    "specification": "Write a python function to find the number of divisors of a given integer.",
    "code": "def divisor(n):\r\n    count = 0\r\n    for i in range(1,n+1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 96,
    "precondition": "n is an integer."
  },
  "97": {
    "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
    "code": "def flatten_list(list\\_of\\_lists:\r\n    flat\\_list = []\r\n    for sublist in list\\_of\\_lists:\r\n        for elem in sublist:\r\n            flat\\_list.append(elem)\r\n    return flat\\_list\r\n\r\ndef frequency_lists(list\\_of\\_lists):\r\n    flat\\_list = flatten\\_list(list\\_of\\_lists)\r\n    freq\\_dict = {}\\\n    for num in flat\\_list:\r\n        if num in freq\\_dict:\r\n            freq\\_dict[num] += 1\r\n        else:\r\n            freq\\_dict[num] = 1\r\n    return freq\\_dict\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 97,
    "precondition": "list\\_of\\_lists is a list of lists where each element is a list of integers."
  },
  "98": {
    "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "code": "import math\r\ndef multiply_num(numbers):\r\n\tmul = 1\r\n\tfor i in numbers:\r\n\t\tmul = mul * i \r\n\treturn mul/len(numbers)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 98,
    "precondition": "numbers is a list of non-zero numbers."
  },
  "99": {
    "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
    "code": "def decimal_to_binary(n):\r\n    if n == 0:\r\n        return \"0\"\r\n    else:\r\n        binary\\_number = \"\"\r\n        while n > 0:\r\n            binary\\_number += str(n % 2)\r\n            n //= 2\r\n        return binary\\_number[::-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 99,
    "precondition": "n is an integer."
  },
  "100": {
    "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
    "code": "def is_palindrome(n):\r\n    return str(n) == str(n)[::-1]\r\n\r\ndef next_smallest_palindrome(n):\r\n    n+=1\r\n    while(not is_palindrome(n))\r\n        n+=1\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 100,
    "precondition": "n is an integer."
  },
  "101": {
    "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
    "code": "def kth_element(arr, k):\r\n    return sorted(arr)[k-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 101,
    "precondition": "arr is a list of comparable elements, and k is an integer such that 1 <= k <= len(arr)."
  },
  "102": {
    "specification": "Write a function to convert a snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_case\\_string):\r\n    words = snake\\_case\\_string.split(\"_\")\r\n    if len(words) > 1:\r\n        for i in range(1, len(words));\r\n            words[i] = words[i].capitalize()\r\n        return \"\".join(words)\r\n    else:\r\n        return snake\\_case\\_string\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 102,
    "precondition": "snake\\_case\\_string is a string."
  },
  "103": {
    "specification": "Write a function to find the Eulerian number a(n, m).",
    "code": "def eulerian_num(n, m):\r\n    if n == 0 and m == 0:\r\n        return 1\r\n    elif n > 0:\r\n        if m == 0:\r\n            return 0\r\n        else:\r\n            ans = 0\r\n            for k in range(1, min(m, n-m) + 1):\r\n                ans += (-1)**k * eulerian_num(n-k-1, m-k)\r\n            return ans\r\n    else:\r\n        return 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 103,
    "precondition": "n and m are non-negative integers such that m <= n."
  },
  "104": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(lst): \r\n    return [sorted(sub) for sub in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 104,
    "precondition": "lst is a list of lists, where each element of lst is a list of strings."
  },
  "105": {
    "specification": "Write a python function to count true booleans in the given list.",
    "code": "def count(lst):*\r\n  return sum(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 105,
    "precondition": "lst is a list of booleans."
  },
  "106": {
    "specification": "Write a function to append the given list to the given tuples.",
    "code": "def add_lists(lst, tup*\r\n  tup += tuple(lst)\r\n  return tup\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 106,
    "precondition": "lst is a list and tup is a tuple of any size."
  },
  "108": {
    "specification": "Write a function to merge three lists into a single sorted list.",
    "code": "def merge_sorted_list(*args):\r\n  res = sorted(sum(args, []))\r\n  return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 108,
    "precondition": "args is a variable number of lists of comparable elements that can be sorted."
  },
  "109": {
    "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
    "code": "def odd_Equivalent(str1, num)\r\n\tcount = 0\r\n\tfor i in range(num):\r\n\t\tstr1 = str1[-1] + str1[:-1]\r\n\t\tif bin(int(str1)).count(\"1\") % 2 != 0:\r\n\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 109,
    "precondition": "str1 is a string and num is an integer."
  },
  "111": {
    "specification": "Write a function to find the common elements in given nested lists.",
    "code": "def common_in_nested_lists(*args):\r\n    set_of_ele = set()\n    for list\\_ in args:\r\n        set\\_of\\_ele = set\\_of\\_ele.union(set(list\\_))\r\n    common\\_elements = set()\r\n    for element in set\\_of\\_ele:\r\n        if set\\_of\\_ele.count(element) > 1:\r\n            common\\_elements.add(element)\r\n    return common\\_elements\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 111,
    "precondition": "args is a variable number of arguments, where each argument is a list of numbers or a nested list of numbers."
  },
  "113": {
    "specification": "Write a function to check if a string represents an integer or not.",
    "code": "import re\r\ndef check_integer(s):\r\n    return bool(re.match(r'^-?\\d+$', s))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 113,
    "precondition": "s is a string."
  },
  "115": {
    "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
    "code": "def empty_dit(diclist:\r\n    for i in diclist:\r\n        if bool(i):\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 115,
    "precondition": "diclist is a list of dictionaries."
  },
  "116": {
    "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
    "code": "def tuple_to_int(tup)\r\n    result = 0\r\n    for i in tup:\r\n        result = result * 10 + i\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 116,
    "precondition": "tup is a tuple of positive integers."
  },
  "117": {
    "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
    "code": "def list_to_float(lst):\r\n    for i in range(len(lst));\r\n        lst[i] = [float(j) for j in lst[i]]\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 117,
    "precondition": "lst is a list of lists."
  },
  "118": {
    "specification": "Write a function to convert a string to a list of strings split on the space character.",
    "code": "def string_to_list(str1):\r\n    return str1.split()\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 118,
    "precondition": "str1 is a string."
  },
  "119": {
    "specification": "Write a python function to find the element that appears only once in a sorted array.",
    "code": "def search(arr):\r\n    for i in range(len(arr)-1):\r\n        if arr[i] != arr[i+1]:\r\n            return arr[i+1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 119,
    "precondition": "arr is a sorted list of integers."
  },
  "120": {
    "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
    "code": "def max_product_tuple(lst):\r\n    return max(i*j for i, j in lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 120,
    "precondition": "lst is a list of tuples containing two integers each."
  },
  "123": {
    "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "code": "def sum_divisors(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        if n % i == 0:\r\n            sum += i\r\n    return sum\r\n\r\ndef is_amicable(n /***/2):\r\n    if sum_divisors(n) == m and sum_divisors(m) == n and n != m:\r\n        return True\r\n    return False\r\n\r\ndef amicable_numbers_sum(n /***/2):\r\n    sum = 0\r\n    for i in range(2, n /***/2 + 1 /***/2):\r\n        if is_amicable(i /***/2):\r\n            sum += i /***/2 + n /***/2\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 123,
    "precondition": "n is a positive integer."
  },
  "124": {
    "specification": "Write a function to get the angle of a complex number.",
    "code": "import cmath\r\ndef angle_complex(real, imag\u00a0):\r\n\tc = complex(real, imag)\r\n\tangle = c.argument()\r\n\treturn angle\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 124,
    "precondition": "real and imag are real numbers."
  },
  "125": {
    "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "code": "def find_length(binary\\_string):\r\n    max\\_diff = 0\r\n    temp\\_diff = 0\r\n    count\\_1 = 0\r\n    count\\_0 = 0\r\n    for i in range(len(binary\\_string))\r\n        if binary\\_string[i] == \"1:\r\n            count\\_1 += 1\r\n            count\\_0 = 0\r\n            temp\\_diff = count\\_1 - count\\_0\r\n        elif binary\\_string[i] == \"0:\r\n            count\\_0 += 1\r\n            count\\_1 = 0\r\n            temp\\_diff = count\\_1 - count\\_0\r\n        if temp\\_diff > max\\_diff:\r\n            max\\_diff = temp\\_diff\r\n    return max\\_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 125,
    "precondition": "binary\\_string is a string of characters from the set {0, 1}."
  },
  "126": {
    "specification": "Write a python function to find the sum of common divisors of two given numbers.",
    "code": "def sum_of_common_divisors(n1, n2):\r\n    min_num = min(n1, n2)\r\n    sum = 0\r\n    for i in range(1, min_num + 1):\r\n        if n1 % i == 0 and n2 % i == 0:\r\n            sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 126,
    "precondition": "n1 and n2 are positive integers."
  },
  "127": {
    "specification": "Write a function to multiply two integers.",
    "code": "def multiply_int(a, b):\r\n    return a*b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 127,
    "precondition": "a and b are integers."
  },
  "128": {
    "specification": "Write a function to find words that are longer than n characters from a given list of words.",
    "code": "def long_words(n,sentence): \r\n    words = sentence.split() \r\n    res = [x for x in words if len(x) > n]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 128,
    "precondition": "n is an integer, and sentence is a string containing a list of words separated by whitespace."
  },
  "129": {
    "specification": "Write a function to calculate whether the matrix is a magic square.",
    "code": "def is_magic_square(matrix): \r\n    side = len(matrix)\r\n    if side <= 0:\r\n        return False\r\n    if side == 1:\r\n        return True\r\n    magic_constant = (side \\* ((side ** 2) + 1))\r\n    # Check each row\r\n    for row in matrix:\r\n        if sum(row) != magic_constant:\r\n            return False\r\n    # Transpose the matrix\r\n    matrix = list(map(list, zip(*matrix))\r\n    # Check each column\r\n    for col in matrix:\r\n        if sum(col) != magic_constant:\r\n            return False\r\n    # Check the two diagonals\r\n    if (sum(matrix[i][i]) != magic_constant for i in range(side))\r\n        or sum(matrix[i][side - i - 1]) != magic_constant for i in range(side)):\r\n        return False\r\n    return True\r\n\r\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 129,
    "precondition": "matrix is a square list of integers, where the side length is a positive integer."
  },
  "130": {
    "specification": "Write a function to find the item with maximum frequency in a given list.",
    "code": "def max_occurrences(inlist):\r\n    if len(inlist) > 0:\r\n        item_freq = {}\\\n        for item in inlist:\r\n            if item in item_freq:\r\n                item_freq[item] += 1\r\n            else:\r\n                item_freq[item] = 1\r\n        max_freq = max(item_freq.values())\r\n        for key, value in item_freq.items():\r\n            if value == max_freq:\r\n                return key\r\n    return -1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 130,
    "precondition": "inlist is a list of hashable elements."
  },
  "131": {
    "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
    "code": "def reverse_vowels(s):\r\n    vowels = \"aeiouAEIOU\"\r\n    s = list(s)\r\n    i, j = 0, len(s) - 1\r\n    while i < j:\r\n        if s[i] not in vowels:\r\n            i += 1\r\n        elif s[j] not in vowels:\r\n            j -= 1\r\n        else:\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n    return \"\".join(s)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 131,
    "precondition": "s is a string."
  },
  "132": {
    "specification": "Write a function to convert a tuple to a string.",
    "code": "def tup_string(tup):\r\n    return ''.join(tup)\r\n   \nOR\n\ndef tup_string(tup):\r\n    str1 = \"\"\r\n    for i in tup:\r\n        str1 += i\r\n    return str1\r\n\r\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 132,
    "precondition": "tup is a tuple of characters."
  },
  "133": {
    "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
    "code": "def sum_negativenum(lst:\r\n    return sum(x for x in lst if x < 0)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 133,
    "precondition": "lst is a list of numbers."
  },
  "135": {
    "specification": "Write a function to find the nth hexagonal number.",
    "code": "def hexagonal_num(n):\r\n    return int((n*(2*n-2)) + 1*\r\n                )/2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 135,
    "precondition": "n is an integer."
  },
  "137": {
    "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
    "code": "def zero_count(array beginnetje\n\tzero_count = array.count(0)\r\n\tnon_zero_count = len(array) - zero_count\r\n\tratio = zero_count / non_zero_count\r\n\treturn ratio\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 137,
    "precondition": "array is a list of integers."
  },
  "138": {
    "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    if n == 1:\r\n        return True\r\n    while n % 2 == 0:\r\n        n = n / 2\r\n    if n == 1:\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 138,
    "precondition": "n is an integer."
  },
  "139": {
    "specification": "Write a function to find the circumference of a circle.",
    "code": "import math\r\ndef circle_circumference(radius):\r\n\treturn 2*math.pi*radius\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 139,
    "precondition": "radius is a positive real number."
  },
  "140": {
    "specification": "Write a function to flatten the list of lists into a single set of numbers.",
    "code": "def extract_singly(nested\\_list):\r\n\tresult = set()\r\n\tfor sublist in nested\\_list:\r\n\t\tfor item in sublist:\r\n\t\t\tresult.add(item)\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 140,
    "precondition": "nested\\_list is a list of lists of numbers."
  },
  "141": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def pancake_sort(arr,\r\n  n = len(arr):\r\n  for i in range(2, n+1):\r\n    for j in range(1, n+1)\r\n      if arr[j] < arr[j-1\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e]:\n        arr[j], arr[j-1] = arr[j-1], arr[j]\r\n  return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 141,
    "precondition": "arr is a list of comparable elements."
  },
  "142": {
    "specification": "Write a function to count number items that are identical in the same position of three given lists.",
    "code": "def count_samepair(list1, list2, list3):\r\n\tcount = 0\r\n\tfor i in range(len(list1):\r\n\t\tif list1[i] == list2[i] and list2[i] == list3[i]:\r\n\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 142,
    "precondition": "list1, list2, and list3 are lists of the same length."
  },
  "143": {
    "specification": "Write a function to find number of lists present in the given tuple.",
    "code": "def find_lists(tup\",\r\n    count = 0\r\n    for i in tup:\r\n        if type(i) is list:\r\n            count += 1\r\n    return count\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 143,
    "precondition": "tup is a tuple."
  },
  "145": {
    "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
    "code": "def max_Abs_Diff(arr):\r\n    return max(arr) - min(arr)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 145,
    "precondition": "arr is a non-empty list of numbers."
  },
  "160": {
    "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
    "code": "def extended_gcd(a, b)\r\n    if b == 0:\r\n        return (1, 0)\r\n    else:\r\n        g, y = extended_gcd(b, a % b)\r\n        x = y - (a // b) * g\r\n        return (g, x)\r\n\r\ndef find_solution(a, b, n):\r\n    g, x = extended_gcd(a, b)\r\n    if n % g != 0:\r\n        return None\r\n    else:\r\n        return (x * (n // g), b // g)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 160,
    "precondition": "a, b and n are integers such that a and b are non-zero."
  },
  "161": {
    "specification": "Write a function to remove all elements from a given list present in another list.",
    "code": "def remove_elements(lst, rem\\_lst):\r\n    for i in rem_lst:\r\n        if i in lst:\r\n            lst.remove(i)\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 161,
    "precondition": "lst and rem\\_lst are lists."
  },
  "162": {
    "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
    "code": "def sum_series(n):\r\n    sum = 0\r\n    for i in range(n // 2 + 1):\r\n        sum += n - 2 * i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 162,
    "precondition": "n is an integer such that n >= 0."
  },
  "163": {
    "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
    "code": "import math\ndef area_polygon(sides, length):\n\tangle = (sides - 2) * (math.pi / sides)\n\tarea = 0.5 * length * length * math.sin(angle) * sides / (math.tan(angle / sides))\n\treturn area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 163,
    "precondition": "sides is a positive integer, and length is a positive real number."
  },
  "164": {
    "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
    "code": "def sum_of_divisors(n):\r\n    total = 1\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            total += i + (n//i) if i != (n//i) else 0\r\n    return total\r\n\r\ndef are_equivalent(num1, num2):\r\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 164,
    "precondition": "num1 and num2 are integers greater than 0."
  },
  "165": {
    "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
    "code": "def count_char_position(st:\r\n    return sum(1 for c1, c2 in zip(st.lower(), \"abcdefghijklmnopqrstuvwxyz\") if c1 == c2)\r\n\r\nassert count_char_position(\"xbcefg\") == 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 165,
    "precondition": "st is a string."
  },
  "166": {
    "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
    "code": "def find_even_pair(numbers):\r\n    num_count = 0\r\n    for i in range(len(numbers))\r\n        for j in range(len(numbers):\r\n            if i != j:\r\n                if (numbers[i] ^ numbers[j]) % 2 == 0:\r\n                    num_count += 1\r\n    return num_count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 166,
    "precondition": "numbers is a list of integers."
  },
  "167": {
    "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
    "code": "import math\r\ndef next_power_of_2(n):\r\n    return int(pow(2, math.ceil(math.log(n, 2))))\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 167,
    "precondition": "n is a positive integer."
  },
  "168": {
    "specification": "Write a function to count the number of occurrences of a number in a given list.",
    "code": "def frequency(lst, num):\r\n  return lst.count(num)\r\n \nassert frequency([1,2,3], 4) == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 168,
    "precondition": "lst is a list of integers and num is an integer."
  },
  "170": {
    "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
    "code": "def sum_range_list(lst, low, high)\r\n\treturn sum(lst[low:high+1])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 170,
    "precondition": "lst is a list of numbers, low and high are integers such that 0 <= low <= high < len(lst)."
  },
  "171": {
    "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
    "code": "import math\r\ndef perimeter_pentagon(side\\_length):\r\n    return 5 * side\\_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 171,
    "precondition": "side\\_length is a positive real number representing the length of a side of a regular pentagon."
  },
  "172": {
    "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
    "code": "def count_occurance(str1):\r\n\treturn str1.count('std')\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 172,
    "precondition": "str1 is a string."
  },
  "222": {
    "specification": "Write a function to check if all the elements in tuple have same data type or not.",
    "code": "def check_type(tup):\r\n    return all(type(i) == type(tup[0]) for i in tup)\r\n\r\nassert check_type((5, 6, 7, 3, 5, 6)) == True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 222,
    "precondition": "tup is a tuple."
  },
  "223": {
    "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
    "code": "def is_majority(arr, n, x):\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    mid = n//2\r\n    if (x > arr[mid] and x < arr[mid + 1]) or (x >= arr[mid] and x <= arr[mid + 1] and (mid + 1) > n//2):\r\n        return is_majority(arr, mid + 1, x)\r\n    elif x >= arr[mid]:\r\n        return is_majority(arr, mid, x)\r\n    else:\r\n        return is_majority(arr, mid + 1, x)\r\n\r\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 223,
    "precondition": "arr is a sorted array of integers, n is a non-negative integer such that 0 <= n <= len(arr), and x is an integer."
  },
  "224": {
    "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
    "code": "def count_Set_Bits(n):\r\n    res = 0\r\n    while (n)\r\n        res += n & 1\r\n        n >>= 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 224,
    "precondition": "n is an integer."
  },
  "226": {
    "specification": "Write a python function to remove the characters which have odd index values of a given string.",
    "code": "def odd_values_string(str1):\r\n    result = ''\r\n    for i in range(len(str1):\r\n        if i % 2 == 0:\r\n            result += str1[i]\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 226,
    "precondition": "str1 is a string."
  },
  "227": {
    "specification": "Write a function to find minimum of three numbers.",
    "code": "def min_of_three(x, y, z)\r\n\treturn min(x, y, z)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 227,
    "precondition": "x, y, and z are comparable values."
  },
  "228": {
    "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
    "code": "def all_Bits_Set_In_The_Given_Range(n, start, end):\r\n    result = 0\r\n    for i in range(start - 1, end)\r\n        result = (result | (1 << i))\r\n    if result == (n & result):\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 228,
    "precondition": "n is an integer, start and end are integers such that 0 <= start <= end <= 32."
  },
  "229": {
    "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
    "code": "def re_arrange_array(arr, n)\r\n    negative = []\r\n    positive = []\r\n    for i in range(n)\r\n        if arr[i] < 0:\r\n            negative.append(arr[i])\r\n        else:\r\n            positive.append(arr[i])\r\n    j = 0\r\n    for i in range(n):\r\n        if arr[i] < 0:\r\n            arr[i] = negative[j]\r\n            j += 1\r\n        else:\r\n            arr[i] = positive[i-j]\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 229,
    "precondition": "arr is an array of integers, and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "230": {
    "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
    "code": "def replace_blank(test_str, char):\r\n    result = test_str.replace(\" \", char)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 230,
    "precondition": "test\\_str is a string, and char is a single character."
  },
  "232": {
    "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
    "code": "def larger_nnum(num_list, n):\r\n    return [i for i, _ in sorted(num_list, reverse=True)[:n]]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 232,
    "precondition": "num\\_list is a list of comparable elements, and n is an integer such that 0 <= n <= len(num\\_list)."
  },
  "233": {
    "specification": "Write a function to find the lateral surface area of a cylinder.",
    "code": "import math\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 233,
    "precondition": "radius is a positive real number, and height is a positive real number."
  },
  "234": {
    "specification": "Write a function to find the volume of a cube given its side length.",
    "code": "def volume_cube(side\\_length):\r\n    return side\\_length ** 3\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 234,
    "precondition": "side\\_length is a positive real number."
  },
  "235": {
    "specification": "Write a python function to set all even bits of a given number.",
    "code": "def even_bit_set_number(n):\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 235,
    "precondition": "n is an integer."
  },
  "237": {
    "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
    "code": "def check_occurences(list\\_of\\_tuples):\r\n    result = {}\r\n    for i in list\\_of\\_tuples:\r\n        if i in result:\r\n            result[i] += 1\r\n        else:\r\n            result[i] = 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 237,
    "precondition": "list\\_of\\_tuples is a list of tuples."
  },
  "238": {
    "specification": "Write a python function to count the number of non-empty substrings of a given string.",
    "code": "def number_of_substrings(s):\r\n    n = len(s)\r\n    return (n*(n+1))//2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 238,
    "precondition": "s is a string."
  },
  "239": {
    "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
    "code": "def get_total_number_of_sequences(m, n)\r\n\trange_set = set()\r\n\tfor i in range(2, m + 1):\r\n\t\trange_set.add(i)\r\n\t\tfor j in range(2, m + 1):\r\n\t\t\tif i * 2 <= j and j <= i * m:\r\n\t\t\t\trange_set.add(j)\r\n\treturn len(power_set(range_set, n))\r\n\r\ndef power_set(set_val, length):\r\n\tif length == 1:\r\n\t\treturn set([el for el in set_val\u0450\n\tresult = set()\r\n\tfor i in range(1, length + 1):\r\n\t\tresult = result.union(set([a + (b,) for a in power_set(set_val, i) for b in set_val]))\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 239,
    "precondition": "m and n are positive integers such that m >= 2 and n >= 1."
  },
  "240": {
    "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "code": "def replace_list(lst1, lst2):\r\n    lst1[-1:] = lst2\r\n    return lst1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 240,
    "precondition": "lst1 and lst2 are lists."
  },
  "242": {
    "specification": "Write a function to count the total number of characters in a string.",
    "code": "def count_charac(str1):\r\n    return (len(str1))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 242,
    "precondition": "str1 is a string."
  },
  "244": {
    "specification": "Write a python function to find the next perfect square greater than a given number.",
    "code": "import math\ndef next_Perfect_Square(n):\r\n\treturn math.ceil(n**0.5)**2\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 244,
    "precondition": "n is a real number."
  },
  "245": {
    "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
    "code": "def max_sum(arr:\r\n    n = len(arr)\r\n    inc = [0 for i in range(n)]\r\n    dec = [0 for i in range(n)]\r\n    inc[0], dec[-1] = arr[0], arr[-1]\r\n    for i in range(1, n):\r\n        if arr[i] > inc[i - 1\u7f00]\r\n            inc[i] = arr[i]\r\n        else:\r\n            inc[i] = inc[i - 1]\r\n    for i in range(n - 2, -1, -1):\r\n        if arr[i] > dec[i + 1]\r\n            dec[i] = arr[i]\r\n        else:\r\n            dec[i] = dec[i + 1]\r\n    res = dec[0]\r\n    for i in range(1, n):\r\n        res = max(res, inc[i] + dec[i])\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 245,
    "precondition": "arr is a list of integers."
  },
  "246": {
    "specification": "Write a function for computing square roots using the babylonian method.",
    "code": "def babylonian_squareroot(number, precision = 0.000001):\r\n\tnum = number\r\n\twhile True:\r\n\t\tguess = (num + number/num)/2\r\n\t\tif abs(guess - num) < precision:\r\n\t\t\tbreak\r\n\t\tnum = guess\r\n\treturn guess\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 246,
    "precondition": "number is a non-negative float, and precision is a positive float."
  },
  "247": {
    "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
    "code": "def lps(string)\r\n\tn = len(string)\r\n\ttable = [[0 for x in range(n)] for x in range(n)]\r\n\tfor i in range (n):\r\n\t\ttable[i][i] = 1\r\n\tfor cl in range(2, n + 1):\r\n\t\tfor i in range(n - cl + 1):\r\n\t\t\tj = i + cl - 1\r\n\t\t\tif (string[i] == string[j] and cl > 2):\r\n\t\t\t\ttable[i][j] = table[i + 1][j - 1] + 2\r\n\t\t\telif (string[i] == string[j] and cl == 2\r\n\t\t\t\ttable[i][j] = 2\r\n\t\t\telse:\r\n\t\t\t\ttable[i][j] = max(table[i][j - 1], table[i + 1][j])\r\n\treturn table[0][n - 1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 247,
    "precondition": "string is a non-empty string."
  },
  "248": {
    "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
    "code": "import math\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(2, n+1):\n        sum += 1/float(i)\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 248,
    "precondition": "n is a positive integer."
  },
  "249": {
    "specification": "Write a function to find the intersection of two arrays.",
    "code": "def intersection_array(arr1, arr2):\r\n  res = [value for value in arr1 if value in arr2]\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 249,
    "precondition": "arr1 and arr2 are lists of comparable elements."
  },
  "250": {
    "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
    "code": "def count_X(tup, x):\r\n    return tup.count(x)\r\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 250,
    "precondition": "tup is a tuple and x is an element."
  },
  "251": {
    "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
    "code": "def insert_element(lst, element):\r\n    return [element] + [element + i for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 251,
    "precondition": "lst is a list and element is an object that can be added to elements in the list."
  },
  "252": {
    "specification": "Write a python function to convert complex numbers to polar coordinates.",
    "code": "import cmath\r\ndef convert(number):\r\n    result = (cmath.polar(number))\r\n    return (result)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 252,
    "precondition": "number is a complex number."
  },
  "253": {
    "specification": "Write a python function that returns the number of integer elements in a given list.",
    "code": "def count_integer(lst):\r\n\treturn sum(1 for x in lst if isinstance(x, int))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 253,
    "precondition": "lst is a list."
  },
  "255": {
    "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
    "code": "def combinations_colors(lst,n):\r\n\treturn [tuple(i) for i in list(itertools.product(lst, repeat=n))]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 255,
    "precondition": "lst is a list of unique hashable objects, and n is a non-negative integer such that 0 <= n <= len(lst)."
  },
  "256": {
    "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
    "code": "import math\r\ndef count_Primes_nums(n):\r\n    if n < 2:\r\n        return 0\r\n    else:\r\n        count = 0\r\n        for i in range(2, n):\r\n            for j in range(2, int(math.sqrt(i)) + 1):\r\n                if i % j == 0:\r\n                    break\r\n            else:\r\n                count += 1\r\n        return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 256,
    "precondition": "n is an non-negative integer."
  },
  "257": {
    "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
    "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 257,
    "precondition": "num1 and num2 are real numbers."
  },
  "259": {
    "specification": "Write a function to maximize the given two tuples.",
    "code": "def maximize_elements(tup1, tup2):\r\n    res = tuple(max(x, y) for x, y in sorted(zip(tup1, tup2))\r\n    )\r\n    )\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 259,
    "precondition": "tup1 and tup2 are tuples of the same length."
  },
  "260": {
    "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "code": "Program:\n```\nimport math\r\ndef newman_prime(n):\r\n    result = 2\r\n    count = 1\r\n    nextPrime = 3\r\n    while count < n:\r\n        if is\\_prime(nextPrime):\r\n            count += 1\r\n            result = nextPrime\r\n        nextPrime += 2\r\n    return result\r\ndef is\\_prime(num):\r\n    if num < 2:\r\n        return False\r\n    for i in range(2, int(math.sqrt(num)) + 1):\r\n        if num % i == 0:\r\n            return False\r\n    return True",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 260,
    "precondition": "n is a positive integer."
  },
  "261": {
    "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
    "code": "def division_elements(tup1, tup2):\r\n    if len(tup1) != len(tup2)\r\n        return \"Error: Tuples are not of the same length\"\r\n    res = []\n    for i in range(len(tup1))\r\n        if tup2[i] == 0:\r\n            return \"Error: Division by zero\"\r\n        res.append(tup1[i] / tup2[i])\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 261,
    "precondition": "tup1 and tup2 are tuples of the same length, and all elements of tup2 are non-zero."
  },
  "262": {
    "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
    "code": "def split_two_parts(lst,l)\r\n\treturn (lst[:l], lst[l:])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 262,
    "precondition": "lst is a list and L is an integer such that 0 <= L <= len(lst)."
  },
  "264": {
    "specification": "Write a function to calculate a dog's age in dog's years.",
    "code": "def dog_age(human_age):\r\n    if human_age <= 1:\r\n        dog_age = human_age * 15\r\n    else:\r\n        dog_age = 15 + (human_age - 1) * 7\r\n    return dog_age\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 264,
    "precondition": "human\\_age is an integer greater than or equal to 0."
  },
  "265": {
    "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
    "code": "def list_split(lst, n):\r\n    result = []\r\n    for i in range(0, len(lst), n):\r\n        result.append(lst[i:i+n])\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 265,
    "precondition": "lst is a list, and n is an integer such that n > 0."
  },
  "266": {
    "specification": "Write a function to find the lateral surface area of a cube given its side length.",
    "code": "def lateralsurface_cube(side\\_length):\r\n\treturn 4\\*side\\_length\\*\\*2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 266,
    "precondition": "side\\_length is a positive real number."
  },
  "267": {
    "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
    "code": "def square_sum(n):\r\n    sum = 0\r\n    i = 1\r\n    while n > 0:\r\n        sum += (i*i)\r\n        i += 2\r\n        n -= 1\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 267,
    "precondition": "n is an integer."
  },
  "268": {
    "specification": "Write a function to find the n'th star number.",
    "code": "def find_star_num(n):\r\n    star_num = 1\r\n    dots = 1\r\n    while n > 1:\r\n        dots += 1\r\n        if (dots % 4) == 0:\r\n            dots += 1\r\n        star_num += dots\r\n        n -= 1\r\n    return star_num\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 268,
    "precondition": "n is a positive integer."
  },
  "269": {
    "specification": "Write a function to find the ascii value of a character.",
    "code": "def ascii_value(c):\r\n  return ord(c)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 269,
    "precondition": "c is a single-character string."
  },
  "270": {
    "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
    "code": "def sum_even_and_even_index(numbers):\r\n    sum = 0\r\n    for i in range(len(numbers\\[0:])):\r\n        if i % 2 == 0 and numbers[i] % 2 == 0:\r\n            sum += numbers[i]\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 270,
    "precondition": "numbers is a list of integers."
  },
  "271": {
    "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
    "code": "def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += (2*i)**5\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 271,
    "precondition": "n is an integer."
  },
  "272": {
    "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
    "code": "def rear_extract(ltuple:\r\n\treturn [x[-1] for x in ltuple]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 272,
    "precondition": "ltuple is a list of tuples."
  },
  "273": {
    "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
    "code": "def substract_elements(tup1, tup2):\r\n  res = tuple(x-y for x,y in zip(tup1, tup2))\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 273,
    "precondition": "tup1 and tup2 are tuples of the same length."
  },
  "274": {
    "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
    "code": "def even_binomial_Coeff_Sum(n):\r\n    result = 0\r\n    for i in range(n:\r\n        result += binomial_coeff(n, i)\r\n        i += 2\r\n    return result\r\ndef binomial_coeff(n, k):\r\n    if k > n - k:\r\n        k = n - k\r\n    num = 1\r\n    for i in range(k\r\n        num *= n\r\n        n -= 1\r\n    den = 1\r\n    for i in range(1, k + 1):\r\n        den *= i\r\n    return num // den\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 274,
    "precondition": "n is a positive integer."
  },
  "276": {
    "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
    "code": "import math\r\ndef volume_cylinder(radius, height):\r\n    return math.pi * (radius ** 2) * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 276,
    "precondition": "radius and height are numbers and are non-negative."
  },
  "277": {
    "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
    "code": "def dict_filter(dic,n):\r\n    return {k:v for k,v in dic.items() if v>=n}\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 277,
    "precondition": "dic is a dictionary and n is an integer."
  },
  "278": {
    "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
    "code": "def count_first_elements(tup)\r\n\treturn sum(1 for i in tup if not isinstance(i, tuple))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 278,
    "precondition": "tup is a tuple."
  },
  "279": {
    "specification": "Write a function to find the nth decagonal number.",
    "code": "def is_num_decagonal(n):\r\n    return (n*(3*n - 5))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 279,
    "precondition": "Specification: Write a function to find the nth decagonal number.\n\nThe nth decagonal number is calculated by the formula:\nn*(3*n - 5)\n\nThe precondition for the function is:\nn is an integer greater than or equal to 1.\n\nHere's the code for the function:\n```python\ndef nth_decagonal(n):\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return n * (3 * n - 5)\n```\nThe function raises a `ValueError` if the input `n` is less than 1."
  },
  "280": {
    "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
    "code": "def sequential_search(arr, ele)\r\n\tfor i in range(len(arr))\r\n\t\tif arr[i] == ele:\r\n\t\t\treturn (True, i)\r\n\treturn (False, -1)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 280,
    "precondition": "arr is an array-like object (e.g. list) and ele is an element of any type."
  },
  "281": {
    "specification": "Write a python function to check if the elements of a given list are unique or not.",
    "code": "def all_unique(lst /***/\n    return len(lst) == len(set(lst))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 281,
    "precondition": "lst is a list."
  },
  "282": {
    "specification": "Write a function to subtract two lists element-wise.",
    "code": "def sub_list(lst1, lst2):\r\n    return [i-j for i, j in zip(lst1, lst2)]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 282,
    "precondition": "lst1 and lst2 are lists of same length."
  },
  "283": {
    "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
    "code": "from collections import Counter\r\ndef validate(n):\r\n    count = Counter(map(int, str(n)))\r\n    for i in count:\r\n        if count[i] > i:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 283,
    "precondition": "n is an integer."
  },
  "284": {
    "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "code": "def check_element(lst, element):\r\n    return all(x == element for x in lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 284,
    "precondition": "lst is a list and element is any object."
  },
  "285": {
    "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
    "code": "def text_match_two_three(text:\r\n    pattern = r'ab{2,3}'\r\n    match = re.search(pattern, text)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 285,
    "precondition": "text is a string."
  },
  "286": {
    "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
    "code": "def max_sub_array_sum_repeated(arr, k, size)\r\n\r\n    n = len(arr)\r\n    repArr = [0 for x in range(k * n)]\r\n    for i in range(k * n):\r\n        repArr[i] = arr[i % n]\r\n\r\n    max_so_far = repArr[0]\r\n    max_ending_here = repArr[0]\r\n\r\n    for i in range(1, k * n):\r\n        max_ending_here = max(repArr[i], max_ending_here + repArr[i])\\\n        if (max_ending_here < 0):\r\n            max_ending_here = 0\r\n        if (max_so_far < max_ending_here):\r\n            max_so_far = max_ending_here\r\n\r\n    return max_so_far\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 286,
    "precondition": "arr is a list of integers, k and size are non-negative integers such that 0 <= k * size >= len(arr)"
  },
  "287": {
    "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
    "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += (2*i)**2\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 287,
    "precondition": "n is an integer."
  },
  "290": {
    "specification": "Write a function to find the list of maximum length in a list of lists.",
    "code": "def max_length(lst): \r\n\tmax_l = max(len(l) for l in lst)\r\n\tmax_sublist = [item for item in lst if len(item) == max_l]\r\n\treturn max_l, max_sublist\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 290,
    "precondition": "lst is a list of lists."
  },
  "291": {
    "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "code": "def count_no_of_ways(n, k)\r\n    if n == 1:\r\n        return k\r\n    elif n == 2:\r\n        return k*k\r\n    else:\r\n        same, diff = k, k*(k-1)\r\n        for i in range(3, n+1):\r\n            same, diff = diff, diff + same\r\n        return same + diff\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 291,
    "precondition": "n and k are non-negative integers such that n >= 1 and k >= 1."
  },
  "292": {
    "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
    "code": "def find(num1, num2):\r\n  return num1 // num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 292,
    "precondition": "num1 and num2 are integers or floating point numbers, and num2 is not equal to zero."
  },
  "293": {
    "specification": "Write a function to find the third side of a right angled triangle.",
    "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    c = math.sqrt(a**2 + b**2)\r\n    return c\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 293,
    "precondition": "a and b are positive integers or floats."
  },
  "294": {
    "specification": "Write a function to find the maximum value in a given heterogeneous list.",
    "code": "def max_val(lst):\r\n    max_value = lst[0]\r\n    for i in lst:\r\n        if type(i) is type(max_value\\[\r\n            if i > max_value:\r\n                max_value = i\r\n    return max_value\r\nprint(max_val(['Python', 3, 2, 4, 5, 'version']))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 294,
    "precondition": "lst is a list."
  },
  "295": {
    "specification": "Write a function to return the sum of all divisors of a number.",
    "code": "def sum_div(n):\r\n    divsum = 1\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i:\r\n            continue\r\n        count = 0\r\n        while n % i == 0:\r\n            count += 1\r\n            n //= i\r\n        divsum *= (count + 1)\r\n    if n > 1:\r\n        divsum *= 2\r\n    return divsum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 295,
    "precondition": "n is a positive integer."
  },
  "296": {
    "specification": "Write a python function to count inversions in an array.",
    "code": "def get_Inv_Count(arr):\r\n    if len(arr) <= 1:\r\n        return 0\r\n    else:\r\n        n = len(arr)\r\n        inv = 0\r\n        for i in range(n)\r\n            for j in range(i+1, n):\r\n                if arr[i] > arr[j\u7f00\r\n                    inv += 1\r\n        return inv\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 296,
    "precondition": "arr is a list of comparable elements."
  },
  "297": {
    "specification": "Write a function to flatten a given nested list structure.",
    "code": "def flatten_list(nested\\_list):\n\treturn [item for sublist in nested_list for item in (flatten_list(sublist) if isinstance(sublist, list) else [sublist])]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 297,
    "precondition": "nested\\_list is a list that can contain other lists (nested lists) or non-list elements."
  },
  "299": {
    "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "code": "def max_aggregate(lst):\r\n    res = max(lst, key=lambda x:x[1]) #get the max element of the list\r\n    for i in lst:\r\n        if res[1] < i[1] and res[0] != i[0]: #check if the current element's score is higher and the name is different\r\n            res = i #replace the result\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 299,
    "precondition": "lst is a list of tuples where each tuple contains two elements, the first element is a string, and the second element is an integer."
  },
  "300": {
    "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "code": "def count_binary_seq(n):\r\n  if n == 0:\r\n    return 1.0\r\n  elif n == 1:\r\n    return 2.0\r\n  table = [[0 for x in range(n+1)] for x in range(n+1)]\r\n  table[0][0] = 1.0\r\n  table[0][1] = 1.0\r\n  for i in range(1,n+1):\r\n    for j in range(0, i+1):\r\n      if j == 0:\r\n        table[i][j] = 1.0\r\n      else:\r\n        table[i][j] = table[i-1][j-1] + table[i-1][j]\r\n  return 2.0 * sum(table[n][x] for x in range(0, n+1, 2))\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 300,
    "precondition": "n is a non-negative integer."
  },
  "301": {
    "specification": "Write a function to find the depth of a dictionary.",
    "code": "def dict_depth(dictionary, depth=0): \r\n    if isinstance(dictionary, dict): \r\n        for k, v in dictionary.items(): \r\n            depth = max(depth, dict_depth(v, depth + 1))\r\n    return depth\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 301,
    "precondition": "dictionary is a dictionary."
  },
  "304": {
    "specification": "Write a python function to find element at a given index after number of rotations.",
    "code": "assert find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == 3\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 304,
    "precondition": "arr is a list of integers, rotations is a list of 2-element lists, where each inner list contains 2 non-negative integers, and start and k are non-negative integers such that 0 <= start < len(arr) and 0 <= k <= len(rotations). The function should return the element at the index `start` after applying `k` rotations."
  },
  "305": {
    "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
    "code": "def start_withp(words\\_list):\r\n    words = []\r\n    for word in words\\_list:\r\n        if word[0] == \"p\"\r\n            words.append(word.split(\" \")\\[0\\])\r\n    return tuple(words)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 305,
    "precondition": "words\\_list is a list of strings."
  },
  "306": {
    "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
    "code": "Specification:\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\nTest case:\nassert max\\_sum\\_increasing\\_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\nProgram:\n```\ndef max_sum_increasing_subseq(arr, n, i, k):\r\n    # Initialize result\r\n    res = []\r\n    for j in range(i,\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 306,
    "precondition": "arr is a list of integers, n is a non-negative integer such that 0 <= n <= len(arr), i is an integer such that 0 <= i <= n and k is an integer such that i < k <= n."
  },
  "307": {
    "specification": "Write a function to get a colon of a tuple.",
    "code": "def colon_tuplex(tuplex, idx, value):\r\n    tuplex = list(tuplex)\r\n    tuplex[idx] = value\r\n    tuplex = tuple(tuplex)\r\n    return tuplex\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 307,
    "precondition": "tuplex is a tuple, idx is an integer such that 0 <= idx < len(tuplex), and value is any python object."
  },
  "308": {
    "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
    "code": "def large_product(num1, num2, n):\r\n    num1.sort()\r\n    num2.sort()\r\n    res = []\r\n    while len(num1) > 0 and len(num2) > 0:\r\n        res.append(num1.pop() * num2.pop()\r\n        res.sort()\r\n        if len(res) > n:\r\n            res.pop()\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 308,
    "precondition": "num1 and num2 are lists of non-zero integers, and n is a non-negative integer such that 0 <= n <= min(len(num1), len(num2))."
  },
  "309": {
    "specification": "Write a python function to find the maximum of two numbers.",
    "code": "def maximum(num1, num2):\r\n    if num1 > num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 309,
    "precondition": "num1 and num2 are real numbers."
  },
  "310": {
    "specification": "Write a function to convert a given string to a tuple of characters.",
    "code": "def string_to_tuple(str1):\r\n    return tuple(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 310,
    "precondition": "str1 is a string."
  },
  "311": {
    "specification": "Write a python function to set the left most unset bit.",
    "code": "def set_left_most_unset_bit(n):\r\n    if n == 0:\r\n        return 1\r\n    bit_position = int(math.floor(math.log2(n))*\r\n        + 1)\r\n    unset_bit_position = bit_position - 1\r\n    unset_bit_mask = 1 << unset_bit_position\r\n    return n | unset_bit_mask\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 311,
    "precondition": "n is an integer."
  },
  "312": {
    "specification": "Write a function to find the volume of a cone.",
    "code": "import math\r\ndef volume_cone(radius, height):\r\n    volume = (1/3.0) * math.pi * (radius ** 2) * height\r\n    return volume\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 312,
    "precondition": "radius and height are positive real numbers."
  },
  "388": {
    "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "code": "import math\ndef highest_Power_of_2(n):\r\n    return 2**math.floor(math.log2(n))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 388,
    "precondition": "n is a positive integer."
  },
  "389": {
    "specification": "Write a function to find the n'th lucas number.",
    "code": "def find_lucas(n):\r\n    if n == 1:\r\n        return 2\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 389,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "390": {
    "specification": "Write a function to apply a given format string to all of the elements in a list.",
    "code": "def add_string(lst,fmt\\_str):\r\n    return [fmt_str.format(i) for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 390,
    "precondition": "lst is a list of objects, and fmt\\_str is a format string that accepts exactly one argument of the same type as the elements in lst."
  },
  "391": {
    "specification": "Write a function to convert more than one list to nested dictionary.",
    "code": "def convert_list_dictionary(key_list, value_list1, value_list2):\r\n    result = []\r\n    for i in range(len(key_list)):\r\n        result.append({key_list[i]: {value_list1[i]: value_list2[i]}})\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 391,
    "precondition": "key\\_list, value\\_list1, and value\\_list2 are all lists of the same length."
  },
  "392": {
    "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "code": "def get_max_sum(n):\r\n\tdp = [0 for x in range(n+1)] \r\n\tdp[0] = 0 \r\n\tdp[1] = 1 \r\n\tfor i in range(2, n+1):\r\n\t\tdp[i] = 1\r\n\t\tif i % 2 == 0:\r\n\t\t\tdp[i] = max(dp[i], dp[int(i/2)] + 1)\r\n\t\tif i % 3 == 0:\r\n\t\t\tdp[i] = max(dp[i], dp[int(i/3)] + 1)\r\n\t\tif i % 4 == 0:\r\n\t\t\tdp[i] = max(dp[i], dp[int(i/4)] + 1)\r\n\t\tif i % 5 == 0:\r\n\t\t\tdp[i] = max(dp[i], dp[int(i/5)] + 1)\r\n\treturn dp[n]\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 392,
    "precondition": "n is a non-negative integer."
  },
  "393": {
    "specification": "Write a function to find the list with maximum length.",
    "code": "def max_length_list(lst):\r\n\tmax_len = 0\r\n\tmax_lst = []\r\n\tfor i in lst:\r\n\t\tif len(i) > max_len:\r\n\t\t\tmax_len = len(i)\r\n\t\t\tmax_lst = i\r\n\treturn (max_len, max_lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 393,
    "precondition": "lst is a list of non-empty lists."
  },
  "394": {
    "specification": "Write a function to check if given tuple contains no duplicates.",
    "code": "def check_distinct(tup):\r\n\treturn len(tup) == len(set(tup))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 394,
    "precondition": "tup is a tuple."
  },
  "395": {
    "specification": "Write a python function to find the first non-repeated character in a given string.",
    "code": "def first_non_repeating_character(s):\r\n    if len(s) > 0:\r\n        count = {}\r\n        for ch in s:\r\n            if ch in count:\r\n                count[ch] += 1\r\n            else:\r\n                count[ch] = 1\r\n        for ch in s:\r\n            if count[ch] == 1:\r\n                return ch\r\n    return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 395,
    "precondition": "s is a string."
  },
  "396": {
    "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
    "code": "def check_char(string):\r\n    if len(string) > 0:\r\n        if string[0] == string[-1\u7f00]\r\n            return \"Valid\"\r\n    return \"Invalid\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 396,
    "precondition": "string is a string."
  },
  "397": {
    "specification": "Write a function to find the median of three numbers.",
    "code": "def median_numbers(*args)\r\n    args = sorted(args)\r\n    if len(args)%2 == 0:\r\n        return (args[len(args)//2 - 1] + args[len(args)//2])/2.0\r\n    else:\r\n        return args[len(args)//2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 397,
    "precondition": "args is a variable number of arguments, each of which is a number."
  },
  "398": {
    "specification": "Write a function to compute the sum of digits of each number of a given list.",
    "code": "def sum_of_digits(lst):\r\n  return sum([sum(int(i) for i in str(num)) for num in lst))\r\n\r\n# Test case\r\nassert sum_of_digits([10,2,56])==14\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 398,
    "precondition": "lst is a list of integers."
  },
  "399": {
    "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "code": "def bitwise_xor(tup1, tup2):\r\n    result = []\r\n    for i, j in zip(tup1, tup2):\r\n        result.append(i ^ j)\r\n    return tuple(result)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 399,
    "precondition": "tup1 and tup2 are tuples of equal length, containing integers."
  },
  "400": {
    "specification": "Write a function to extract the number of unique tuples in the given list.",
    "code": "def extract_freq(lst):\r\n    return len(set(tuple(sorted(tup)) for tup in lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 400,
    "precondition": "lst is a list of tuples."
  },
  "401": {
    "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "code": "def add_nested_tuples(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 401,
    "precondition": "tup1 and tup2 are nested tuples (tuples of tuples) with the same length."
  },
  "404": {
    "specification": "Write a python function to find the minimum of two numbers.",
    "code": "def minimum(a, b):\r\n    if a < b:\r\n        return a\r\n    else:\r\n        return b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 404,
    "precondition": "a and b are real numbers."
  },
  "405": {
    "specification": "Write a function to check whether an element exists within a tuple.",
    "code": "def check_tuplex(tuplex, value)\r\n    if value in tuplex:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 405,
    "precondition": "tuplex is a tuple and value is any object."
  },
  "406": {
    "specification": "Write a python function to find whether the parity of a given number is odd.",
    "code": "def find_Parity(n):\r\n    return n % 2 != 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 406,
    "precondition": "n is an integer."
  },
  "407": {
    "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "code": "def rearrange_digits(n):\r\n\tnum = list(str(n))\r\n\tfor i in range(len(num))\r\n\t\tfor j in range(len(num)-1)\r\n\t\t\tif num[j] < num[j+1]:\n\t\t\t\tnum[j], num[j+1] = num[j+1], num[j]\r\n\t\t\t\tnum = num[:j+1] + sorted(num[j+1:], reverse = True)\r\n\t\t\t\tnum = \"\".join(num)\r\n\t\t\t\treturn int(num)\r\n\treturn -1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 407,
    "precondition": "n is an integer."
  },
  "408": {
    "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
    "code": "import heapq\ndef k_smallest_pairs(arr1, arr2, k):\r\n    pairs = []\r\n    for i in arr1:\r\n        for j in arr2:\r\n            pairs.append([i, j])\r\n    pairs = sorted(pairs, key = lambda x: x[0] + x[1]):\r\n    return pairs[:k]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 408,
    "precondition": "arr1 and arr2 are lists of integers, and k is a non-negative integer such that 0 <= k <= len(arr1) \\* len(arr2)."
  },
  "409": {
    "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "code": "def min_product_tuple(tpl\\_list):\r\n    return min([a[0]*a[1] for a in tpl_list])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 409,
    "precondition": "tpl\\_list is a list of tuples where each tuple contains at least two integers."
  },
  "410": {
    "specification": "Write a function to find the minimum value in a given heterogeneous list.",
    "code": "def min_val(lst):\r\n    return min(lst, key=lambda x: (not isinstance(x, int), x))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 410,
    "precondition": "lst is a list of comparable elements (i.e., elements that can be compared using comparison operators such as <, >, etc.)"
  },
  "411": {
    "specification": "Write a function to convert the given snake case string to camel case string.",
    "code": "def snake_to_camel(s):\r\n    return ''.join(word.capitalize() for word in s.split('_'))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 411,
    "precondition": "s is a string and contains only lowercase letters, underscores, and digits."
  },
  "412": {
    "specification": "Write a python function to remove odd numbers from a given list.",
    "code": "def remove_odd(lst):\r\n    return [i for i in lst if i % 2 == 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 412,
    "precondition": "lst is a list of integers."
  },
  "413": {
    "specification": "Write a function to extract the nth element from a given list of tuples.",
    "code": "def extract_nth_element(list_tuples, nth\\_element):\r\n\treturn [x[nth_element] for x in list_tuples]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 413,
    "precondition": "list\\_tuples is a list of tuples and nth\\_element is an integer such that 0 <= nth\\_element < length of the tuple."
  },
  "414": {
    "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
    "code": "def overlapping(seq1, seq2):\r\n    return bool(set(seq1) & set(seq2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 414,
    "precondition": "seq1 and seq2 are sequences (e.g. lists, tuples)."
  },
  "415": {
    "specification": "Write a python function to find a pair with highest product from a given array of integers.",
    "code": "def max_Product(numbers):\r\n    result = (0,0)\r\n    for i in range(len(numbers))\r\n        for j in range(len(numbers):\r\n            if numbers[i] * numbers[j] > result[0] * result[1]:\r\n                result = (numbers[i], numbers[j])\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 415,
    "precondition": "numbers is a list of integers."
  },
  "417": {
    "specification": "Write a function to find common first element in given list of tuple.",
    "code": "def group_tuples(lst):\r\n    result = []\r\n    for i in lst:\r\n        if result and result[-1][-1] == i[0]:\r\n            result[-1] += i\r\n        else:\r\n            result.append(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 417,
    "precondition": "lst is a list of tuples, where each tuple contains at least one element."
  },
  "418": {
    "specification": "Write a python function to find the element of a list having maximum length.",
    "code": "def Find_Max(lst):\r\n    max\\_len = 0\r\n    max\\_lst = []\r\n    for i in lst:\r\n        if len(i) > max\\_len:\r\n            max\\_len = len(i)\r\n            max\\_lst = i\r\n    return max\\_lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 418,
    "precondition": "lst is a list of lists."
  },
  "419": {
    "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "code": "def round_and_sum(lst):\r\n    rounded_list = [round(i, 0) for i in lst]\r\n    sum_of_lst = sum(rounded_list)\r\n    total = sum_of_lst * len(rounded_list)\r\n    return total\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 419,
    "precondition": "lst is a list of numbers."
  },
  "420": {
    "specification": "Write a python function to find the cube sum of first n even natural numbers.",
    "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        if i % 2 == 0:\r\n            sum = sum + i**3\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 420,
    "precondition": "n is a non-negative integer."
  },
  "421": {
    "specification": "Write a function to concatenate each element of tuple by the delimiter.",
    "code": "def concatenate_tuple(tup, delimiter = '-'): \r\n    res = delimiter.join(map(str, tup))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 421,
    "precondition": "tup is a tuple."
  },
  "422": {
    "specification": "Write a python function to find the average of cubes of first n natural numbers.",
    "code": "def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += i**3\r\n    avg = sum/n\r\n    return avg\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 422,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "424": {
    "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
    "code": "def extract_rear(tple): \r\n    res = () \r\n    for i in tple: \r\n        res += (i[-1],) \r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 424,
    "precondition": "tple is a tuple of non-empty strings."
  },
  "425": {
    "specification": "Write a function to count the number of sublists containing a particular element.",
    "code": "def count_element_in_list(lst, x):\r\n    return sum(1 for sublist in lst for item in sublist if item == x)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 425,
    "precondition": "lst is a list and x is an object such that x is hashable."
  },
  "426": {
    "specification": "Write a function to filter odd numbers.",
    "code": "def filter_oddnumbers(numbers):\r\n    return list(filter(lambda x: x%2 != 0, numbers))\r\n    # or\n    # return [n for n in numbers if n%2 != 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 426,
    "precondition": "numbers is a list of integers."
  },
  "427": {
    "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "code": "def change_date_format(date\\_string):\r\n    date\\_list = date\\_string.split(\"-\")\r\n    return \"-\".join(reversed(date\\_list))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 427,
    "precondition": "date\\_string is a string of format \"yyyy-mm-dd\"."
  },
  "428": {
    "specification": "Write a function to sort the given array by using shell sort.",
    "code": "def shell_sort(arr):\r\n    gap = len(arr) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(arr)):\r\n            anchor = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j - gap] > anchor:\r\n                arr[j] = arr[j - gap]\r\n                j -= gap\r\n            arr[j] = anchor\r\n        gap //= 2\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 428,
    "precondition": "arr is a list of comparable elements."
  },
  "429": {
    "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = []\n  for i in range(len(test_tup1):\r\n    res.append(min(test_tup1[i], test_tup2[i]))\r\n  return tuple(res)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 429,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples of the same length."
  },
  "430": {
    "specification": "Write a function to find the directrix of a parabola.",
    "code": "def parabola_directrix(h,k,p):\r\n    return h - p\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 430,
    "precondition": "h, k, and p are real numbers such that h, k, and p-h are not equal to 0."
  },
  "431": {
    "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
    "code": "def common_element(list1, list2*\r\n  for i in list1:\r\n    if i in list2:\r\n      return True\r\n  return False\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 431,
    "precondition": "list1 and list2 are lists."
  },
  "432": {
    "specification": "Write a function to find the median length of a trapezium.",
    "code": "def median_trapezium(a, b, c):\n    if (c - a) <= 0:\r\n        return \"Invalid dimensions of trapezium\"\r\n    else:\r\n        return (a + b)/2\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 432,
    "precondition": "a, b, and c are real numbers such that b > a > 0."
  },
  "433": {
    "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "code": "def check_greater(arr, num):\r\n    for i in arr:\r\n        if num <= i:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 433,
    "precondition": "arr is a list of integers, and num is an integer."
  },
  "434": {
    "specification": "Write a function that matches a string that has an a followed by one or more b's.",
    "code": "import re\ndef text_match_one(input_string):\r\n  pattern = r'ab+'\n  if re.search(pattern, input_string):\r\n    return True\n  else:\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 434,
    "precondition": "input\\_string is a string."
  },
  "435": {
    "specification": "Write a python function to find the last digit of a given number.",
    "code": "def last_Digit(n):\r\n    return abs(n) % 10\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 435,
    "precondition": "n is an integer."
  },
  "436": {
    "specification": "Write a python function to return the negative numbers in a list.",
    "code": "def neg_nos(lst):\r\n    return [i for i in lst if i < 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 436,
    "precondition": "lst is a list of integers."
  },
  "437": {
    "specification": "Write a function to remove odd characters in a string.",
    "code": "def remove_odd(str1):\r\n  res = \"\"\n  for i in str1:\r\n    if int(i) % 2 == 0:\r\n      res += i\n  return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 437,
    "precondition": "str1 is a string."
  },
  "438": {
    "specification": "Write a function to count bidirectional tuple pairs.",
    "code": "def count_bidirectional(tup\\_list):\r\n    tup\\_set = set(tup\\_list)\r\n    count = 0\r\n    for tup in tup\\_set:\r\n        if (tup[1], tup[0]) in tup\\_set:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 438,
    "precondition": "tup\\_list is a list of tuples."
  },
  "439": {
    "specification": "Write a function to join a list of multiple integers into a single integer.",
    "code": "def multiple_to_single(lst):\r\n    return int(''.join(map(str, lst)))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 439,
    "precondition": "lst is a list of integers."
  },
  "440": {
    "specification": "Write a function to find the first adverb and their positions in a given sentence.",
    "code": "import re\r\ndef find_adverb_position(sentence):\r\n  adverbs = [\"abruptly\", \"actually\", \"almost\", \"always\", \"already\", \"also\", \"always\", \"almost\", \"also\", \"often\", \"often\", \"usually\", \"very\", \"just\", \"simply\", \"gently\", \"quickly\", \"slowly\", \"quietly\", \"harshly\", \"softly\", \"nearly\", \"nearly\", \"directly\", \"directly\", \"carefully\", \"carefully\", \"quickly\", \"quickly\", \"daily\", \"daily\", \"deeply\", \"deeply\", \"directly\", \"directly\", \"early\", \"early\", \"easily\", \"easily\", \"effectively\", \"effectively\", \"efficiently\", \"efficiently\", \"elsewhere\", \"elsewhere\", \"entirely\", \"entirely\", \"equally\", \"equally\", \"eventually\", \"eventually\", \"exactly\", \"exactly\", \"exceedingly\", \"exceedingly\", \"exceptionally\", \"exceptionally\", \"excessively\", \"excessively\", \"extra\", \"extra\", \"fairly\", \"fairly\", \"finally\", \"finally\", \"firmly\", \"firmly\", \"first\", \"first\", \"generally\", \"generally\", \"genuinely\", \"genuinely\", \"gently\", \"gently\", \"gratefully\", \"gratefully\", \"happily\", \"happily\", \"hardly\", \"hardly\", \"heavily\", \"heavily\", \"here\", \"here\", \"highly\", \"highly\", \"honestly\", \"honestly\", \"however\", \"however\", \"however\", \"however\", \"immediately\", \"immediately\", \"importantly\", \"importantly\", \"increasingly\", \"increasingly\", \"indeed\", \"indeed\", \"initially\", \"initially\", \"instantaneously\", \"instantaneously\", \"instead\", \"instead\", \"inwardly\", \"inwardly\", \"isolatedly\", \"isolatedly\", \"just\", \"just\", \"lately\", \"lately\", \"largely\", \"largely\", \"last\", \"last\", \"later\", \"later\", \"least\", \"least\", \"leisurely\", \"leisurely\", \"less\", \"less\", \"lightly\", \"lightly\", \"little\", \"little\", \"lively\", \"lively\", \"locally\", \"locally\", \"long\", \"long\", \"loosely\", \"loosely\", \"lowly\", \"lowly\", \"madly\", \"madly\", \"mainly\", \"mainly\", \"many\", \"many\", \"massively\", \"massively\", \"meanwhile\", \"meanwhile\", \"mechanically\", \"mechanically\", \"medially\", \"medially\", \"most\", \"most\", \"much\", \"much\", \"narrowly\", \"narrowly\", \"nearly\", \"nearly\", \"neatly\", \"neatly\", \"needlessly\", \"needlessly\", \"neither\", \"neither\", \"nevertheless\", \"nevertheless\", \"newly\", \"newly\", \"next\", \"next\", \"nominally\", \"nominally\", \"normally\", \"normally\", \"now\", \"now\", \"numerously\", \"numerously\", \"occasionally\", \"occasionally\", \"of course\", \"of course\", \"often\", \"often\", \"only\", \"only\", \"openly\", \"openly\", \"ordinarily\", \"ordinarily\", \"otherwise\", \"otherwise\", \"outside\", \"outside\", \"over\", \"over\", \"particularly\", \"particularly\", \"partly\", \"partly\", \"passionately\", \"passionately\", \"peacefully\", \"peacefully\", \"perfectly\", \"perfectly\", \"permanently\", \"permanently\", \"politely\", \"politely\", \"poorly\", \"poorly\", \"primarily\", \"primarily\", \"primely\", \"primely\", \"primitive\", \"primitive\", \"principally\", \"principally\", \"privately\", \"privately\", \"probably\", \"probably\", \"primarily\", \"primarily\", \"promptly\", \"promptly\", \"publicly\", \"publicly\", \"quietly\", \"quietly\", \"quickly\", \"quickly\", \"rarely\", \"rarely\", \"regularly\", \"regularly\", \"relatively\", \"relatively\", \"remotely\", \"remotely\", \"repeatedly\", \"repeatedly\", \"rarely\", \"rarely\", \"residually\", \"residually\", \"responsibly\", \"responsibly\", \"right\", \"right\", \"roughly\", \"roughly\", \"roundly\", \"roundly\", \"rudely\", \"rudely\", \"safely\", \"safely\", \"second\", \"second\", \"secretly\", \"secretly\", \"seldom\", \"seldom\", \"semi\", \"semi\", \"separately\", \"separately\", \"seriously\", \"seriously\", \"severely\", \"severely\", \"several\", \"several\", \"sharply\", \"sharply\", \"shortly\", \"shortly\", \"similarly\", \"similarly\", \"simultaneously\", \"simultaneously\", \"slightly\", \"slightly\", \"slowly\", \"slowly\", \"smoothly\", \"smoothly\", \"soon\", \"soon\", \"somewhat\", \"somewhat\", \"sparingly\", \"sparingly\", \"specifically\", \"specifically\", \"speedily\", \"speedily\", \"spontaneously\", \"spontaneously\", \"steadily\", \"steadily\", \"still\", \"still\", \"strangely\", \"strangely\", \"strongly\", \"strongly\", \"successfully\", \"successfully\", \"suddenly\", \"suddenly\", \"sufficiently\", \"sufficiently\", \"summarily\", \"summarily\", \"surprisingly\", \"surprisingly\", \"suspiciously\", \"suspiciously\", \"tangibly\", \"tangibly\", \"temporarily\", \"temporarily\", \"tenderly\", \"tenderly\", \"tentatively\", \"tentatively\", \"thankfully\", \"thankfully\", \"that\", \"that\", \"the\", \"the\", \"then\", \"then\", \"there\", \"there\", \"thereby\", \"thereby\", \"therefore\", \"therefore\", \"these\", \"these\", \"thickly\", \"thickly\", \"thoroughly\", \"thoroughly\", \"thoughtfully\", \"thoughtfully\", \"thus\", \"thus\", \"tightly\", \"tightly\", \"timely\", \"timely\", \"together\", \"together\", \"too\", \"too\", \"top\", \"top\", \"touchingly\", \"touchingly\", \"toward\", \"toward\", \"towards\", \"towards\", \"truly\", \"truly\", \"twice\", \"twice\", \"unconsciously\", \"unconsciously\", \"under\", \"under\", \"undoubtedly\", \"undoubtedly\", \"unexpectedly\", \"unexpectedly\", \"unfortunately\", \"unfortunately\", \"unusually\", \"unusually\", \"usually\", \"usually\", \"variously\", \"variously\", \"vaguely\", \"vaguely\", \"violently\", \"violently\", \"virtually\", \"virtually\", \"voluntarily\", \"voluntarily\", \"weakly\", \"weakly\", \"well\", \"well\", \"wisely\", \"wisely\", \"wonderfully\", \"wonderfully\", \"woodenly\", \"woodenly\", \"wrongly\", \"wrongly\", \"yet\", \"yet\", \"yonder\", \"yonder\"]\n  words = sentence.split()\n  positions = []\n  for i in range(len(words))\r\n    if words[i] in adverbs:\r\n      positions.append(i)\r\n      positions.append(sentence.find(words[i]))\r\n      positions.append(words[i])\r\n      break\r\n  return tuple(positions)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 440,
    "precondition": "sentence is a string."
  },
  "441": {
    "specification": "Write a function to find the surface area of a cube of a given size.",
    "code": "import math\ndef surfacearea_cube(size): \r\n    side = size * size\r\n    surface\\_area = 6 * side\r\n    return surface\\_area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 441,
    "precondition": "size is a positive integer."
  },
  "442": {
    "specification": "Write a function to find the ration of positive numbers in an array of integers.",
    "code": "def positive_count(numbers):\r\n\tpos_numbers = len([x for x in numbers if x > 0])\r\n\treturn pos_numbers/len(numbers)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 442,
    "precondition": "numbers is a list of integers."
  },
  "443": {
    "specification": "Write a python function to find the largest negative number from the given list.",
    "code": "def largest_neg(numbers):\r\n    return max(filter(lambda x: x<0, numbers))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 443,
    "precondition": "numbers is a list of integers."
  },
  "444": {
    "specification": "Write a function to trim each tuple by k in the given tuple list.",
    "code": "def trim_tuple(tup_list, k):\r\n    return tuple(tuple(x[k:]) for x in tup_list)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 444,
    "precondition": "tup\\_list is a list of tuples, and k is an integer such that 0 <= k < len(tup)"
  },
  "445": {
    "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "code": "def index_multiplication(tup1, tup2):\r\n\tres = []\r\n\tfor i in range(len(tup1));\r\n\t\tres.append(tuple(map(lambda x, y: x*y, tup1[i], tup2[i]))))\r\n\treturn tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 445,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "446": {
    "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
    "code": "def count_Occurrence(t,lst):\r\n    count = 0\r\n    for i in lst:\r\n        for j in t:\r\n            if i == j:\r\n                count = count + 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 446,
    "precondition": "t is a tuple and lst is a list of hashable elements."
  },
  "447": {
    "specification": "Write a function to find cubes of individual elements in a list.",
    "code": "def cube_nums(numbers):\r\n    res = [x**3 for x in numbers]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 447,
    "precondition": "numbers is a list of integers."
  },
  "448": {
    "specification": "Write a function to calculate the sum of perrin numbers.",
    "code": "def cal_sum(n):\r\n    i = 0\r\n    p0 = 3\r\n    p1 = 0\r\n    p2 = 2\r\n    sum = 0\r\n    while i < n:\r\n        sum = sum + p2\r\n        pn = p0 + p1\r\n        p0 = p1\r\n        p1 = pn\r\n        p2 = p2 + pn\r\n        i = i + 1\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 448,
    "precondition": "n is a non-negative integer."
  },
  "450": {
    "specification": "Write a function to extract specified size of strings from a given list of string values.",
    "code": "def extract_string(lst, size):\r\n    res = [i for i in lst if len(i) == size]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 450,
    "precondition": "lst is a list of strings, and size is an integer."
  },
  "451": {
    "specification": "Write a function to remove all whitespaces from the given string.",
    "code": "def remove_whitespaces(text):\r\n    return text.replace(\" \",\"\")\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 451,
    "precondition": "text is a string."
  },
  "452": {
    "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
    "code": "def loss_amount(cost_price, selling_price):\r\n  if cost_price > selling_price:\r\n    return cost_price - selling_price \r\n  else:\r\n    return 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 452,
    "precondition": "cost\\_price and selling\\_price are both non-negative integers or floating point numbers."
  },
  "453": {
    "specification": "Write a python function to find the sum of even factors of a number.",
    "code": "def sumofFactors(n):\r\n    total = 0\r\n    for i in range(1, n + 1):\r\n        if n % 2 == 0:\r\n            total += i\r\n        elif n % i == 0:\r\n            total += i\r\n    return total\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 453,
    "precondition": "n is a positive integer."
  },
  "454": {
    "specification": "Write a function that matches a word containing 'z'.",
    "code": "def text_match_wordz(text:\r\n    if \"z\" in text and text[-1] == \"z\":\r\n        return True\r\n    else:\r\n        return False\r\n   \nassert text_match_wordz(\"pythonz.\")\"==True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 454,
    "precondition": "text is a string."
  },
  "455": {
    "specification": "Write a function to check whether the given month number contains 31 days or not.",
    "code": "def check_monthnumb_number(month)\r\n    if month == 2:\r\n        return False\r\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 455,
    "precondition": "month is an integer such that 1 <= month <= 12."
  },
  "456": {
    "specification": "Write a function to reverse each string in a given list of string values.",
    "code": "def reverse_string_list(list1):\r\n    return [i[::-1] for i in list1]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 456,
    "precondition": "list1 is a list of strings."
  },
  "457": {
    "specification": "Write a python function to find the sublist having minimum length.",
    "code": "def Find_Min(lst):\r\n    res = []\r\n    for i in lst:\r\n        if len(i)<len(res) or res==[]:\r\n            res = i\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 457,
    "precondition": "lst is a list of lists."
  },
  "458": {
    "specification": "Write a function to find the area of a rectangle.",
    "code": "def rectangle_area(length, width):\r\n\treturn length * width\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 458,
    "precondition": "length and width are real numbers."
  },
  "459": {
    "specification": "Write a function to remove uppercase substrings from a given string.",
    "code": "def remove_uppercase(st:\r\n    ans = \"\"\r\n    for char in st:\r\n        if char.islower():\r\n            ans += char\r\n    return ans\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 459,
    "precondition": "st is a string."
  },
  "460": {
    "specification": "Write a python function to get the first element of each sublist.",
    "code": "def Extract(lst): \r\n  return [i[0] for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 460,
    "precondition": "lst is a list of non-empty sublists where each sublist contains at least one element."
  },
  "461": {
    "specification": "Write a python function to count the upper case characters in a given string.",
    "code": "def upper_ctr(str1):\r\n    return sum(1 for c in str1 if c.isupper())\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 461,
    "precondition": "str1 is a string."
  },
  "462": {
    "specification": "Write a function to find all possible combinations of the elements of a given list.",
    "code": "from itertools import chain, combinations\ndef combinations_list(input\\_list):\n  list\\_combinations = list(chain.from_iterable(combinations(input_list, r) for r in range(len(input_list)+1)))\n  list\\_combinations.pop(0)\n  return list_combinations\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 462,
    "precondition": "input\\_list is a list."
  },
  "463": {
    "specification": "Write a function to find the maximum product subarray of the given array.",
    "code": "def max_subarray_product(arr:\r\n    if not arr:\r\n        return 0\r\n    max_so_far = max_ending_here = arr[0]\r\n    min_ending_here = arr[0]\r\n    for i in range(1, len(arr):\r\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\r\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\r\n        max_so_far = max(max_so_far, max_ending_here)\r\n    return max_so_far\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 463,
    "precondition": "arr is a list of integers."
  },
  "464": {
    "specification": "Write a function to check if all values are same in a dictionary.",
    "code": "def check_value(dic,val):\r\n    result = False\r\n    for value in dic.values()\r\n        if value != val:\r\n            result = True\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 464,
    "precondition": "dic is a dictionary, and val is a value that all values in the dictionary are expected to be equal to."
  },
  "465": {
    "specification": "Write a function to drop empty items from a given dictionary.",
    "code": "def drop_empty(dic):\r\n\treturn {k: v for k, v in dic.items() if v is not None}\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 465,
    "precondition": "dic is a dictionary."
  },
  "468": {
    "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "code": "def max_product(arr):\r\n    dp_min = [0] * len(arr)\r\n    dp_max = [0] * len(arr)\r\n    dp_max[0] = arr[0]\r\n    dp_min[0] = arr[0]\r\n    result = dp_max[0]\r\n    for i in range(1, len(arr):\r\n        dp_max[i] = max(dp_min[i-1] * arr[i], dp_max[i-1] * arr[i], arr[i])\r\n        dp_min[i] = min(dp_min[i-1] * arr[i], dp_max[i-1] * arr[i], arr[i])\r\n        result = max(result, dp_max[i])\r\n    return result\n\n# Test the function\r\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 468,
    "precondition": "arr is a list of non-zero integers."
  },
  "470": {
    "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
    "code": "def add_pairwise(tup):\r\n    ans = []\r\n    for i in range(len(tup)-1):\r\n        ans.append(tup[i] + tup[i+1])\r\n    return tuple(ans)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 470,
    "precondition": "tup is a tuple of integers with a length greater than or equal to 2."
  },
  "471": {
    "specification": "Write a python function to find the product of the array multiplication modulo n.",
    "code": "def find_remainder(arr, n):\r\n    product = 1\r\n    for i in arr:\r\n        product *= i\r\n    return product % n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 471,
    "precondition": "arr is a list of integers, and n is a positive integer."
  },
  "472": {
    "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "code": "def check_Consecutive(numbers):\r\n    sorted_numbers = sorted(numbers)\r\n    if sorted_numbers == list(range(sorted_numbers[0], sorted_numbers[-1] + 1))\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 472,
    "precondition": "numbers is a list of integers."
  },
  "473": {
    "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "code": "def tuple_intersection(lst1, lst2):\r\n    lst3 = [tuple(sorted(i)) for i in lst1]\r\n    lst4 = [tuple(sorted(i)) for i in lst2]\r\n    res = set()\r\n    for i in lst3:\r\n        if i in lst4:\r\n            res.add(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 473,
    "precondition": "lst1 and lst2 are both list of tuples."
  },
  "474": {
    "specification": "Write a function to replace characters in a string.",
    "code": "def replace_char(st,c1,c2):\r\n    return st.replace(c1,c2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 474,
    "precondition": "st is a string and c1 and c2 are single-character strings."
  },
  "475": {
    "specification": "Write a function to sort a dictionary by value.",
    "code": "from collections import Counter\r\n\r\ndef sort_counter(counter\\_dict):\r\n    return sorted(counter\\_dict.items(), key = lambda item: item[1] ,reverse=True)\r\n\r\nassert sort_counter(Counter({'Math':81, 'Physics':83, 'Chemistry':87})) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\r\nprint(\"Test passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 475,
    "precondition": "counter\\_dict is a dict object."
  },
  "476": {
    "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "code": "def big_sum(list1):\r\n    if len(list1) == 0:\r\n        return \"List is empty\"\r\n    else:\r\n        list1.sort()\r\n        return list1[0] + list1[-1]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 476,
    "precondition": "list1 is a list of numbers."
  },
  "477": {
    "specification": "Write a python function to convert the given string to lower case.",
    "code": "def is_lower(input\\_str):\r\n    return input\\_str.lower()\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 477,
    "precondition": "input\\_str is a string."
  },
  "478": {
    "specification": "Write a function to remove lowercase substrings from a given string.",
    "code": "def remove_lowercase(s):\r\n    return ''.join(c for c in s if c.isupper())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 478,
    "precondition": "s is a string."
  },
  "479": {
    "specification": "Write a python function to find the first digit of a given number.",
    "code": "def first_Digit(n):\r\n    return int(str(abs(n))[0])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 479,
    "precondition": "n is an integer or a float."
  },
  "554": {
    "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
    "code": "def Split(numbers):\r\n    odd\\_numbers = [x for x in numbers if x % 2 != 0]\r\n    return odd\\_numbers\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 554,
    "precondition": "numbers is a list of integers."
  },
  "555": {
    "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
    "code": "def cube(n)\r\n\treturn n*n*n\r\n\r\ndef sum_of_n_numbers(n):\r\n\treturn (n*(n+1))/2\r\n\r\ndef difference(n):\r\n\treturn abs(sum_of_n_numbers(n**3) - sum_of_n_numbers(n))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 555,
    "precondition": "n is an integer."
  },
  "556": {
    "specification": "Write a python function to count the number of pairs whose xor value is odd.",
    "code": "def find_Odd_Pair(arr, n)\r\n    count = 0\r\n    for i in range(n*\r\n        for j in range(i*\r\n                if (arr[i] ^ arr[j]) & 1:\r\n                    count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 556,
    "precondition": "arr is a list of integers, and n is the length of the arr."
  },
  "557": {
    "specification": "Write a function to toggle the case of all characters in a string.",
    "code": "def toggle_string(s1):\r\n    res = \"\"\r\n    for i in s1:\r\n        if i.isalpha():\r\n            if i.islower():\r\n                res = res + i.upper()\r\n            else:\r\n                res = res + i.lower()\r\n        else:\r\n            res = res + i\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 557,
    "precondition": "s1 is a string."
  },
  "558": {
    "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
    "code": "def digit_distance_nums(num1, num2):\r\n    str1 = str(abs(num1 - num2))\r\n    return sum([abs(int(i) - int(j))\r\n               for i, j in zip(str1[::1], str1[1::1])]\r\n              )\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 558,
    "precondition": "num1 and num2 are integers."
  },
  "559": {
    "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
    "code": "def max_sub_array_sum(arr, n)\r\n\tmax_so_far = arr[0]\r\n\tmax_ending_here = arr[0]\r\n\tfor i in range(1,n)\r\n\t\tmax_ending_here = max(arr[i], max_ending_here + arr[i] )\r\n\t\tif (max_ending_here > max_so_far):\r\n\t\t\tmax_so_far = max_ending_here\r\n\treturn max_so_far\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 559,
    "precondition": "arr is a list of integers, and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "560": {
    "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
    "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(sorted(set(test_tup1) | set(test_tup2)))\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 560,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "562": {
    "specification": "Write a python function to find the length of the longest sublists.",
    "code": "def Find_Max_Length(lst):\r\n    return max([len(i) for i in lst   ])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 562,
    "precondition": "lst is a list of non-empty lists."
  },
  "563": {
    "specification": "Write a function to extract values between quotation marks from a string.",
    "code": "import re\r\ndef extract_values(s):\r\n    return re.findall('\"(.*?)\"', s)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 563,
    "precondition": "s is a string."
  },
  "564": {
    "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
    "code": "def count_Pairs(lst, n)\r\n    count = 0\r\n    for i in range(len(lst):\r\n        for j in range(i+1, len(lst), 1):\r\n            if lst[i] != lst[j]:\r\n                count += 1\r\n    return count // 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 564,
    "precondition": "lst is a list of integers and n is a non-negative integer such that 0 <= n <= len(lst)"
  },
  "565": {
    "specification": "Write a python function to split a string into characters.",
    "code": "def split(aStr)\r\n    return list(aStr)\r\nprint(split('python'))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 565,
    "precondition": "aStr is a string."
  },
  "566": {
    "specification": "Write a function to get the sum of the digits of a non-negative integer.",
    "code": "def sum_digits(n):\r\n    sum = 0\r\n    while n:\r\n        sum += n % 10\r\n        n = n // 10\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 566,
    "precondition": "n is an integer that is non-negative."
  },
  "567": {
    "specification": "Write a function to check whether a specified list is sorted or not.",
    "code": "def issort_list(lst):\r\n    return lst == sorted(lst)\r\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 567,
    "precondition": "lst is a list."
  },
  "568": {
    "specification": "Write a function to create a list of N empty dictionaries.",
    "code": "def empty_list(n):\r\n    return [{} for i in range(n)]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 568,
    "precondition": "n is an integer."
  },
  "569": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 569,
    "precondition": "lst is a list of lists, where each element of lst is a list of strings."
  },
  "572": {
    "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
    "code": "def two_unique_nums(*args):\r\n    result = []\r\n    for nums in args:\r\n        for num in nums:\r\n            if num not in result:\r\n                result.append(num)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 572,
    "precondition": "args is a variable number of lists of integers."
  },
  "573": {
    "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
    "code": "def unique_product(lst):\r\n    unique_list = set(lst)\r\n    prod = 1\r\n    for i in unique_list:\r\n        prod *= i\r\n    return prod\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 573,
    "precondition": "lst is a list of numbers."
  },
  "574": {
    "specification": "Write a function to find the surface area of a cylinder.",
    "code": "import math\r\ndef surfacearea_cylinder(radius,height):\r\n\treturn 2*math.pi*radius*(height + radius)\r\nprint(surfacearea_cylinder(10,5))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 574,
    "precondition": "radius and height are both positive real numbers."
  },
  "576": {
    "specification": "Write a python function to check whether a list is sublist of another or not.",
    "code": "def is_Sub_Array(arr1, arr2):\r\n    result = False\r\n    for i in range(len(arr1) - len(arr2) + 1):\r\n        if arr1[i:i + len(arr2)] == arr2:\r\n            result = True\r\n            break\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 576,
    "precondition": "arr1 and arr2 are both lists of comparable elements."
  },
  "577": {
    "specification": "Write a python function to find the last digit in factorial of a given number.",
    "code": "def last_Digit_Factorial(n):\r\n    fact = 1\r\n    for i in range(2, n+1):\r\n        fact = fact * i\r\n    return fact % 10\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 577,
    "precondition": "n is a non-negative integer."
  },
  "578": {
    "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
    "code": "def interleave_lists(*args)\r\n    length = len(args[0]) # get the length of the first list\r\n    result = [None for x in range(length)] # create a new list with the specified length\r\n    for i in range(length):\r\n        for j in range(len(args)):\r\n            result[i] = args[j][i] if result[i] == None else result[i] # interleave the values\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 578,
    "precondition": "All lists in args are of the same length."
  },
  "579": {
    "specification": "Write a function to find the dissimilar elements in the given two tuples.",
    "code": "def find_dissimilar(tup1, tup2):\r\n    res = tuple(set(tup1) ^ set(tup2))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 579,
    "precondition": "tup1 and tup2 are tuples."
  },
  "580": {
    "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
    "code": "def extract_even(mixed\\_tuple):\r\n    result = ()\r\n    for i in mixed\\_tuple:\r\n        if isinstance(i, int) and i % 2 == 0:\r\n            result += (i,)\r\n        elif isinstance(i, tuple):\r\n            result += extract\\_even(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 580,
    "precondition": "mixed\\_tuple is a tuple containing integers and/or other tuples."
  },
  "581": {
    "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
    "code": "import math\r\ndef surface_Area(b, h):\r\n    result = math.sqrt(h**2 + (b/2)**2)*b + 4*b*h\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 581,
    "precondition": "b is a positive real number representing the base edge length of the square pyramid, and h is a positive real number representing the height of the square pyramid."
  },
  "582": {
    "specification": "Write a function to check if a dictionary is empty",
    "code": "def is_empty(dictionary)\r\n    return len(dictionary)==0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 582,
    "precondition": "dictionary is a dictionary."
  },
  "583": {
    "specification": "Write a function which returns nth catalan number.",
    "code": "import math\r\ndef catalan_number(n):\r\n    return (math.factorial(2*n) // (math.factorial(n) * math.factorial(n+1))) // (n+1)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 583,
    "precondition": "n is a non-negative integer."
  },
  "584": {
    "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
    "code": "def find_adverbs(sentence): \r\n    words = sentence.split() \r\n    for i, word in enumerate(words):\r\n        if word.endswith('ly'): \r\n            result = str(i) + '-' + str(len(word)+i) + ': ' + word \r\n            return result \r\n    return 'No adverb found in the sentence.'\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 584,
    "precondition": "sentence is a string."
  },
  "585": {
    "specification": "Write a function to find the n most expensive items in a given dataset.",
    "code": "def expensive_items(data, n):\r\n    data.sort(key=lambda x: x['price'], reverse=True)\r\n    return data[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 585,
    "precondition": "data is a list of dictionaries, each containing a 'price' key, and n is a non-negative integer such that 0 <= n <= len(data)."
  },
  "586": {
    "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
    "code": "def split_Arr(arr, n)\r\n    return arr[n:] + arr[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 586,
    "precondition": "arr is a list and n is an integer such that 0 <= n < len(arr)."
  },
  "587": {
    "specification": "Write a function to convert a list to a tuple.",
    "code": "def list_tuple(lst):\r\n    return tuple(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 587,
    "precondition": "lst is a list."
  },
  "588": {
    "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
    "code": "def big_diff(lst):\r\n  return max(lst) - min(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 588,
    "precondition": "lst is a list of comparable elements."
  },
  "589": {
    "specification": "Write a function to find perfect squares between two given numbers.",
    "code": "def perfect_squares(start, end):\r\n    return [x**2 for x in range(int(start**0.5),int(end**0.5)+1) if x*x>=start]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 589,
    "precondition": "start and end are real numbers such that start <= end."
  },
  "590": {
    "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
    "code": "import cmath\r\ndef polar_rect(r, theta):\r\n\tx = r * cmath.cos(theta)\r\n\ty = r * cmath.sin(theta)\r\n\treturn (x, y)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 590,
    "precondition": "r is a real number and theta is a number in radians."
  },
  "591": {
    "specification": "Write a python function to interchange the first and last elements in a list.",
    "code": "def swap_List(lst):\r\n\tfirst_elem = lst[0]\r\n\tlst[0] = lst[-1]\r\n\tlst[-1] = first\\_elem\r\n\treturn lst\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 591,
    "precondition": "lst is a list with at least one element."
  },
  "592": {
    "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
    "code": "def binomialCoeff(n, k):\r\n    if k > n - k:\r\n        k = n - k\r\n    num = 1\r\n    den = 1\r\n    for i in range(k)\r\n        num *= n\r\n        den *= i + 1\r\n        n -= 1\r\n    return num // den\r\n\r\ndef sum_Of_product(n):\r\n    res = 0\r\n    for i in range(1, n + 1):\r\n        res += binomialCoeff(n, i)\r\n    return res\r\n\r\nassert sum_Of_product(3) == 15\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 592,
    "precondition": "n is a non-negative integer."
  },
  "593": {
    "specification": "Write a function to remove leading zeroes from an ip address.",
    "code": "def removezero_ip(ip)\r\n    ip_list = ip.split('.')\r\n    for i in range(len(ip_list)-1,\r\n        if int(ip_list[i]) == 0:\r\n            ip_list[i] = ''\r\n    return '.'.join(ip_list)\r\n\r\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196') #Testcase passed\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 593,
    "precondition": "ip is a string representing an IP address, with dotted-decimal format consisting of four 8-bit fields separated by single dots, and leading zeroes are allowed in the fields."
  },
  "594": {
    "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
    "code": "def diff_even_odd(lst):\r\n    even_lst = [i for i in lst if i % 2 == 0]\r\n    odd_lst = [i for i in lst if i % 2 != 0]\r\n    if len(even_lst) > 0 and len(odd_lst) > 0:\r\n        return abs(even_lst[0] - odd_lst[0])\r\n    else:\r\n        return -1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 594,
    "precondition": "lst is a list of integers."
  },
  "595": {
    "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
    "code": "def min_Swaps(str1, str2):\r\n    count = 0\r\n    for i in range(len(str1));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 595,
    "precondition": "str1 and str2 are strings of equal length consisting of only '0' and '1' characters."
  },
  "596": {
    "specification": "Write a function to find the size in bytes of the given tuple.",
    "code": "import sys\r\ndef tuple_size(tup):\r\n    return sys.getsizeof(tup)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 596,
    "precondition": "tup is a tuple."
  },
  "597": {
    "specification": "Write a function to find kth element from the given two sorted arrays.",
    "code": "def find_kth(arr1, arr2, k):\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n\r\n    if m > n:\r\n        return find_kth(arr2, arr1, k)\r\n\r\n    if k > m:\r\n        return find_kth(arr1[m-n:], arr2, k-m+n)\r\n\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n\r\n    if m < k:\r\n        return find_kth(arr1, arr2[k-m:], k)\r\n\r\n    k -= 1\r\n    if arr1[k//2] <= arr2[k//2]:\r\n        return find_kth(arr1[k//2:], arr2, k - k//2)\r\n    else:\r\n        return find_kth(arr1, arr2[k//2:], k - k//2)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 597,
    "precondition": "arr1 and arr2 are sorted lists of comparable elements, and k is a positive integer such that k <= m + n where m = len(arr1) and n = len(arr2)."
  },
  "598": {
    "specification": "Write a function to check whether the given number is armstrong or not.",
    "code": "def power(n, x):\n    result = 1 \n    for i in range(x): \n        result = result * n \n    return result \n\ndef sum_of_digits(n):\n    sum = 0\r\n    while(n > 0):\r\n        sum += n % 10\r\n        n = int(n / 10)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 598,
    "precondition": "n is an integer."
  },
  "599": {
    "specification": "Write a function to find sum and average of first n natural numbers.",
    "code": "def sum_average(n):\r\n    sum = (n*(n+1))/2\r\n    avg = sum/n\r\n    return (sum, avg)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 599,
    "precondition": "n is an integer."
  },
  "600": {
    "specification": "Write a python function to check whether the given number is even or not.",
    "code": "def is_Even(n):\r\n    return n % 2 == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 600,
    "precondition": "n is an integer."
  },
  "602": {
    "specification": "Write a python function to find the first repeated character in a given string.",
    "code": "def first_repeated_char(str1):\r\n  chars_seen = set()\r\n  chars_repeat = set()\r\n  for char in str1:\r\n    if char in chars_seen:\r\n      chars_repeat.add(char)\r\n    else:\r\n      chars_seen.add(char)\r\n    if len(chars_repeat) > 0:\r\n      return char\r\n  return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 602,
    "precondition": "str1 is a string."
  },
  "603": {
    "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
    "code": "import math\r\ndef is_lucid(n):\r\n    count = 0\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            if i*i == n:\r\n                count += 1\r\n            else:\r\n                count += 2\r\n    return count % 2 == 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 603,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "604": {
    "specification": "Write a function to reverse words seperated by spaces in a given string.",
    "code": "def reverse_words(str1):\r\n    str2 = \" \".join(reversed(str1.split()))\r\n    return str2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 604,
    "precondition": "str1 is a string containing words separated by spaces."
  },
  "605": {
    "specification": "Write a function to check if the given integer is a prime number.",
    "code": "def prime_num(n):\r\n    if n<=1:\r\n        return False\r\n    if n<=3:\r\n        return True\r\n    if n%2==0 or n%3==0:\r\n        return False\r\n    i=5\r\n    while i*i<=n:\r\n        if n%i==0 or n%(i+2)==0:\r\n            return False\r\n        i+=6\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 605,
    "precondition": "n is an integer."
  },
  "606": {
    "specification": "Write a function to convert degrees to radians.",
    "code": "import math\ndef radian_degree(degree:\r\n    return math.radians(degree)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 606,
    "precondition": "degree is a real number."
  },
  "607": {
    "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
    "code": "import re\ndef find_literals(text, pattern)\r\n    search_obj = re.search(pattern, text)\r\n    if search_obj:\r\n        return (search_obj.group(), search_obj.start(), search_obj.end())\r\n    else:\r\n        return None\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 607,
    "precondition": "text is a string and pattern is a valid regular expression pattern."
  },
  "608": {
    "specification": "Write a python function to find nth bell number.",
    "code": "import math\ncache = {}\ndef factorial(n):\n\tif n in cache:\n\t\treturn cache[n]\n\telse:\n\t\tcache[n] = n * factorial(n-1)\n\t\treturn cache[n]\n\ndef bell_number(n):\n\tif n in cache:\n\t\treturn cache[n]\n\telse:\n\t\tcache[n] = sum([bell_number(i) * factorial(n-i) / factorial(n-i-1) for i in range(n)])\n\t\treturn cache[n]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 608,
    "precondition": "n is a non-negative integer."
  },
  "610": {
    "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
    "code": "def remove_kth_element(input_list, k):\r\n    return input_list[:k-1] + input_list[k:]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 610,
    "precondition": "input\\_list is a list of elements, k is an integer such that 0 <= k < len(input\\_list)."
  },
  "611": {
    "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
    "code": "def max_of_nth(mat, n)\r\n    max_val = max(mat[i][n] for i in range(len(mat))\r\n    return max_val\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 611,
    "precondition": "mat is a list of lists, and n is a non-negative integer such that 0 <= n < len(mat[0])."
  },
  "612": {
    "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
    "code": "def merge(lst): \r\n    first\\_elements = []\r\n    second\\_elements = []\r\r\n    for sublist in lst:\r\n        first\\_elements.append(sublist[0])\\\n        second\\_elements.append(sublist[1])\\\n    return [first\\_elements, second\\_elements]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 612,
    "precondition": "lst is a list of lists where each sublist has exactly two elements."
  },
  "614": {
    "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "code": "def cummulative_sum(numbers)\r\n    sum = 0\r\n    for num in numbers:\r\n        sum = sum + sum(num)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 614,
    "precondition": "numbers is a list of tuples where each tuple contains only numbers."
  },
  "615": {
    "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
    "code": "def average_tuple(tuples)\r\n\tresult = []\r\n\tfor t in tuples:\r\n\t\tinterim = sum(t)\r\n\t\taverage = interim / len(t)\r\n\t\tresult.append(average)\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 615,
    "precondition": "tuples is a tuple of tuples, and each inner tuple contains only numbers."
  },
  "616": {
    "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
    "code": "def tuple_modulo(tup1, tup2):\r\n    return tuple(x % y for x, y in zip(tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 616,
    "precondition": "tup1 and tup2 are tuples of the same length."
  },
  "617": {
    "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "code": "import math\ndef min_Jumps(p, jump\\_len):\r\n    dist\\_covered = 0\r\n    jump\\_count = 0\r\n    while(True):\r\n        dist\\_covered += jump_len\r\n        jump_count += 1\r\n        if(dist_covered >= p[0] and p[0] >= dist_covered - jump_len):\r\n            if(p[1] != 0):\r\n                dist\\_remaining = abs(p[1])\r\n                if(dist_remaining % (2 * jump_len) == 0):\r\n                    jump_count += dist_remaining // (2 * jump_len)\r\n                    break\r\n                else:\r\n                    jump_count += dist_remaining // (2 * jump_len) + 1\r\n                    break\r\n            else:\r\n                break\r\n        if(dist_covered >= p[0]:\r\n            break\r\n        if(dist_covered - jump_len < 0):\r\n            break\r\n    if(jump_count % 2 != 0):\r\n        jump_count += 1\r\n    if(dist_covered - jump_len < 0\r\n        return jump_count - 1 + (dist_covered - 0) / jump_len\r\n    else\r\n        return jump_count + (dist_covered - 0) / jump_len\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 617,
    "precondition": "p is a tuple of two integers (d, k) where d is the x-coordinate and k is the y-coordinate, and jump\\_len is a positive integer."
  },
  "618": {
    "specification": "Write a function to divide two lists element wise.",
    "code": "def div_list(lst1, lst2):\r\n    if len(lst1) != len(lst2):\r\n        return \"Error! Lists should be of the same length\"\r\n    else:\r\n        res = []\r\n        for i in range(len(lst1)):\r\n            res.append(lst1[i]/lst2[i])\r\n        return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 618,
    "precondition": "lst1 and lst2 are lists of the same length containing numbers."
  },
  "619": {
    "specification": "Write a function to move all the numbers to the end of the given string.",
    "code": "def move_num(s):\r\n    num = '0123456789'\r\n    res = \"\"\r\n    for i in s:\r\n        if i not in num:\r\n            res += i\r\n        else:\r\n            res += ''\\\n    res += ''.join(sorted(list(filter(str.isdigit, s)), reverse=True))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 619,
    "precondition": "s is a string."
  },
  "620": {
    "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
    "code": "from fractions import gcd\ndef is_coprime(a, b):\r\n    return gcd(a, b) == 1\r\n\r\ndef largest_subset(lst):\r\n    res = []\r\n    for i in range(len(lst)):\r\n        subset = [lst[i]]\r\n        for j in range(i+1, len(lst));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 620,
    "precondition": "lst is a list of integers greater than 0."
  },
  "622": {
    "specification": "Write a function to find the median of two sorted lists of same size.",
    "code": "def get_median(arr1, arr2, size):\r\n    arr = list(set(arr1 + arr2))\r\n    arr.sort()\r\n    n = size*\r\n    if n % 2 == 0:\r\n        return (arr[n//2] + arr[n//2 - 1])/2*\r\n    else:\r\n        return arr[n//2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 622,
    "precondition": "arr1 and arr2 are sorted lists of integers with the same size, size is a positive integer such that len(arr1) = len(arr2) = size."
  },
  "623": {
    "specification": "Write a function to compute the n-th power of each number in a list.",
    "code": "def nth_nums(nums, n):\r\n    res = [x**n for x in nums]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 623,
    "precondition": "nums is a list of numbers, and n is an integer."
  },
  "624": {
    "specification": "Write a python function to convert a given string to uppercase.",
    "code": "def is_upper(str1):\r\n\treturn str1.upper()\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 624,
    "precondition": "str1 is a string."
  },
  "625": {
    "specification": "Write a python function to interchange the first and last element in a given list.",
    "code": "def swap_List(lst):\r\n    if len(lst) < 2:\r\n        return lst\r\n    else:\r\n        lst[0], lst[len(lst)-1] = lst[len(lst)-1], lst[0]\r\n        return lst\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 625,
    "precondition": "lst is a list with at least one element."
  },
  "626": {
    "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
    "code": "import math\ndef triangle_area(r\r\n\t):\r\n\tif r < 0:\r\n\t\treturn None\r\n\tarea = math.pow(r, 2) * math.asin(1) * 0.5\r\n\treturn area\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 626,
    "precondition": "r is a real number."
  },
  "627": {
    "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
    "code": "def find_First_Missing(arr):\r\n    if not arr:\r\n        return 1\r\n    for i in range(len(arr)-1):\r\n        if arr[i+1] - arr[i] > 1:\r\n            return arr[i] + 1\r\n    return arr[-1] + 1\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 627,
    "precondition": "arr is a sorted list of non-negative integers."
  },
  "628": {
    "specification": "Write a function to replace all spaces in the given string with '%20'.",
    "code": "def replace_spaces(text:\r\n    return text.replace(' ','%20')\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 628,
    "precondition": "text is a string."
  },
  "629": {
    "specification": "Write a python function to find even numbers from a list of numbers.",
    "code": "def Split(lst*\r\n    return [num for num in lst if num % 2 == 0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 629,
    "precondition": "lst is a list of integers."
  },
  "630": {
    "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "code": "def get_coordinates(coordinate):\r\n    x, y = coordinate\r\n    result = [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if abs(dx) + abs(dy) > 0] \n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 630,
    "precondition": "coordinate is a tuple of two integers."
  },
  "631": {
    "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
    "code": "def replace_spaces(s):\r\n    return s.replace(' ','_').replace('_',' ')\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 631,
    "precondition": "s is a string."
  },
  "632": {
    "specification": "Write a python function to move all zeroes to the end of the given list.",
    "code": "def move_zero(lst):\r\n    count = 0\r\n    for i in lst:\r\n        if lst[i] != 0:\r\n            lst[count] = lst[i]\r\n            count += 1\r\n    for i in range(count, len(lst));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 632,
    "precondition": "lst is a list of integers."
  },
  "633": {
    "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
    "code": "def pair_xor_Sum(numbers,n):\r\n    if n%2 != 0:\r\n        return -1\r\n    else:\r\n        num = [x for x in numbers]\r\n        num_set = set(num)\r\n        res = 0\r\n        for i in num\\_set:\r\n            count = num.count(i)\r\n            if count % 2 != 0:\r\n                num.remove(i)\r\n        for i in range(0, len(num), 2):\r\n            res = res ^ (num[i] ^ num[i+1])\r\n        return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 633,
    "precondition": "numbers is a list of integers, and n is the number of elements in the list."
  },
  "635": {
    "specification": "Write a function to sort the given list.",
    "code": "import heapq\r\ndef heap_sort(arr):\r\n    heapq.heapify(arr)\r\n    return sorted(arr)\r\n    #return heapq.heappop(arr) for _ in range(len(arr))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 635,
    "precondition": "arr is a list of comparable elements."
  },
  "637": {
    "specification": "Write a function to check whether the given amount has no profit and no loss",
    "code": "def noprofit_noloss(amount, selling\\_price):\r\n    return amount == selling\\_price\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 637,
    "precondition": "amount and selling\\_price are numbers (int or float)."
  },
  "638": {
    "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
    "code": "import math\ndef wind_chill(velocity,temp)\r\n    if velocity < 4.8 or temp > 10:\r\n        return temp\r\n    else:\r\n        wci = 13.12 + 0.6215*temp - 11.37*math.pow(velocity,0.16) + 0.3965*temp*math.pow(velocity,0.16)\r\n        return math.floor(wci)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 638,
    "precondition": "velocity is a real number representing the wind velocity in km/h, and temp is a real number representing the temperature in celsius."
  },
  "639": {
    "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "code": "def sample_nam(names):\r\n    names = [name.capitalize() for name in names if name[0].isupper()] \r\n    return sum(len(name) for name in names)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 639,
    "precondition": "names is a list of strings representing names."
  },
  "640": {
    "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
    "code": "import re\r\ndef remove_parenthesis(text\\_list):\r\n  return tuple(re.sub(r'\\(.*?\\)', '', i) for i in text_list)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 640,
    "precondition": "text\\_list is a list of strings."
  },
  "641": {
    "specification": "Write a function to find the nth nonagonal number.",
    "code": "def nonagonal(n):\r\n    return (n*(n-1) + 1)*n/2\r\ndef is_nonagonal(n):\r\n    return nonagonal(n)*9 == math.factorial(n-1)\\*8\r\nassert is_nonagonal(10) == 325\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 641,
    "precondition": "n is an integer."
  },
  "643": {
    "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
    "code": "def text_match_wordz_middle(text:\r\n    if text.count('z') > 1 and text[0] != 'z' and text[-1] != 'z':\n        return True\n    else:\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 643,
    "precondition": "text is a string."
  },
  "644": {
    "specification": "Write a python function to reverse an array upto a given position.",
    "code": "def reverse_Array_Upto_K(arr, k):\r\n    arr[:k] = arr[:k][::-1]\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 644,
    "precondition": "arr is a list of elements, and k is an integer such that 0 <= k <= len(arr)."
  },
  "720": {
    "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
    "code": "def add_dict_to_tuple(tup, dct):\r\n    return tup + (dct,)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 720,
    "precondition": "tup is a tuple and dct is a dictionary."
  },
  "721": {
    "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
    "code": "def maxAverageOfPath(cost:\r\n    memo = [[-1 for x in range(len(cost))] for x in range(len(cost))]\r\n    return findMaxAverageUtil(cost, 0, 0, len(cost), memo)\r\ndef findMaxAverageUtil(cost, curr\\_i, curr\\_j, pathLen, memo):\r\n    if curr\\_i == pathLen - 1 and curr\\_j == pathLen - 1:\r\n        return cost[curr\\_i][curr\\_j]\r\n    if memo[curr\\_i][curr\\_j] != -1:\r\n        return memo[curr\\_i][curr\\_j]\r\n    if curr\\_i < pathLen - 1:\r\n        down = findMaxAverageUtil(cost, curr\\_i + 1, curr\\_j, pathLen, memo)\r\n    else:\r\n        down = float('-inf')\r\n    if curr\\_j < pathLen - 1:\r\n        right = findMaxAverageUtil(cost, curr\\_i, curr\\_j + 1, pathLen, memo)\r\n    else:\r\n        right = float('-inf')\r\n    memo[curr\\_i][curr\\_j] = max(down, right) + cost[curr\\_i][curr\\_j]\r\n    return memo[curr\\_i][curr\\_j]\r\ncost = [[1, 2, 3], [6, 5, 4], [7, 3, 9]]\r\nprint(maxAverageOfPath(cost))\r\n# Output: 5.2\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 721,
    "precondition": "cost is a 2D list of integers, where len(cost) = len(cost[0]) and all elements of cost are integers."
  },
  "722": {
    "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
    "code": "def filter_data(students, min_height, min_weight):\r\n    res = {k:v for (k, v) in students.items() if v[0] >= min_height and v[1] >= min_weight}\r\n    return (res)\r\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\\\nmin_height = 6.0\r\nmin_weight = 70\r\nassert filter_data(students, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 722,
    "precondition": "students is a dictionary, where keys are strings and values are tuples of two float numbers, min\\_height and min\\_weight are both float numbers."
  },
  "723": {
    "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
    "code": "def count_same_pair(lst1, lst2):\r\n    count = 0\r\n    for i in range(len(lst1));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 723,
    "precondition": "lst1 and lst2 are lists of the same length."
  },
  "724": {
    "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
    "code": "def power_base_sum(base, power):\r\n    num = 0\r\n    for i in range(power):\r\n        num = num * base\r\n    return sum(int(digit) for digit in str(num))\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 724,
    "precondition": "base is an integer greater than or equal to 2, and power is a non-negative integer."
  },
  "725": {
    "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
    "code": "def extract_quotation(string)\r\n    result = []\r\n    start = 0\r\n    while True:\r\n        start = string.find('\"', start) + 1\r\n        if start > 0:\r\n            end = string.find('\"', start)\r\n            result.append(string[start:end] )\r\n            start = end\r\n        else:\r\n            break\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 725,
    "precondition": "string is a string."
  },
  "726": {
    "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
    "code": "def multiply_elements(t\\_in):\r\n    return tuple(t\\_in[i] * t\\_in[i+1] for i in range(len(t\\_in)-1))\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 726,
    "precondition": "t\\_in is a tuple of numbers with length greater than or equal to 2."
  },
  "728": {
    "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
    "code": "def sum_list(lst1, lst2):\r\n    res = [lst1[i] + lst2[i] for i in range(len(lst1))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 728,
    "precondition": "lst1 and lst2 are lists with the same length n, where each element is a number."
  },
  "730": {
    "specification": "Write a function to remove consecutive duplicates of a given list.",
    "code": "def consecutive_duplicates(numbers):\r\n    if not numbers:\r\n        return []\r\n    res = [numbers[0]]\r\n    for i in range(1, len(numbers));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 730,
    "precondition": "numbers is a list."
  },
  "731": {
    "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
    "code": "import math\ndef lateralsurface_cone(r,h):\r\n    return math.pi*r*(math.sqrt(h**2 + r**2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 731,
    "precondition": "r and h are positive real numbers."
  },
  "732": {
    "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "code": "def replace_specialchar(str1)\r\n{\r\n    str1 = str1.replace(\" \", \":\")\r\n    str1 = str1.replace(\",\", \":\")\r\n    str1 = str1.replace(\".\",\"\")\r\n    return str1\r\n\r\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 732,
    "precondition": "str1 is a string."
  },
  "733": {
    "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "code": "def find_first_occurrence(arr, target):\r\n    if target not in arr:\r\n        return -1\r\n    else:\r\n        return arr.index(target)\r\n        # return next((i for i, x in enumerate(arr) if x == target))\r\n        # return [i for i, x in enumerate(arr) if x == target][0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 733,
    "precondition": "arr is a sorted list of integers and target is an integer."
  },
  "734": {
    "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
    "code": "def sum_Of_Subarray_Prod(arr)\r\n    result = 0\r\n    for i in range(len(arr))\r\n        prod = 1\r\n        for j in range(i, len(arr))\r\n            prod *= arr[j]\r\n            result += prod\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 734,
    "precondition": "arr is a list of non-zero integers."
  },
  "735": {
    "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
    "code": "def toggle_middle_bits(num):\r\n    num = num^((num >> 1) & (num >> 2))\r\n    return num\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 735,
    "precondition": "num is an integer."
  },
  "736": {
    "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
    "code": "def left_insertion(arr, val):\r\n    res = 0\r\n    for i in range(len(arr));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 736,
    "precondition": "arr is a sorted list of integers, and val is an integer."
  },
  "737": {
    "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "code": "import re\r\ndef check_str(str1):\r\n    if re.search(r\"^[aeiouAEIOU]\", str1):\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 737,
    "precondition": "str1 is a string"
  },
  "738": {
    "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
    "code": "import math\r\ndef geometric_sum(n):\r\n    return 1 - pow(2, -n)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 738,
    "precondition": "n is a positive integer."
  },
  "739": {
    "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
    "code": "def is_n_digit(num, n):\n    return len(str(num)) == n\n\ndef triangular_number(n):\n    return (n*(n+1))//2\n\ndef find_Index(n):\n    i = 1\n    while True:\n        if is_n_digit(triangular_number(i), n):\n            return i\n        i += 1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 739,
    "precondition": "n is a positive integer."
  },
  "740": {
    "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
    "code": "def tuple_to_dict(tup)\r\n\tres = {}\\\n\tfor i in range(0, len(tup), 2):\r\n\t\tif i < len(tup) - 1:\r\n\t\t\tres[tup[i]] = tup[i+1]\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 740,
    "precondition": "tup is a tuple with an even number of elements."
  },
  "741": {
    "specification": "Write a python function to check whether all the characters are same or not.",
    "code": "def all_Characters_Same(str1):\r\n    ch = str1[0]\r\n    res = True\r\n    for i in range(0,len(str1)):\r\n        if ch != str1[i]\r\n            res = False\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 741,
    "precondition": "str1 is a string."
  },
  "742": {
    "specification": "Write a function to caluclate the area of a tetrahedron.",
    "code": "import math\r\ndef area_tetrahedron(a /***/\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 742,
    "precondition": "a, b, c, and d are positive real numbers representing the lengths of the four edges of the tetrahedron such that a < b + c + d, b < a + c + d, c < a + b + d, and d < a + b + c."
  },
  "743": {
    "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
    "code": "def rotate_right(lst, shift): \r\n    return lst[shift:] + lst[:shift]\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 743,
    "precondition": "lst is a list of items and shift is a non-negative integer such that 0 <= shift <= len(lst)."
  },
  "744": {
    "specification": "Write a function to check if the given tuple has any none value or not.",
    "code": "def check_none(tup):\r\n    for i in tup:\r\n        if i is None:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 744,
    "precondition": "tup is a tuple."
  },
  "745": {
    "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
    "code": "def is_divisible_by_its_digits(num)\r\n    return all(num % digit == 0 for digit in set(int(digit) for digit in str(num)))\n\r\ndef divisible_by_digits(startnum, endnum):\r\n    return [i for i in range(startnum, endnum+1) if is_divisible_by_its_digits(i)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 745,
    "precondition": "startnum and endnum are integers such that startnum <= endnum."
  },
  "746": {
    "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
    "code": "import math\ndef sector_area(r, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360)*math.pi*(r**2)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 746,
    "precondition": "r is a positive number and angle is a non-negative number."
  },
  "747": {
    "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
    "code": "def lcs_of_three(str1, str2, str3)\r\n    dp = [[[0 for k in range(len(str3) + 1)] for j in range(len(str2) + 1)] for i in range(len(str1) + 1)]\r\n    for i in range(1, len(str1) + 1)\r\n        for j in range(1, len(str2) + 1):\r\n            for k in range(1, len(str3) + 1):\r\n                if str1[i - 1] == str2[j - 1] and str2[j - 1] == str3[k - 1]:\r\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\r\n                else:\r\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\r\n    return dp[len(str1)][len(str2)][len(str3)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 747,
    "precondition": "str1, str2 and str3 are strings."
  },
  "748": {
    "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
    "code": "def capital_words_spaces(s):\n    words = []\n    word = \"\"\n    for letter in s:\n        if letter.isupper() and not word:\n            words.append(word)\n            word = letter\n        else:\n            word += letter\n    words.append(word)\n    return \" \".join(words)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 748,
    "precondition": "s is a string."
  },
  "749": {
    "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
    "code": "def sort_numeric_strings(numbers):\r\n    return sorted(numbers, key=int)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 749,
    "precondition": "numbers is a list of strings that can be converted to integers."
  },
  "750": {
    "specification": "Write a function to add the given tuple to the given list.",
    "code": "def add_tuple(lst, tup):\r\n  lst.extend(tup)\r\n  return lst\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 750,
    "precondition": "lst is a mutable list and tup is a tuple."
  },
  "751": {
    "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "code": "def check_min_heap(arr:\r\n    return check_heap(arr, len(arr), 1)\r\n\r\ndef check_heap(arr, n, i):\r\n    if i > n // 2:\r\n        return True\r\n    l = 2 * i\r\n    r = 2 * i + 1\r\n    if (l < n and arr[l] < arr[i] and check_heap(arr, n, l)) or (r < n and arr[r] < arr[i] and check_heap(arr, n, r))\r\n        return False\r\n    return True\r\n\r\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 751,
    "precondition": "arr is a list of integers, n is a positive integer representing the size of the array arr, and i is a positive integer representing the index of the current node in the array."
  },
  "752": {
    "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
    "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 752,
    "precondition": "n is a non-negative integer."
  },
  "753": {
    "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
    "code": "def min_k(li, k)\r\n\r\n    # using sort function\r\n    # to sort the list\r\n    li = sorted(li, key = lambda x: x[1] )\r\n\r\n    # printing the first k elements\r\n    print(li[:k])\\\n\r\n# Driver code\r\nmin_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\r\n\r\n# This code is contributed by Mohit Kumra\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 753,
    "precondition": "li is a list of tuples, where each tuple contains two elements, and k is an integer such that 0 <= k <= len(li)."
  },
  "754": {
    "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
    "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for i in range(len(l1):\r\n        if l1[i] == l2[i] == l3[i]:\r\n            result.append(l1[i])\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 754,
    "precondition": "l1, l2, l3 are lists of the same length."
  },
  "755": {
    "specification": "Write a function to find the second smallest number in a list.",
    "code": "def second_smallest(numbers):\r\n    if len(numbers) < 2:\r\n        raise Exception(\"List should have at least two elements\")\r\n    first, second = numbers[0], float('inf')\r\n    for num in numbers:\r\n        if num < first:\r\n            first, second = num, first\r\n        elif num < second and num > first:\r\n            second = num\r\n    if second == float('inf'):\r\n        raise Exception(\"There is no second smallest element\")\r\n    return second\n",
    "total_tests": 4,
    "passed_tests": 2,
    "test_result": 0.5,
    "task_id": 755,
    "precondition": "numbers is a list of integers with at least two distinct elements."
  },
  "756": {
    "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
    "code": "import re\r\ndef text_match_zero_one(text):\r\n    pattern = re.compile(r'ab+')\r\n    result = pattern.match(text)\r\n    if result:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 6,
    "passed_tests": 5,
    "test_result": 0.8333333333333334,
    "task_id": 756,
    "precondition": "text is a string."
  },
  "757": {
    "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
    "code": "def count_reverse_pairs(arr):\r\n    count = 0\r\n    for word in arr:\r\n        rev_word = word[::-1]\r\n        if rev_word in arr:\r\n            count += 1\r\n            arr.remove(rev_word)\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 757,
    "precondition": "arr is a list of strings."
  },
  "758": {
    "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
    "code": "def unique_sublists(lst):\r\n    result = {}\r\n    for i in lst:\r\n        t = tuple(sorted(i))\r\n        if t in result:\r\n            result[t] += 1\r\n        else:\r\n            result[t] = 1\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 3,
    "test_result": 0.75,
    "task_id": 758,
    "precondition": "lst is a list of lists."
  },
  "759": {
    "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
    "code": "import re\r\ndef is_decimal(n):\r\n    pattern = r'^\\d+\\.\\d{2}$'\r\n    if re.match(pattern, n):\r\n        return True\r\n    return False\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 759,
    "precondition": "n is a string."
  },
  "760": {
    "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
    "code": "def unique_Element(numbers)\r\n    return len(set(numbers)) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 760,
    "precondition": "numbers is a list of integers."
  },
  "762": {
    "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
    "code": "def check_monthnumber_number(n):\r\n    if n==4 or n==6 or n==9 or n==11:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 762,
    "precondition": "n is an integer in the range [1, 12]."
  },
  "763": {
    "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
    "code": "def find_min_diff(arr, n):\r\n    diff = sys.maxsize\r\n    arr.sort()\r\n    for i in range(1, n):\r\n        if arr[i] - arr[i-1] < diff:\r\n            diff = arr[i] - arr[i-1]\r\n    return diff\r\nif __name__ == '__main__':\r\n    arr = (1,5,3,19,18,25)\r\n    n = len(arr)\r\n    print(find_min_diff(arr, n))\r\n    assert find_min_diff((1,5,3,19,18,25),6) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 763,
    "precondition": "arr is a list of integers, and n is the length of arr."
  },
  "764": {
    "specification": "Write a python function to count number of digits in a given string.",
    "code": "def number_ctr(test\\_str):\r\n    res = 0\r\n    for i in test\\_str:\r\n        if i.isdigit():\r\n            res += 1\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 764,
    "precondition": "test\\_str is a string."
  },
  "765": {
    "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
    "code": "def is_polite(n)\r\n    if n < 3:\r\n        return False\r\n    start = 1\r\n    count = 0\r\n    while True:\r\n        sum = 0\r\n        for i in range(start, start + count + 1):\r\n            sum += i\r\n        if sum > n:\r\n            start += 1\r\n            count = 0\r\n        else:\r\n            if sum == n:\r\n                return True\r\n            count += 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 765,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "766": {
    "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
    "code": "def pair_wise(lst):\r\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 766,
    "precondition": "lst is a list."
  },
  "767": {
    "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
    "code": "def get_pairs_count(lst,sum):\r\n    count = 0\r\n    for i in range(len(lst)):\r\n        for j in range(i+1,len(lst),1):\r\n            if lst[i] + lst[j] == sum:\r\n                count = count + 1\r\n    return count\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 767,
    "precondition": "lst is a list of integers, and sum is an integer."
  },
  "769": {
    "specification": "Write a python function to get the difference between two lists.",
    "code": "def Diff(lst1, lst2):\r\n\treturn [value for value in lst1 if value not in lst2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 769,
    "precondition": "lst1 and lst2 are lists of comparable elements."
  },
  "770": {
    "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "code": "def odd_num_sum(n):\r\n    sum = 0\r\n    for i in range(1, n*2, 2):\r\n        sum += i**4\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 770,
    "precondition": "n is a non-negative integer."
  },
  "771": {
    "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
    "code": "def check_expression(inputstr:\r\n   stack = []\r\n   dict = {\"]\":\"[\",\"}\":\"{\",\")\":\"(\"}\r\n   for char in inputstr:\r\n       if char in dict.values():\r\n           stack.append(char)\r\n       elif char in dict.keys():\r\n           if stack == [] or dict[char] != stack.pop:\r\n               return False\r\n   return stack == []\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 771,
    "precondition": "inputstr is a string."
  },
  "772": {
    "specification": "Write a function to remove all the words with k length in the given string.",
    "code": "def remove_length(s, k):\r\n    words = s.split()\r\n    res = []\r\n    for w in words:\r\n        if len(w) != k:\r\n            res.append(w)\r\n    return ' '.join(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 772,
    "precondition": "s is a string and k is an integer."
  },
  "773": {
    "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
    "code": "def occurance_substring(string, substring)\r\n    starts = [s.start() for s in re.finditer(substring, string)] \r\n    if len(starts) > 0:\r\n        return (substring, starts[0], starts[0]+len(substring))\r\n    else:\r\n        return None\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 773,
    "precondition": "string is a string and substring is a string."
  },
  "775": {
    "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "code": "def odd_position(lst):\r\n    count = 0\r\n    for i in range(len(lst)):\r\n        if i % 2 != 0:\r\n            if lst[i] % 2 != 0:\r\n                count += 1 \r\n            else:\r\n                return False \r\n    if count == len(lst) // 2:\r\n        return True \r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 775,
    "precondition": "lst is a list of integers."
  },
  "776": {
    "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "code": "def count_vowels(str1):\r\n    vowels = 'aeiouAEIOU'\r\n    count = 0\r\n    for i in range(len(str1) - 1):\r\n        if str1[i] in vowels and str1[i + 1] in vowels:\r\n            count += 1\r\n        elif str1[i] in vowels and str1[i + 1] not in vowels:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 776,
    "precondition": "str1 is a string."
  },
  "777": {
    "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
    "code": "def find_sum(lst):\r\n    res = set()\r\n    for i in lst:\r\n        if lst.count(i) == 1:\r\n            res.add(i)\r\n    return sum(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 777,
    "precondition": "lst is a list of integers."
  },
  "778": {
    "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "code": "def pack_consecutive_duplicates(lst):\r\n    if not lst:\r\n        return []\r\n    else:\r\n        pack\\_lst = [lst[0]]\r\n        for i in range(1, len(lst)):\r\n            if lst[i] != lst[i-1]:\r\n                pack\\_lst.append(lst[i])\\\n        return pack\\_lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 778,
    "precondition": "lst is a list."
  },
  "779": {
    "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
    "code": "def unique_sublists(lists):\r\n    unique = {}\r\n    for i in lists:\r\n        t = tuple(i)\r\n        if t not in unique:\r\n            unique[t] = 1\r\n        else:\r\n            unique[t] += 1\r\n    return unique\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 779,
    "precondition": "lists is a list of lists."
  },
  "780": {
    "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
    "code": "def find_combinations(lst)\r\n\treturn [(a, b) for a, b in itertools.product(reduce(lambda x, y: x + y, map(lambda x: x[0], lst)), reduce(lambda x, y: x + y, map(lambda x: x[1], lst))) if a + b in reduce(lambda x, y: x + [y], map(lambda x: x[1], filter(lambda x: a in x, lst)))]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 780,
    "precondition": "lst is a list of tuples, where each tuple contains two elements: an integer and a list of integers."
  },
  "781": {
    "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
    "code": "def count_divisors(n):\r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count % 2 == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 781,
    "precondition": "n is a positive integer."
  },
  "782": {
    "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
    "code": "def odd_length_sum(arr):\r\n    res = 0\r\n    for i in range(len(arr))\r\n        for j in range(i, len(arr))\r\n            if (j-i+1) % 2 != 0:\r\n                res += sum(arr[i:j+1])\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 782,
    "precondition": "arr is a list of numbers."
  },
  "783": {
    "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
    "code": "import math\r\ndef rgb_to_hsv(r, g, b):\r\n    max_value = max(r, g, b)\r\n    min_value = min(r, g, b)\r\n    h = 0\r\n    s = 0\r\n    v = max_value\r\n    if max_value != 0:\r\n        diff = max_value - min_value\r\n        if max_value == r:\r\n            h = (60 * (((g - b) / diff) % 6))\r\n        elif max_value == g:\r\n            h = (60 * (((b - r) / diff) + 2))\r\n        else:\r\n            h = (60 * (((r - g) / diff) + 4))\r\n        if max_value != 0:\r\n            s = (diff / max_value) * 100\r\n    h = round(h,2)\r\n    s = round(s,2)\r\n    v = round(v,2)\r\n    return h,s,v\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 783,
    "precondition": "r, g, and b are integers such that 0 <= r, g, b <= 255."
  },
  "784": {
    "specification": "Write a function to find the product of first even and odd number of a given list.",
    "code": "def mul_even_odd(numbers)\r\n    even = [n for n in numbers if n % 2 == 0]\r\n    odd = [n for n in numbers if n % 2 != 0]\r\n    if even and odd:\r\n        return even[0] * odd[0]\r\n    else:\r\n        return \"List does not contain even and odd numbers\"\r\nnumbers = [1,3,5,7,4,1,6,8]\r\nprint(mul_even_odd(numbers))\r\n# Output: 4\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 784,
    "precondition": "numbers is a list of integers."
  },
  "785": {
    "specification": "Write a function to convert tuple string to integer tuple.",
    "code": "import ast\r\ndef tuple_str_int(tup_str):\r\n    return ast.literal_eval(tup_str)\r\nprint(tuple_str_int(\"(7, 8, 9)\")) # (7, 8, 9)\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 785,
    "precondition": "tup\\_str is a string representing a tuple of integers."
  },
  "786": {
    "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "code": "def right_insertion(arr, x):\r\n\tn = len(arr)\r\n\tfor i in range(n):\r\n\t\tif x>arr[i]:\r\n\t\t\tcontinue\r\n\t\treturn i\n\treturn n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 786,
    "precondition": "arr is a list of comparable elements, x is a comparable element such that the resulting return value is a valid index."
  },
  "787": {
    "specification": "Write a function that matches a string that has an a followed by three 'b'.",
    "code": "import re\r\ndef text_match_three(teststr):\r\n  match = re.search(r'abbb', teststr)\r\n  if match:\r\n    return True\r\n  else:\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 787,
    "precondition": "teststr is a string."
  },
  "788": {
    "specification": "Write a function to create a new tuple from the given string and list.",
    "code": "def new_tuple(t, lst):\r\n    return tuple(t + lst)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 788,
    "precondition": "t is a string and lst is a list."
  },
  "790": {
    "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
    "code": "def even_position(lst):\r\n    flag = True\r\n    for i in range(len(lst)):\n        if i % 2 == 0:\r\n            if lst[i] % 2 != 0:\r\n                flag = False\r\n    return flag\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 790,
    "precondition": "lst is a list of integers."
  },
  "791": {
    "specification": "Write a function to remove tuples from the given tuple.",
    "code": "def remove_nested(tup):\r\n    res = []\r\n    for i in tup:\r\n        if type(i) != tuple:\r\n            res.append(i)\r\n    return tuple(res)\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 791,
    "precondition": "tup is a tuple containing elements that are either of a single type or tuples containing elements of a single type."
  },
  "792": {
    "specification": "Write a python function to count the number of lists in a given number of lists.",
    "code": "def count_list(lst): \r\n  return len(lst)\r\n \nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 792,
    "precondition": "lst is a list of lists."
  },
  "793": {
    "specification": "Write a python function to find the last position of an element in a sorted array.",
    "code": "def last(arr, x):\r\n    if not arr:\r\n        return -1\r\n    elif len(arr) == 1:\r\n        if arr[0] == x:\r\n            return 0\r\n        else:\r\n            return -1\r\n    else:\r\n        low = 0\r\n        high = len(arr) - 1\r\n        while low <= high:\r\n            mid = (low + high) // 2\r\n            if arr[mid] == x:\r\n                if mid == len(arr) - 1 or arr[mid] != arr[mid+1]:\r\n                    return mid\r\n                else:\r\n                    low = mid + 1\r\n            elif arr[mid] < x:\r\n                low = mid + 1\r\n            else:\r\n                high = mid - 1\r\n        return -1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 793,
    "precondition": "arr is a sorted list of integers, x is an integer."
  },
  "794": {
    "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "code": "import re\ndef text_starta_endb(text):\n    return bool(re.search('^a.*b$', text))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 794,
    "precondition": "text is a string."
  },
  "796": {
    "specification": "Write function to find the sum of all items in the given dictionary.",
    "code": "def return_sum(dictionary:\r\n\treturn sum(dictionary.values())\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 796,
    "precondition": "dictionary is a dictionary with numeric values."
  },
  "797": {
    "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "code": "def sum_in_range(l,r):\r\n    return sum(range(l, r+1)) - sum(range(l, r+1, 2))\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 797,
    "precondition": "l and r are integers such that l <= r."
  },
  "798": {
    "specification": "Write a python function to find the sum of an array.",
    "code": "def _sum(array):\r\n    result = 0\r\n    for i in array:\r\n        result += i\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 798,
    "precondition": "array is a list of numbers."
  },
  "799": {
    "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
    "code": "def left_rotate(n, d):\r\n    return (n << d) & 0xFFFFFFFF\r\ntest\\_case = left\\_rotate(16,2) assert test\\_case == 64\n",
    "total_tests": 7,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 799,
    "precondition": "n is an integer, and d is a non-negative integer such that 0 <= d <= 32."
  },
  "800": {
    "specification": "Write a function to remove all whitespaces from a string.",
    "code": "def remove_all_spaces(s):\r\n    return s.replace(\" \",\"\")\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 800,
    "precondition": "s is a string."
  },
  "801": {
    "specification": "Write a python function to count the number of equal numbers from three given integers.",
    "code": "def test_three_equal(a, b, c):\r\n    count = 0\r\n    if a == b:\r\n        count += 1\r\n    if b == c:\r\n        count += 1\r\n    if a == c:\r\n        count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 801,
    "precondition": "a, b, and c are integers."
  },
  "802": {
    "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
    "code": "def count_rotation(arr*\r\n\tn = len(arr)\r\n\tif n == 1:\r\n\t\treturn 0\r\n\tfor i in range(n*\r\n\t\tif arr[i] > arr[i+1\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\r\n\t\t\treturn (i + 1)\r\n\treturn 0\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 802,
    "precondition": "arr is a non-empty list of integers."
  },
  "803": {
    "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
    "code": "import math\ndef is_perfect_square(n):\n    sqrt = int(math.sqrt(n))\r\n    return (sqrt*sqrt == n)\r\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 803,
    "precondition": "n is an integer."
  },
  "804": {
    "specification": "Write a function to check whether the product of numbers in a list is even or not.",
    "code": "def is_product_even(lst):\r\n    return (all(i % 2 == 0 for i in lst) or len([x for x in lst if x != 0]) > 1) if lst else False\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 804,
    "precondition": "lst is a list of integers."
  },
  "805": {
    "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
    "code": "def max_sum_list(lst):\r\n    max_sum = sum(lst[0])\r\n    max_list = lst[0]\r\n    for i in lst:\r\n        if sum(i) > max_sum:\r\n            max_sum = sum(i)\r\n            max_list = i\r\n    return max_list\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 805,
    "precondition": "lst is a list of lists of integers."
  },
  "806": {
    "specification": "Write a function to find maximum run of uppercase characters in the given string.",
    "code": "def max_run_uppercase(s):\r\n    return max(len(list(g)) for g in groupby(s.upper()) if g[0].isupper())\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 806,
    "precondition": "s is a string."
  },
  "807": {
    "specification": "Write a python function to find the first odd number in a given list of numbers.",
    "code": "def first_odd(lst):\r\n    for i in range(len(lst));\r\n        if lst[i] % 2 != 0:\r\n            return i\r\n    return \"No odd number in the list\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 807,
    "precondition": "lst is a list of integers."
  },
  "808": {
    "specification": "Write a function to check if the given tuples contain the k or not.",
    "code": "def check_K(tup, k):\r\n    if k in tup:\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 808,
    "precondition": "tup is a tuple, and k is a value of any immutable data type."
  },
  "809": {
    "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
    "code": "def check_smaller(tup1, tup2):\r\n    if len(tup1) != len(tup2):\r\n        return False\r\n    for i in range(len(tup1):\r\n        if tup1[i] >= tup2[i]:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 809,
    "precondition": "tup1 and tup2 are tuples of the same length."
  }
}